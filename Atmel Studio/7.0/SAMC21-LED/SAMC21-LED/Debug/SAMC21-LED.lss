
SAMC21-LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000276c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000276c  0000276c  0001276c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000003c  20000000  00002774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001e0  2000003c  000027b0  0002003c  2**2
                  ALLOC
  4 .stack        00002004  2000021c  00002990  0002003c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .debug_info   000408c7  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006537  00000000  00000000  00060984  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000169f1  00000000  00000000  00066ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001558  00000000  00000000  0007d8ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001a80  00000000  00000000  0007ee04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002722d  00000000  00000000  00080884  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000229fd  00000000  00000000  000a7ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a4dc0  00000000  00000000  000ca4ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003514  00000000  00000000  0016f270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 22 00 20 35 01 00 00 31 01 00 00 31 01 00 00      ". 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 e1 15 00 00     1...1...1.......
      4c:	a9 12 00 00 31 01 00 00 31 01 00 00 ed 14 00 00     ....1...1.......
      5c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	d1 10 00 00 31 01 00 00 31 01 00 00 31 01 00 00     ....1...1...1...
      8c:	31 01 00 00 69 20 00 00 7d 20 00 00 31 01 00 00     1...i ..} ..1...
      9c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      ac:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	2000003c 	.word	0x2000003c
      dc:	00000000 	.word	0x00000000
      e0:	00002774 	.word	0x00002774

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000040 	.word	0x20000040
     110:	00002774 	.word	0x00002774
     114:	00002774 	.word	0x00002774
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <atmel_start_init+0xc>)
     120:	4798      	blx	r3
	dma_memory_init();
     122:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     124:	4798      	blx	r3
}
     126:	bd10      	pop	{r4, pc}
     128:	00000829 	.word	0x00000829
     12c:	000001e5 	.word	0x000001e5

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     136:	4a17      	ldr	r2, [pc, #92]	; (194 <Reset_Handler+0x60>)
     138:	4b17      	ldr	r3, [pc, #92]	; (198 <Reset_Handler+0x64>)
     13a:	429a      	cmp	r2, r3
     13c:	d011      	beq.n	162 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     13e:	001a      	movs	r2, r3
     140:	4b16      	ldr	r3, [pc, #88]	; (19c <Reset_Handler+0x68>)
     142:	429a      	cmp	r2, r3
     144:	d20d      	bcs.n	162 <Reset_Handler+0x2e>
     146:	4a16      	ldr	r2, [pc, #88]	; (1a0 <Reset_Handler+0x6c>)
     148:	3303      	adds	r3, #3
     14a:	1a9b      	subs	r3, r3, r2
     14c:	089b      	lsrs	r3, r3, #2
     14e:	3301      	adds	r3, #1
     150:	009b      	lsls	r3, r3, #2
     152:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     154:	4810      	ldr	r0, [pc, #64]	; (198 <Reset_Handler+0x64>)
     156:	490f      	ldr	r1, [pc, #60]	; (194 <Reset_Handler+0x60>)
     158:	588c      	ldr	r4, [r1, r2]
     15a:	5084      	str	r4, [r0, r2]
     15c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     15e:	429a      	cmp	r2, r3
     160:	d1fa      	bne.n	158 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     162:	4a10      	ldr	r2, [pc, #64]	; (1a4 <Reset_Handler+0x70>)
     164:	4b10      	ldr	r3, [pc, #64]	; (1a8 <Reset_Handler+0x74>)
     166:	429a      	cmp	r2, r3
     168:	d20a      	bcs.n	180 <Reset_Handler+0x4c>
     16a:	43d3      	mvns	r3, r2
     16c:	490e      	ldr	r1, [pc, #56]	; (1a8 <Reset_Handler+0x74>)
     16e:	185b      	adds	r3, r3, r1
     170:	2103      	movs	r1, #3
     172:	438b      	bics	r3, r1
     174:	3304      	adds	r3, #4
     176:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     178:	2100      	movs	r1, #0
     17a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     17c:	4293      	cmp	r3, r2
     17e:	d1fc      	bne.n	17a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     180:	4a0a      	ldr	r2, [pc, #40]	; (1ac <Reset_Handler+0x78>)
     182:	21ff      	movs	r1, #255	; 0xff
     184:	4b0a      	ldr	r3, [pc, #40]	; (1b0 <Reset_Handler+0x7c>)
     186:	438b      	bics	r3, r1
     188:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     18a:	4b0a      	ldr	r3, [pc, #40]	; (1b4 <Reset_Handler+0x80>)
     18c:	4798      	blx	r3
        main();
     18e:	4b0a      	ldr	r3, [pc, #40]	; (1b8 <Reset_Handler+0x84>)
     190:	4798      	blx	r3
     192:	e7fe      	b.n	192 <Reset_Handler+0x5e>
     194:	00002774 	.word	0x00002774
     198:	20000000 	.word	0x20000000
     19c:	2000003c 	.word	0x2000003c
     1a0:	20000004 	.word	0x20000004
     1a4:	2000003c 	.word	0x2000003c
     1a8:	2000021c 	.word	0x2000021c
     1ac:	e000ed00 	.word	0xe000ed00
     1b0:	00000000 	.word	0x00000000
     1b4:	00002401 	.word	0x00002401
     1b8:	000020fd 	.word	0x000020fd

000001bc <dma_transfer_done>:
 * \internal Process transfer done interrupts
 *
 * \param[in] resource The pointer to memory resource
 */
static void dma_transfer_done(struct _dma_resource *resource)
{
     1bc:	b510      	push	{r4, lr}
	(void)resource;
	if (descr.memory_cb.complete) {
     1be:	4b03      	ldr	r3, [pc, #12]	; (1cc <dma_transfer_done+0x10>)
     1c0:	685b      	ldr	r3, [r3, #4]
     1c2:	2b00      	cmp	r3, #0
     1c4:	d000      	beq.n	1c8 <dma_transfer_done+0xc>
		descr.memory_cb.complete();
     1c6:	4798      	blx	r3
	}
}
     1c8:	bd10      	pop	{r4, pc}
     1ca:	46c0      	nop			; (mov r8, r8)
     1cc:	20000058 	.word	0x20000058

000001d0 <dma_memory_error>:
 * \internal Process transfer error interrupts
 *
 * \param[in] resource The pointer to memory resource
 */
static void dma_memory_error(struct _dma_resource *resource)
{
     1d0:	b510      	push	{r4, lr}
	(void)resource;
	if (descr.memory_cb.error) {
     1d2:	4b03      	ldr	r3, [pc, #12]	; (1e0 <dma_memory_error+0x10>)
     1d4:	689b      	ldr	r3, [r3, #8]
     1d6:	2b00      	cmp	r3, #0
     1d8:	d000      	beq.n	1dc <dma_memory_error+0xc>
		descr.memory_cb.error();
     1da:	4798      	blx	r3
	}
}
     1dc:	bd10      	pop	{r4, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	20000058 	.word	0x20000058

000001e4 <dma_memory_init>:
 * \brief Initialize DMA
 */
int32_t dma_memory_init(void)
{   
//	_dma_get_channel_resource(&descr.resource, CONF_DMA_MEMORY_CHANNEL);
	descr.resource->dma_cb.transfer_done = dma_transfer_done;
     1e4:	4b03      	ldr	r3, [pc, #12]	; (1f4 <dma_memory_init+0x10>)
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	4a03      	ldr	r2, [pc, #12]	; (1f8 <dma_memory_init+0x14>)
     1ea:	601a      	str	r2, [r3, #0]
	descr.resource->dma_cb.error         = dma_memory_error;
     1ec:	4a03      	ldr	r2, [pc, #12]	; (1fc <dma_memory_init+0x18>)
     1ee:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
}
     1f0:	2000      	movs	r0, #0
     1f2:	4770      	bx	lr
     1f4:	20000058 	.word	0x20000058
     1f8:	000001bd 	.word	0x000001bd
     1fc:	000001d1 	.word	0x000001d1

00000200 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
     200:	4a06      	ldr	r2, [pc, #24]	; (21c <AC_0_CLOCK_init+0x1c>)
     202:	69d1      	ldr	r1, [r2, #28]
     204:	2380      	movs	r3, #128	; 0x80
     206:	035b      	lsls	r3, r3, #13
     208:	430b      	orrs	r3, r1
     20a:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     20c:	4b04      	ldr	r3, [pc, #16]	; (220 <AC_0_CLOCK_init+0x20>)
     20e:	2240      	movs	r2, #64	; 0x40
     210:	2184      	movs	r1, #132	; 0x84
     212:	0049      	lsls	r1, r1, #1
     214:	505a      	str	r2, [r3, r1]
     216:	3118      	adds	r1, #24
     218:	505a      	str	r2, [r3, r1]
	     * configuration. GCLK_ADC1 must be used to configure the clock for AC as
	     * GCLK_AC is not functional. Errata reference: 13404
	     */
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     21a:	4770      	bx	lr
     21c:	40000800 	.word	0x40000800
     220:	40001c00 	.word	0x40001c00

00000224 <AC_0_init>:

void AC_0_init(void)
{
     224:	b510      	push	{r4, lr}
	AC_0_CLOCK_init();
     226:	4b03      	ldr	r3, [pc, #12]	; (234 <AC_0_init+0x10>)
     228:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
     22a:	4903      	ldr	r1, [pc, #12]	; (238 <AC_0_init+0x14>)
     22c:	4803      	ldr	r0, [pc, #12]	; (23c <AC_0_init+0x18>)
     22e:	4b04      	ldr	r3, [pc, #16]	; (240 <AC_0_init+0x1c>)
     230:	4798      	blx	r3
	AC_0_PORT_init();
}
     232:	bd10      	pop	{r4, pc}
     234:	00000201 	.word	0x00000201
     238:	42005000 	.word	0x42005000
     23c:	20000134 	.word	0x20000134
     240:	00000929 	.word	0x00000929

00000244 <ADC_0_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC0;
     244:	4a05      	ldr	r2, [pc, #20]	; (25c <ADC_0_CLOCK_init+0x18>)
     246:	69d1      	ldr	r1, [r2, #28]
     248:	2380      	movs	r3, #128	; 0x80
     24a:	029b      	lsls	r3, r3, #10
     24c:	430b      	orrs	r3, r1
     24e:	61d3      	str	r3, [r2, #28]
     250:	2140      	movs	r1, #64	; 0x40
     252:	2382      	movs	r3, #130	; 0x82
     254:	005b      	lsls	r3, r3, #1
     256:	4a02      	ldr	r2, [pc, #8]	; (260 <ADC_0_CLOCK_init+0x1c>)
     258:	50d1      	str	r1, [r2, r3]

void ADC_0_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     25a:	4770      	bx	lr
     25c:	40000800 	.word	0x40000800
     260:	40001c00 	.word	0x40001c00

00000264 <ADC_0_init>:

void ADC_0_init(void)
{
     264:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     266:	4b05      	ldr	r3, [pc, #20]	; (27c <ADC_0_init+0x18>)
     268:	4798      	blx	r3
	ADC_0_PORT_init();
	adc_sync_init(&ADC_0, ADC0, _adc_get_adc_sync());
     26a:	4b05      	ldr	r3, [pc, #20]	; (280 <ADC_0_init+0x1c>)
     26c:	4798      	blx	r3
     26e:	0002      	movs	r2, r0
     270:	4904      	ldr	r1, [pc, #16]	; (284 <ADC_0_init+0x20>)
     272:	4805      	ldr	r0, [pc, #20]	; (288 <ADC_0_init+0x24>)
     274:	4b05      	ldr	r3, [pc, #20]	; (28c <ADC_0_init+0x28>)
     276:	4798      	blx	r3
}
     278:	bd10      	pop	{r4, pc}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	00000245 	.word	0x00000245
     280:	00000fbd 	.word	0x00000fbd
     284:	42004400 	.word	0x42004400
     288:	2000015c 	.word	0x2000015c
     28c:	0000095d 	.word	0x0000095d

00000290 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     290:	b510      	push	{r4, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     292:	4a05      	ldr	r2, [pc, #20]	; (2a8 <CRC_0_init+0x18>)
     294:	6993      	ldr	r3, [r2, #24]
     296:	2102      	movs	r1, #2
     298:	430b      	orrs	r3, r1
     29a:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     29c:	4903      	ldr	r1, [pc, #12]	; (2ac <CRC_0_init+0x1c>)
     29e:	4804      	ldr	r0, [pc, #16]	; (2b0 <CRC_0_init+0x20>)
     2a0:	4b04      	ldr	r3, [pc, #16]	; (2b4 <CRC_0_init+0x24>)
     2a2:	4798      	blx	r3
}
     2a4:	bd10      	pop	{r4, pc}
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	40000800 	.word	0x40000800
     2ac:	41002000 	.word	0x41002000
     2b0:	20000138 	.word	0x20000138
     2b4:	00000a55 	.word	0x00000a55

000002b8 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     2b8:	b510      	push	{r4, lr}
     2ba:	2140      	movs	r1, #64	; 0x40
     2bc:	2388      	movs	r3, #136	; 0x88
     2be:	4a05      	ldr	r2, [pc, #20]	; (2d4 <EXTERNAL_IRQ_0_init+0x1c>)
     2c0:	50d1      	str	r1, [r2, r3]
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     2c2:	4a05      	ldr	r2, [pc, #20]	; (2d8 <EXTERNAL_IRQ_0_init+0x20>)
     2c4:	6951      	ldr	r1, [r2, #20]
     2c6:	2380      	movs	r3, #128	; 0x80
     2c8:	00db      	lsls	r3, r3, #3
     2ca:	430b      	orrs	r3, r1
     2cc:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
     2ce:	4b03      	ldr	r3, [pc, #12]	; (2dc <EXTERNAL_IRQ_0_init+0x24>)
     2d0:	4798      	blx	r3
}
     2d2:	bd10      	pop	{r4, pc}
     2d4:	40001c00 	.word	0x40001c00
     2d8:	40000800 	.word	0x40000800
     2dc:	00000b41 	.word	0x00000b41

000002e0 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     2e0:	4a02      	ldr	r2, [pc, #8]	; (2ec <FLASH_0_CLOCK_init+0xc>)
     2e2:	6913      	ldr	r3, [r2, #16]
     2e4:	2120      	movs	r1, #32
     2e6:	430b      	orrs	r3, r1
     2e8:	6113      	str	r3, [r2, #16]

void FLASH_0_CLOCK_init(void)
{

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}
     2ea:	4770      	bx	lr
     2ec:	40000800 	.word	0x40000800

000002f0 <FLASH_0_init>:

void FLASH_0_init(void)
{
     2f0:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     2f2:	4b03      	ldr	r3, [pc, #12]	; (300 <FLASH_0_init+0x10>)
     2f4:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     2f6:	4903      	ldr	r1, [pc, #12]	; (304 <FLASH_0_init+0x14>)
     2f8:	4803      	ldr	r0, [pc, #12]	; (308 <FLASH_0_init+0x18>)
     2fa:	4b04      	ldr	r3, [pc, #16]	; (30c <FLASH_0_init+0x1c>)
     2fc:	4798      	blx	r3
}
     2fe:	bd10      	pop	{r4, pc}
     300:	000002e1 	.word	0x000002e1
     304:	41004000 	.word	0x41004000
     308:	20000104 	.word	0x20000104
     30c:	00000b7d 	.word	0x00000b7d

00000310 <CALENDAR_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     310:	4a03      	ldr	r2, [pc, #12]	; (320 <CALENDAR_0_CLOCK_init+0x10>)
     312:	6951      	ldr	r1, [r2, #20]
     314:	2380      	movs	r3, #128	; 0x80
     316:	009b      	lsls	r3, r3, #2
     318:	430b      	orrs	r3, r1
     31a:	6153      	str	r3, [r2, #20]

void CALENDAR_0_CLOCK_init(void)
{
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
}
     31c:	4770      	bx	lr
     31e:	46c0      	nop			; (mov r8, r8)
     320:	40000800 	.word	0x40000800

00000324 <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     324:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     326:	4b03      	ldr	r3, [pc, #12]	; (334 <CALENDAR_0_init+0x10>)
     328:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     32a:	4903      	ldr	r1, [pc, #12]	; (338 <CALENDAR_0_init+0x14>)
     32c:	4803      	ldr	r0, [pc, #12]	; (33c <CALENDAR_0_init+0x18>)
     32e:	4b04      	ldr	r3, [pc, #16]	; (340 <CALENDAR_0_init+0x1c>)
     330:	4798      	blx	r3
}
     332:	bd10      	pop	{r4, pc}
     334:	00000311 	.word	0x00000311
     338:	40002400 	.word	0x40002400
     33c:	20000164 	.word	0x20000164
     340:	000009ad 	.word	0x000009ad

00000344 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
     344:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     346:	2382      	movs	r3, #130	; 0x82
     348:	05db      	lsls	r3, r3, #23
     34a:	2048      	movs	r0, #72	; 0x48
     34c:	5c19      	ldrb	r1, [r3, r0]
     34e:	2204      	movs	r2, #4
     350:	4391      	bics	r1, r2
     352:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     354:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     356:	2501      	movs	r5, #1
     358:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     35a:	2401      	movs	r4, #1
     35c:	4321      	orrs	r1, r4
     35e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     360:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     362:	3814      	subs	r0, #20
     364:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     366:	260f      	movs	r6, #15
     368:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     36a:	3e0d      	subs	r6, #13
     36c:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     36e:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     370:	2149      	movs	r1, #73	; 0x49
     372:	5c5e      	ldrb	r6, [r3, r1]
     374:	4396      	bics	r6, r2
     376:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     378:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     37a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     37c:	4322      	orrs	r2, r4
     37e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     380:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     382:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     384:	393a      	subs	r1, #58	; 0x3a
     386:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     388:	3111      	adds	r1, #17
     38a:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     38c:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA09, PINMUX_PA09C_SERCOM0_PAD1);
}
     38e:	bd70      	pop	{r4, r5, r6, pc}

00000390 <I2C_0_CLOCK_init>:
     390:	4b06      	ldr	r3, [pc, #24]	; (3ac <I2C_0_CLOCK_init+0x1c>)
     392:	2140      	movs	r1, #64	; 0x40
     394:	22cc      	movs	r2, #204	; 0xcc
     396:	5099      	str	r1, [r3, r2]
     398:	3103      	adds	r1, #3
     39a:	3a04      	subs	r2, #4
     39c:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     39e:	4a04      	ldr	r2, [pc, #16]	; (3b0 <I2C_0_CLOCK_init+0x20>)
     3a0:	69d3      	ldr	r3, [r2, #28]
     3a2:	3941      	subs	r1, #65	; 0x41
     3a4:	430b      	orrs	r3, r1
     3a6:	61d3      	str	r3, [r2, #28]
void I2C_0_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
}
     3a8:	4770      	bx	lr
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	40001c00 	.word	0x40001c00
     3b0:	40000800 	.word	0x40000800

000003b4 <I2C_0_init>:

void I2C_0_init(void)
{
     3b4:	b510      	push	{r4, lr}
	I2C_0_CLOCK_init();
     3b6:	4b04      	ldr	r3, [pc, #16]	; (3c8 <I2C_0_init+0x14>)
     3b8:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM0);
     3ba:	4904      	ldr	r1, [pc, #16]	; (3cc <I2C_0_init+0x18>)
     3bc:	4804      	ldr	r0, [pc, #16]	; (3d0 <I2C_0_init+0x1c>)
     3be:	4b05      	ldr	r3, [pc, #20]	; (3d4 <I2C_0_init+0x20>)
     3c0:	4798      	blx	r3
	I2C_0_PORT_init();
     3c2:	4b05      	ldr	r3, [pc, #20]	; (3d8 <I2C_0_init+0x24>)
     3c4:	4798      	blx	r3
}
     3c6:	bd10      	pop	{r4, pc}
     3c8:	00000391 	.word	0x00000391
     3cc:	42000400 	.word	0x42000400
     3d0:	200001bc 	.word	0x200001bc
     3d4:	00000c75 	.word	0x00000c75
     3d8:	00000345 	.word	0x00000345

000003dc <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3de:	46c6      	mov	lr, r8
     3e0:	b500      	push	{lr}
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3e2:	22c0      	movs	r2, #192	; 0xc0
     3e4:	05d2      	lsls	r2, r2, #23
     3e6:	2001      	movs	r0, #1
     3e8:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ea:	2382      	movs	r3, #130	; 0x82
     3ec:	05db      	lsls	r3, r3, #23
     3ee:	4921      	ldr	r1, [pc, #132]	; (474 <SPI_0_PORT_init+0x98>)
     3f0:	6299      	str	r1, [r3, #40]	; 0x28
     3f2:	27c0      	movs	r7, #192	; 0xc0
     3f4:	063f      	lsls	r7, r7, #24
     3f6:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3f8:	6150      	str	r0, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3fa:	2540      	movs	r5, #64	; 0x40
     3fc:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3fe:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     400:	2401      	movs	r4, #1
     402:	4321      	orrs	r1, r4
     404:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     406:	5559      	strb	r1, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     408:	2630      	movs	r6, #48	; 0x30
     40a:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     40c:	3d31      	subs	r5, #49	; 0x31
     40e:	46a8      	mov	r8, r5
     410:	43a9      	bics	r1, r5
	tmp |= PORT_PMUX_PMUXE(data);
     412:	3d0c      	subs	r5, #12
     414:	4329      	orrs	r1, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     416:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     418:	2102      	movs	r1, #2
     41a:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     41c:	4d16      	ldr	r5, [pc, #88]	; (478 <SPI_0_PORT_init+0x9c>)
     41e:	629d      	str	r5, [r3, #40]	; 0x28
     420:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     422:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     424:	2741      	movs	r7, #65	; 0x41
     426:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     428:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42a:	4321      	orrs	r1, r4
     42c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     42e:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     430:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     432:	3f32      	subs	r7, #50	; 0x32
     434:	4039      	ands	r1, r7
	tmp |= PORT_PMUX_PMUXO(data);
     436:	3721      	adds	r7, #33	; 0x21
     438:	4339      	orrs	r1, r7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     43a:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     43c:	2180      	movs	r1, #128	; 0x80
     43e:	02c9      	lsls	r1, r1, #11
     440:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     442:	4a0e      	ldr	r2, [pc, #56]	; (47c <SPI_0_PORT_init+0xa0>)
     444:	629a      	str	r2, [r3, #40]	; 0x28
     446:	4a0e      	ldr	r2, [pc, #56]	; (480 <SPI_0_PORT_init+0xa4>)
     448:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     44a:	2152      	movs	r1, #82	; 0x52
     44c:	5c5a      	ldrb	r2, [r3, r1]
     44e:	3e2c      	subs	r6, #44	; 0x2c
     450:	43b2      	bics	r2, r6
     452:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     454:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     456:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     458:	4322      	orrs	r2, r4
     45a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     45c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     45e:	3919      	subs	r1, #25
     460:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     462:	4640      	mov	r0, r8
     464:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     466:	380d      	subs	r0, #13
     468:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46a:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
}
     46c:	bc04      	pop	{r2}
     46e:	4690      	mov	r8, r2
     470:	bdf0      	pop	{r4, r5, r6, r7, pc}
     472:	46c0      	nop			; (mov r8, r8)
     474:	40000001 	.word	0x40000001
     478:	40000002 	.word	0x40000002
     47c:	40020000 	.word	0x40020000
     480:	c0020004 	.word	0xc0020004

00000484 <SPI_0_CLOCK_init>:
     484:	4b06      	ldr	r3, [pc, #24]	; (4a0 <SPI_0_CLOCK_init+0x1c>)
     486:	2140      	movs	r1, #64	; 0x40
     488:	22d0      	movs	r2, #208	; 0xd0
     48a:	5099      	str	r1, [r3, r2]
     48c:	3103      	adds	r1, #3
     48e:	3a08      	subs	r2, #8
     490:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     492:	4a04      	ldr	r2, [pc, #16]	; (4a4 <SPI_0_CLOCK_init+0x20>)
     494:	69d3      	ldr	r3, [r2, #28]
     496:	393f      	subs	r1, #63	; 0x3f
     498:	430b      	orrs	r3, r1
     49a:	61d3      	str	r3, [r2, #28]
void SPI_0_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
}
     49c:	4770      	bx	lr
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	40001c00 	.word	0x40001c00
     4a4:	40000800 	.word	0x40000800

000004a8 <SPI_0_init>:

void SPI_0_init(void)
{
     4a8:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     4aa:	4b04      	ldr	r3, [pc, #16]	; (4bc <SPI_0_init+0x14>)
     4ac:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM1);
     4ae:	4904      	ldr	r1, [pc, #16]	; (4c0 <SPI_0_init+0x18>)
     4b0:	4804      	ldr	r0, [pc, #16]	; (4c4 <SPI_0_init+0x1c>)
     4b2:	4b05      	ldr	r3, [pc, #20]	; (4c8 <SPI_0_init+0x20>)
     4b4:	4798      	blx	r3
	SPI_0_PORT_init();
     4b6:	4b05      	ldr	r3, [pc, #20]	; (4cc <SPI_0_init+0x24>)
     4b8:	4798      	blx	r3
}
     4ba:	bd10      	pop	{r4, pc}
     4bc:	00000485 	.word	0x00000485
     4c0:	42000800 	.word	0x42000800
     4c4:	2000018c 	.word	0x2000018c
     4c8:	00000d15 	.word	0x00000d15
     4cc:	000003dd 	.word	0x000003dd

000004d0 <SPI_1_PORT_init>:

void SPI_1_PORT_init(void)
{
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4d2:	46c6      	mov	lr, r8
     4d4:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4d6:	22c0      	movs	r2, #192	; 0xc0
     4d8:	05d2      	lsls	r2, r2, #23
     4da:	2180      	movs	r1, #128	; 0x80
     4dc:	0149      	lsls	r1, r1, #5
     4de:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e0:	2382      	movs	r3, #130	; 0x82
     4e2:	05db      	lsls	r3, r3, #23
     4e4:	4821      	ldr	r0, [pc, #132]	; (56c <SPI_1_PORT_init+0x9c>)
     4e6:	6298      	str	r0, [r3, #40]	; 0x28
     4e8:	27c0      	movs	r7, #192	; 0xc0
     4ea:	063f      	lsls	r7, r7, #24
     4ec:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ee:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4f0:	254c      	movs	r5, #76	; 0x4c
     4f2:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4f4:	2401      	movs	r4, #1
     4f6:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4f8:	2001      	movs	r0, #1
     4fa:	4301      	orrs	r1, r0
     4fc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4fe:	5559      	strb	r1, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     500:	2636      	movs	r6, #54	; 0x36
     502:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     504:	3d3d      	subs	r5, #61	; 0x3d
     506:	46a8      	mov	r8, r5
     508:	43a9      	bics	r1, r5
	tmp |= PORT_PMUX_PMUXE(data);
     50a:	3d0d      	subs	r5, #13
     50c:	4329      	orrs	r1, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     50e:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     510:	2180      	movs	r1, #128	; 0x80
     512:	0189      	lsls	r1, r1, #6
     514:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     516:	4d16      	ldr	r5, [pc, #88]	; (570 <SPI_1_PORT_init+0xa0>)
     518:	629d      	str	r5, [r3, #40]	; 0x28
     51a:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     51c:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     51e:	274d      	movs	r7, #77	; 0x4d
     520:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     522:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     524:	4301      	orrs	r1, r0
     526:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     528:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     52a:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     52c:	3f3e      	subs	r7, #62	; 0x3e
     52e:	4039      	ands	r1, r7
	tmp |= PORT_PMUX_PMUXO(data);
     530:	3711      	adds	r7, #17
     532:	4339      	orrs	r1, r7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     534:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     536:	2180      	movs	r1, #128	; 0x80
     538:	00c9      	lsls	r1, r1, #3
     53a:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     53c:	4a0d      	ldr	r2, [pc, #52]	; (574 <SPI_1_PORT_init+0xa4>)
     53e:	629a      	str	r2, [r3, #40]	; 0x28
     540:	4a0d      	ldr	r2, [pc, #52]	; (578 <SPI_1_PORT_init+0xa8>)
     542:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     544:	214a      	movs	r1, #74	; 0x4a
     546:	5c5a      	ldrb	r2, [r3, r1]
     548:	3e32      	subs	r6, #50	; 0x32
     54a:	43b2      	bics	r2, r6
     54c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     550:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     552:	4302      	orrs	r2, r0
     554:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     556:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     558:	3915      	subs	r1, #21
     55a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     55c:	4640      	mov	r0, r8
     55e:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     560:	380c      	subs	r0, #12
     562:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     564:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA10, PINMUX_PA10D_SERCOM2_PAD2);
}
     566:	bc04      	pop	{r2}
     568:	4690      	mov	r8, r2
     56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     56c:	40001000 	.word	0x40001000
     570:	40002000 	.word	0x40002000
     574:	40020400 	.word	0x40020400
     578:	c0020000 	.word	0xc0020000

0000057c <SPI_1_CLOCK_init>:
     57c:	4b06      	ldr	r3, [pc, #24]	; (598 <SPI_1_CLOCK_init+0x1c>)
     57e:	2140      	movs	r1, #64	; 0x40
     580:	22d4      	movs	r2, #212	; 0xd4
     582:	5099      	str	r1, [r3, r2]
     584:	3103      	adds	r1, #3
     586:	3a0c      	subs	r2, #12
     588:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM2;
     58a:	4a04      	ldr	r2, [pc, #16]	; (59c <SPI_1_CLOCK_init+0x20>)
     58c:	69d3      	ldr	r3, [r2, #28]
     58e:	393b      	subs	r1, #59	; 0x3b
     590:	430b      	orrs	r3, r1
     592:	61d3      	str	r3, [r2, #28]
void SPI_1_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM2_bit(MCLK);
}
     594:	4770      	bx	lr
     596:	46c0      	nop			; (mov r8, r8)
     598:	40001c00 	.word	0x40001c00
     59c:	40000800 	.word	0x40000800

000005a0 <SPI_1_init>:

void SPI_1_init(void)
{
     5a0:	b510      	push	{r4, lr}
	SPI_1_CLOCK_init();
     5a2:	4b04      	ldr	r3, [pc, #16]	; (5b4 <SPI_1_init+0x14>)
     5a4:	4798      	blx	r3
	spi_m_sync_init(&SPI_1, SERCOM2);
     5a6:	4904      	ldr	r1, [pc, #16]	; (5b8 <SPI_1_init+0x18>)
     5a8:	4804      	ldr	r0, [pc, #16]	; (5bc <SPI_1_init+0x1c>)
     5aa:	4b05      	ldr	r3, [pc, #20]	; (5c0 <SPI_1_init+0x20>)
     5ac:	4798      	blx	r3
	SPI_1_PORT_init();
     5ae:	4b05      	ldr	r3, [pc, #20]	; (5c4 <SPI_1_init+0x24>)
     5b0:	4798      	blx	r3
}
     5b2:	bd10      	pop	{r4, pc}
     5b4:	0000057d 	.word	0x0000057d
     5b8:	42000c00 	.word	0x42000c00
     5bc:	20000120 	.word	0x20000120
     5c0:	00000d15 	.word	0x00000d15
     5c4:	000004d1 	.word	0x000004d1

000005c8 <I2C_1_PORT_init>:

void I2C_1_PORT_init(void)
{
     5c8:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5ca:	2382      	movs	r3, #130	; 0x82
     5cc:	05db      	lsls	r3, r3, #23
     5ce:	2050      	movs	r0, #80	; 0x50
     5d0:	5c19      	ldrb	r1, [r3, r0]
     5d2:	2204      	movs	r2, #4
     5d4:	4391      	bics	r1, r2
     5d6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5d8:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5da:	2501      	movs	r5, #1
     5dc:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5de:	2401      	movs	r4, #1
     5e0:	4321      	orrs	r1, r4
     5e2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5e4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5e6:	3818      	subs	r0, #24
     5e8:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5ea:	260f      	movs	r6, #15
     5ec:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     5ee:	3e0c      	subs	r6, #12
     5f0:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5f2:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5f4:	2151      	movs	r1, #81	; 0x51
     5f6:	5c5e      	ldrb	r6, [r3, r1]
     5f8:	4396      	bics	r6, r2
     5fa:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5fc:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5fe:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     600:	4322      	orrs	r2, r4
     602:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     604:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     606:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     608:	3942      	subs	r1, #66	; 0x42
     60a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     60c:	3121      	adds	r1, #33	; 0x21
     60e:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     610:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD1);
}
     612:	bd70      	pop	{r4, r5, r6, pc}

00000614 <I2C_1_CLOCK_init>:
     614:	4b06      	ldr	r3, [pc, #24]	; (630 <I2C_1_CLOCK_init+0x1c>)
     616:	2140      	movs	r1, #64	; 0x40
     618:	22d8      	movs	r2, #216	; 0xd8
     61a:	5099      	str	r1, [r3, r2]
     61c:	3103      	adds	r1, #3
     61e:	3a10      	subs	r2, #16
     620:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
     622:	4a04      	ldr	r2, [pc, #16]	; (634 <I2C_1_CLOCK_init+0x20>)
     624:	69d3      	ldr	r3, [r2, #28]
     626:	3933      	subs	r1, #51	; 0x33
     628:	430b      	orrs	r3, r1
     62a:	61d3      	str	r3, [r2, #28]
void I2C_1_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM3_bit(MCLK);
}
     62c:	4770      	bx	lr
     62e:	46c0      	nop			; (mov r8, r8)
     630:	40001c00 	.word	0x40001c00
     634:	40000800 	.word	0x40000800

00000638 <I2C_1_init>:

void I2C_1_init(void)
{
     638:	b510      	push	{r4, lr}
	I2C_1_CLOCK_init();
     63a:	4b04      	ldr	r3, [pc, #16]	; (64c <I2C_1_init+0x14>)
     63c:	4798      	blx	r3
	i2c_m_sync_init(&I2C_1, SERCOM3);
     63e:	4904      	ldr	r1, [pc, #16]	; (650 <I2C_1_init+0x18>)
     640:	4804      	ldr	r0, [pc, #16]	; (654 <I2C_1_init+0x1c>)
     642:	4b05      	ldr	r3, [pc, #20]	; (658 <I2C_1_init+0x20>)
     644:	4798      	blx	r3
	I2C_1_PORT_init();
     646:	4b05      	ldr	r3, [pc, #20]	; (65c <I2C_1_init+0x24>)
     648:	4798      	blx	r3
}
     64a:	bd10      	pop	{r4, pc}
     64c:	00000615 	.word	0x00000615
     650:	42001000 	.word	0x42001000
     654:	2000013c 	.word	0x2000013c
     658:	00000c75 	.word	0x00000c75
     65c:	000005c9 	.word	0x000005c9

00000660 <delay_driver_init>:

void delay_driver_init(void)
{
     660:	b510      	push	{r4, lr}
	delay_init(SysTick);
     662:	4802      	ldr	r0, [pc, #8]	; (66c <delay_driver_init+0xc>)
     664:	4b02      	ldr	r3, [pc, #8]	; (670 <delay_driver_init+0x10>)
     666:	4798      	blx	r3
}
     668:	bd10      	pop	{r4, pc}
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	e000e010 	.word	0xe000e010
     670:	00000ac9 	.word	0x00000ac9

00000674 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
     674:	4a05      	ldr	r2, [pc, #20]	; (68c <PWM_0_CLOCK_init+0x18>)
     676:	69d1      	ldr	r1, [r2, #28]
     678:	2380      	movs	r3, #128	; 0x80
     67a:	015b      	lsls	r3, r3, #5
     67c:	430b      	orrs	r3, r1
     67e:	61d3      	str	r3, [r2, #28]
     680:	2140      	movs	r1, #64	; 0x40
     682:	23f8      	movs	r3, #248	; 0xf8
     684:	4a02      	ldr	r2, [pc, #8]	; (690 <PWM_0_CLOCK_init+0x1c>)
     686:	50d1      	str	r1, [r2, r3]

void PWM_0_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     688:	4770      	bx	lr
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	40000800 	.word	0x40000800
     690:	40001c00 	.word	0x40001c00

00000694 <PWM_0_init>:

void PWM_0_init(void)
{
     694:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     696:	4b05      	ldr	r3, [pc, #20]	; (6ac <PWM_0_init+0x18>)
     698:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     69a:	4b05      	ldr	r3, [pc, #20]	; (6b0 <PWM_0_init+0x1c>)
     69c:	4798      	blx	r3
     69e:	0002      	movs	r2, r0
     6a0:	4904      	ldr	r1, [pc, #16]	; (6b4 <PWM_0_init+0x20>)
     6a2:	4805      	ldr	r0, [pc, #20]	; (6b8 <PWM_0_init+0x24>)
     6a4:	4b05      	ldr	r3, [pc, #20]	; (6bc <PWM_0_init+0x28>)
     6a6:	4798      	blx	r3
}
     6a8:	bd10      	pop	{r4, pc}
     6aa:	46c0      	nop			; (mov r8, r8)
     6ac:	00000675 	.word	0x00000675
     6b0:	00002065 	.word	0x00002065
     6b4:	42003000 	.word	0x42003000
     6b8:	200000e8 	.word	0x200000e8
     6bc:	00000ccd 	.word	0x00000ccd

000006c0 <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC1;
     6c0:	4a05      	ldr	r2, [pc, #20]	; (6d8 <PWM_1_CLOCK_init+0x18>)
     6c2:	69d1      	ldr	r1, [r2, #28]
     6c4:	2380      	movs	r3, #128	; 0x80
     6c6:	019b      	lsls	r3, r3, #6
     6c8:	430b      	orrs	r3, r1
     6ca:	61d3      	str	r3, [r2, #28]
     6cc:	2140      	movs	r1, #64	; 0x40
     6ce:	23f8      	movs	r3, #248	; 0xf8
     6d0:	4a02      	ldr	r2, [pc, #8]	; (6dc <PWM_1_CLOCK_init+0x1c>)
     6d2:	50d1      	str	r1, [r2, r3]

void PWM_1_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     6d4:	4770      	bx	lr
     6d6:	46c0      	nop			; (mov r8, r8)
     6d8:	40000800 	.word	0x40000800
     6dc:	40001c00 	.word	0x40001c00

000006e0 <PWM_1_init>:

void PWM_1_init(void)
{
     6e0:	b510      	push	{r4, lr}
	PWM_1_CLOCK_init();
     6e2:	4b05      	ldr	r3, [pc, #20]	; (6f8 <PWM_1_init+0x18>)
     6e4:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
     6e6:	4b05      	ldr	r3, [pc, #20]	; (6fc <PWM_1_init+0x1c>)
     6e8:	4798      	blx	r3
     6ea:	0002      	movs	r2, r0
     6ec:	4904      	ldr	r1, [pc, #16]	; (700 <PWM_1_init+0x20>)
     6ee:	4805      	ldr	r0, [pc, #20]	; (704 <PWM_1_init+0x24>)
     6f0:	4b05      	ldr	r3, [pc, #20]	; (708 <PWM_1_init+0x28>)
     6f2:	4798      	blx	r3
}
     6f4:	bd10      	pop	{r4, pc}
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	000006c1 	.word	0x000006c1
     6fc:	00002065 	.word	0x00002065
     700:	42003400 	.word	0x42003400
     704:	200001a0 	.word	0x200001a0
     708:	00000ccd 	.word	0x00000ccd

0000070c <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     70c:	4a03      	ldr	r2, [pc, #12]	; (71c <WDT_0_CLOCK_init+0x10>)
     70e:	6951      	ldr	r1, [r2, #20]
     710:	2380      	movs	r3, #128	; 0x80
     712:	005b      	lsls	r3, r3, #1
     714:	430b      	orrs	r3, r1
     716:	6153      	str	r3, [r2, #20]

void WDT_0_CLOCK_init(void)
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}
     718:	4770      	bx	lr
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	40000800 	.word	0x40000800

00000720 <WDT_0_init>:

void WDT_0_init(void)
{
     720:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
     722:	4b06      	ldr	r3, [pc, #24]	; (73c <WDT_0_init+0x1c>)
     724:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     726:	2252      	movs	r2, #82	; 0x52
     728:	4905      	ldr	r1, [pc, #20]	; (740 <WDT_0_init+0x20>)
     72a:	2001      	movs	r0, #1
     72c:	4b05      	ldr	r3, [pc, #20]	; (744 <WDT_0_init+0x24>)
     72e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     730:	4805      	ldr	r0, [pc, #20]	; (748 <WDT_0_init+0x28>)
     732:	4b06      	ldr	r3, [pc, #24]	; (74c <WDT_0_init+0x2c>)
     734:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     736:	4b06      	ldr	r3, [pc, #24]	; (750 <WDT_0_init+0x30>)
     738:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
}
     73a:	bd10      	pop	{r4, pc}
     73c:	0000070d 	.word	0x0000070d
     740:	00002448 	.word	0x00002448
     744:	00000e29 	.word	0x00000e29
     748:	20000160 	.word	0x20000160
     74c:	40002000 	.word	0x40002000
     750:	00002091 	.word	0x00002091

00000754 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
     754:	b510      	push	{r4, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN0;
     756:	4a07      	ldr	r2, [pc, #28]	; (774 <CAN_0_init+0x20>)
     758:	6911      	ldr	r1, [r2, #16]
     75a:	2380      	movs	r3, #128	; 0x80
     75c:	005b      	lsls	r3, r3, #1
     75e:	430b      	orrs	r3, r1
     760:	6113      	str	r3, [r2, #16]
     762:	2140      	movs	r1, #64	; 0x40
     764:	23e8      	movs	r3, #232	; 0xe8
     766:	4a04      	ldr	r2, [pc, #16]	; (778 <CAN_0_init+0x24>)
     768:	50d1      	str	r1, [r2, r3]
	hri_mclk_set_AHBMASK_CAN0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN0_GCLK_ID, CONF_GCLK_CAN0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_0, CAN0);
     76a:	4904      	ldr	r1, [pc, #16]	; (77c <CAN_0_init+0x28>)
     76c:	4804      	ldr	r0, [pc, #16]	; (780 <CAN_0_init+0x2c>)
     76e:	4b05      	ldr	r3, [pc, #20]	; (784 <CAN_0_init+0x30>)
     770:	4798      	blx	r3
	CAN_0_PORT_init();
}
     772:	bd10      	pop	{r4, pc}
     774:	40000800 	.word	0x40000800
     778:	40001c00 	.word	0x40001c00
     77c:	42001c00 	.word	0x42001c00
     780:	200000b4 	.word	0x200000b4
     784:	00000a05 	.word	0x00000a05

00000788 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_DAC;
     788:	4a05      	ldr	r2, [pc, #20]	; (7a0 <DAC_0_CLOCK_init+0x18>)
     78a:	69d1      	ldr	r1, [r2, #28]
     78c:	2380      	movs	r3, #128	; 0x80
     78e:	039b      	lsls	r3, r3, #14
     790:	430b      	orrs	r3, r1
     792:	61d3      	str	r3, [r2, #28]
     794:	2140      	movs	r1, #64	; 0x40
     796:	2388      	movs	r3, #136	; 0x88
     798:	005b      	lsls	r3, r3, #1
     79a:	4a02      	ldr	r2, [pc, #8]	; (7a4 <DAC_0_CLOCK_init+0x1c>)
     79c:	50d1      	str	r1, [r2, r3]
void DAC_0_CLOCK_init(void)
{

	hri_mclk_set_APBCMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     79e:	4770      	bx	lr
     7a0:	40000800 	.word	0x40000800
     7a4:	40001c00 	.word	0x40001c00

000007a8 <DAC_0_init>:

void DAC_0_init(void)
{
     7a8:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     7aa:	4b03      	ldr	r3, [pc, #12]	; (7b8 <DAC_0_init+0x10>)
     7ac:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     7ae:	4903      	ldr	r1, [pc, #12]	; (7bc <DAC_0_init+0x14>)
     7b0:	4803      	ldr	r0, [pc, #12]	; (7c0 <DAC_0_init+0x18>)
     7b2:	4b04      	ldr	r3, [pc, #16]	; (7c4 <DAC_0_init+0x1c>)
     7b4:	4798      	blx	r3
	DAC_0_PORT_init();
}
     7b6:	bd10      	pop	{r4, pc}
     7b8:	00000789 	.word	0x00000789
     7bc:	42005400 	.word	0x42005400
     7c0:	20000180 	.word	0x20000180
     7c4:	00000a89 	.word	0x00000a89

000007c8 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     7c8:	b510      	push	{r4, lr}
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_EVSYS;
     7ca:	4a04      	ldr	r2, [pc, #16]	; (7dc <EVENT_SYSTEM_0_init+0x14>)
     7cc:	69d3      	ldr	r3, [r2, #28]
     7ce:	2101      	movs	r1, #1
     7d0:	430b      	orrs	r3, r1
     7d2:	61d3      	str	r3, [r2, #28]

	hri_mclk_set_APBCMASK_EVSYS_bit(MCLK);
	event_system_init();
     7d4:	4b02      	ldr	r3, [pc, #8]	; (7e0 <EVENT_SYSTEM_0_init+0x18>)
     7d6:	4798      	blx	r3
}
     7d8:	bd10      	pop	{r4, pc}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	40000800 	.word	0x40000800
     7e0:	00000afd 	.word	0x00000afd

000007e4 <FREQUENCY_METER_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_FREQM;
     7e4:	4a06      	ldr	r2, [pc, #24]	; (800 <FREQUENCY_METER_0_CLOCK_init+0x1c>)
     7e6:	6951      	ldr	r1, [r2, #20]
     7e8:	2380      	movs	r3, #128	; 0x80
     7ea:	011b      	lsls	r3, r3, #4
     7ec:	430b      	orrs	r3, r1
     7ee:	6153      	str	r3, [r2, #20]
     7f0:	4b04      	ldr	r3, [pc, #16]	; (804 <FREQUENCY_METER_0_CLOCK_init+0x20>)
     7f2:	2143      	movs	r1, #67	; 0x43
     7f4:	2290      	movs	r2, #144	; 0x90
     7f6:	5099      	str	r1, [r3, r2]
     7f8:	3903      	subs	r1, #3
     7fa:	3a04      	subs	r2, #4
     7fc:	5099      	str	r1, [r3, r2]
#define FREQM_GCLK_ID_REF 6
#endif

	hri_gclk_write_PCHCTRL_reg(GCLK, FREQM_GCLK_ID_REF, CONF_GCLK_FREQM_REF_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, FREQM_GCLK_ID_MSR, CONF_GCLK_FREQM_MSR_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     7fe:	4770      	bx	lr
     800:	40000800 	.word	0x40000800
     804:	40001c00 	.word	0x40001c00

00000808 <FREQUENCY_METER_0_init>:

void FREQUENCY_METER_0_init(void)
{
     808:	b510      	push	{r4, lr}
	FREQUENCY_METER_0_CLOCK_init();
     80a:	4b03      	ldr	r3, [pc, #12]	; (818 <FREQUENCY_METER_0_init+0x10>)
     80c:	4798      	blx	r3
	freqmeter_sync_init(&FREQUENCY_METER_0, FREQM);
     80e:	4903      	ldr	r1, [pc, #12]	; (81c <FREQUENCY_METER_0_init+0x14>)
     810:	4803      	ldr	r0, [pc, #12]	; (820 <FREQUENCY_METER_0_init+0x18>)
     812:	4b04      	ldr	r3, [pc, #16]	; (824 <FREQUENCY_METER_0_init+0x1c>)
     814:	4798      	blx	r3
}
     816:	bd10      	pop	{r4, pc}
     818:	000007e5 	.word	0x000007e5
     81c:	40002c00 	.word	0x40002c00
     820:	200000dc 	.word	0x200000dc
     824:	00000bc5 	.word	0x00000bc5

00000828 <system_init>:
{
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
}

void system_init(void)
{
     828:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     82a:	4b28      	ldr	r3, [pc, #160]	; (8cc <system_init+0xa4>)
     82c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     82e:	22c0      	movs	r2, #192	; 0xc0
     830:	05d2      	lsls	r2, r2, #23
     832:	2180      	movs	r1, #128	; 0x80
     834:	0209      	lsls	r1, r1, #8
     836:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     838:	2382      	movs	r3, #130	; 0x82
     83a:	05db      	lsls	r3, r3, #23
     83c:	4824      	ldr	r0, [pc, #144]	; (8d0 <system_init+0xa8>)
     83e:	6298      	str	r0, [r3, #40]	; 0x28
     840:	20c0      	movs	r0, #192	; 0xc0
     842:	0600      	lsls	r0, r0, #24
     844:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     846:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     848:	204f      	movs	r0, #79	; 0x4f
     84a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     84c:	2501      	movs	r5, #1
     84e:	43a9      	bics	r1, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     850:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     852:	2080      	movs	r0, #128	; 0x80
     854:	0540      	lsls	r0, r0, #21
     856:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     858:	491e      	ldr	r1, [pc, #120]	; (8d4 <system_init+0xac>)
     85a:	6299      	str	r1, [r3, #40]	; 0x28
     85c:	491e      	ldr	r1, [pc, #120]	; (8d8 <system_init+0xb0>)
     85e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     860:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     862:	215c      	movs	r1, #92	; 0x5c
     864:	5c5c      	ldrb	r4, [r3, r1]
     866:	2604      	movs	r6, #4
     868:	4334      	orrs	r4, r6
     86a:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     86c:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     870:	43aa      	bics	r2, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     872:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);

	AC_0_init();
     874:	4b19      	ldr	r3, [pc, #100]	; (8dc <system_init+0xb4>)
     876:	4798      	blx	r3

	ADC_0_init();
     878:	4b19      	ldr	r3, [pc, #100]	; (8e0 <system_init+0xb8>)
     87a:	4798      	blx	r3

	CRC_0_init();
     87c:	4b19      	ldr	r3, [pc, #100]	; (8e4 <system_init+0xbc>)
     87e:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     880:	4b19      	ldr	r3, [pc, #100]	; (8e8 <system_init+0xc0>)
     882:	4798      	blx	r3

	FLASH_0_init();
     884:	4b19      	ldr	r3, [pc, #100]	; (8ec <system_init+0xc4>)
     886:	4798      	blx	r3

	CALENDAR_0_init();
     888:	4b19      	ldr	r3, [pc, #100]	; (8f0 <system_init+0xc8>)
     88a:	4798      	blx	r3

	I2C_0_init();
     88c:	4b19      	ldr	r3, [pc, #100]	; (8f4 <system_init+0xcc>)
     88e:	4798      	blx	r3

	SPI_0_init();
     890:	4b19      	ldr	r3, [pc, #100]	; (8f8 <system_init+0xd0>)
     892:	4798      	blx	r3

	SPI_1_init();
     894:	4b19      	ldr	r3, [pc, #100]	; (8fc <system_init+0xd4>)
     896:	4798      	blx	r3

	I2C_1_init();
     898:	4b19      	ldr	r3, [pc, #100]	; (900 <system_init+0xd8>)
     89a:	4798      	blx	r3

	delay_driver_init();
     89c:	4b19      	ldr	r3, [pc, #100]	; (904 <system_init+0xdc>)
     89e:	4798      	blx	r3

	PWM_0_init();
     8a0:	4b19      	ldr	r3, [pc, #100]	; (908 <system_init+0xe0>)
     8a2:	4798      	blx	r3

	PWM_1_init();
     8a4:	4b19      	ldr	r3, [pc, #100]	; (90c <system_init+0xe4>)
     8a6:	4798      	blx	r3

	WDT_0_init();
     8a8:	4b19      	ldr	r3, [pc, #100]	; (910 <system_init+0xe8>)
     8aa:	4798      	blx	r3
	CAN_0_init();
     8ac:	4b19      	ldr	r3, [pc, #100]	; (914 <system_init+0xec>)
     8ae:	4798      	blx	r3

	DAC_0_init();
     8b0:	4b19      	ldr	r3, [pc, #100]	; (918 <system_init+0xf0>)
     8b2:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     8b4:	4b19      	ldr	r3, [pc, #100]	; (91c <system_init+0xf4>)
     8b6:	4798      	blx	r3

	FREQUENCY_METER_0_init();
     8b8:	4b19      	ldr	r3, [pc, #100]	; (920 <system_init+0xf8>)
     8ba:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     8bc:	4a19      	ldr	r2, [pc, #100]	; (924 <system_init+0xfc>)
     8be:	6951      	ldr	r1, [r2, #20]
     8c0:	2380      	movs	r3, #128	; 0x80
     8c2:	009b      	lsls	r3, r3, #2
     8c4:	430b      	orrs	r3, r1
     8c6:	6153      	str	r3, [r2, #20]

	PTC_0_clock_init();
}
     8c8:	bd70      	pop	{r4, r5, r6, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	00001145 	.word	0x00001145
     8d0:	40008000 	.word	0x40008000
     8d4:	40020000 	.word	0x40020000
     8d8:	c0021000 	.word	0xc0021000
     8dc:	00000225 	.word	0x00000225
     8e0:	00000265 	.word	0x00000265
     8e4:	00000291 	.word	0x00000291
     8e8:	000002b9 	.word	0x000002b9
     8ec:	000002f1 	.word	0x000002f1
     8f0:	00000325 	.word	0x00000325
     8f4:	000003b5 	.word	0x000003b5
     8f8:	000004a9 	.word	0x000004a9
     8fc:	000005a1 	.word	0x000005a1
     900:	00000639 	.word	0x00000639
     904:	00000661 	.word	0x00000661
     908:	00000695 	.word	0x00000695
     90c:	000006e1 	.word	0x000006e1
     910:	00000721 	.word	0x00000721
     914:	00000755 	.word	0x00000755
     918:	000007a9 	.word	0x000007a9
     91c:	000007c9 	.word	0x000007c9
     920:	00000809 	.word	0x00000809
     924:	40000800 	.word	0x40000800

00000928 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
     928:	b570      	push	{r4, r5, r6, lr}
     92a:	0004      	movs	r4, r0
     92c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     92e:	2800      	cmp	r0, #0
     930:	d00c      	beq.n	94c <ac_sync_init+0x24>
     932:	0008      	movs	r0, r1
     934:	1e43      	subs	r3, r0, #1
     936:	4198      	sbcs	r0, r3
     938:	b2c0      	uxtb	r0, r0
     93a:	223b      	movs	r2, #59	; 0x3b
     93c:	4904      	ldr	r1, [pc, #16]	; (950 <ac_sync_init+0x28>)
     93e:	4b05      	ldr	r3, [pc, #20]	; (954 <ac_sync_init+0x2c>)
     940:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
     942:	0029      	movs	r1, r5
     944:	0020      	movs	r0, r4
     946:	4b04      	ldr	r3, [pc, #16]	; (958 <ac_sync_init+0x30>)
     948:	4798      	blx	r3
}
     94a:	bd70      	pop	{r4, r5, r6, pc}
     94c:	2000      	movs	r0, #0
     94e:	e7f4      	b.n	93a <ac_sync_init+0x12>
     950:	00002464 	.word	0x00002464
     954:	00000e29 	.word	0x00000e29
     958:	00000ea5 	.word	0x00000ea5

0000095c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     95c:	b570      	push	{r4, r5, r6, lr}
     95e:	0004      	movs	r4, r0
     960:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     962:	2800      	cmp	r0, #0
     964:	d00c      	beq.n	980 <adc_sync_init+0x24>
     966:	0008      	movs	r0, r1
     968:	1e43      	subs	r3, r0, #1
     96a:	4198      	sbcs	r0, r3
     96c:	b2c0      	uxtb	r0, r0
     96e:	2243      	movs	r2, #67	; 0x43
     970:	4904      	ldr	r1, [pc, #16]	; (984 <adc_sync_init+0x28>)
     972:	4b05      	ldr	r3, [pc, #20]	; (988 <adc_sync_init+0x2c>)
     974:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     976:	0029      	movs	r1, r5
     978:	0020      	movs	r0, r4
     97a:	4b04      	ldr	r3, [pc, #16]	; (98c <adc_sync_init+0x30>)
     97c:	4798      	blx	r3
}
     97e:	bd70      	pop	{r4, r5, r6, pc}
     980:	2000      	movs	r0, #0
     982:	e7f4      	b.n	96e <adc_sync_init+0x12>
     984:	00002480 	.word	0x00002480
     988:	00000e29 	.word	0x00000e29
     98c:	00000f85 	.word	0x00000f85

00000990 <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     990:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     994:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     996:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     998:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     99c:	4770      	bx	lr

0000099e <atomic_leave_critical>:
     99e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     9a2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     9a4:	f383 8810 	msr	PRIMASK, r3
}
     9a8:	4770      	bx	lr
	...

000009ac <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     9ac:	b570      	push	{r4, r5, r6, lr}
     9ae:	0004      	movs	r4, r0
     9b0:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     9b2:	1e43      	subs	r3, r0, #1
     9b4:	4198      	sbcs	r0, r3
     9b6:	b2c0      	uxtb	r0, r0
     9b8:	22e5      	movs	r2, #229	; 0xe5
     9ba:	0052      	lsls	r2, r2, #1
     9bc:	4904      	ldr	r1, [pc, #16]	; (9d0 <calendar_init+0x24>)
     9be:	4b05      	ldr	r3, [pc, #20]	; (9d4 <calendar_init+0x28>)
     9c0:	4798      	blx	r3

	calendar->device.hw = (void *)hw;
     9c2:	6025      	str	r5, [r4, #0]
	calendar->base_year = DEFAULT_BASE_YEAR;
     9c4:	4b04      	ldr	r3, [pc, #16]	; (9d8 <calendar_init+0x2c>)
     9c6:	6163      	str	r3, [r4, #20]

	ret = _calendar_init(&calendar->device);
     9c8:	0020      	movs	r0, r4
     9ca:	4b04      	ldr	r3, [pc, #16]	; (9dc <calendar_init+0x30>)
     9cc:	4798      	blx	r3

	return ret;
}
     9ce:	bd70      	pop	{r4, r5, r6, pc}
     9d0:	0000249c 	.word	0x0000249c
     9d4:	00000e29 	.word	0x00000e29
     9d8:	000007b2 	.word	0x000007b2
     9dc:	00001571 	.word	0x00001571

000009e0 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     9e0:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     9e2:	69c3      	ldr	r3, [r0, #28]
     9e4:	2b00      	cmp	r3, #0
     9e6:	d000      	beq.n	9ea <can_tx_done+0xa>
		descr->cb.tx_done(descr);
     9e8:	4798      	blx	r3
	}
}
     9ea:	bd10      	pop	{r4, pc}

000009ec <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     9ec:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     9ee:	6a03      	ldr	r3, [r0, #32]
     9f0:	2b00      	cmp	r3, #0
     9f2:	d000      	beq.n	9f6 <can_rx_done+0xa>
		descr->cb.rx_done(descr);
     9f4:	4798      	blx	r3
	}
}
     9f6:	bd10      	pop	{r4, pc}

000009f8 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     9f8:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     9fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
     9fc:	2b00      	cmp	r3, #0
     9fe:	d000      	beq.n	a02 <can_irq_handler+0xa>
		descr->cb.irq_handler(descr, type);
     a00:	4798      	blx	r3
	}
}
     a02:	bd10      	pop	{r4, pc}

00000a04 <can_async_init>:
{
     a04:	b570      	push	{r4, r5, r6, lr}
     a06:	0005      	movs	r5, r0
     a08:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     a0a:	2800      	cmp	r0, #0
     a0c:	d014      	beq.n	a38 <can_async_init+0x34>
     a0e:	0008      	movs	r0, r1
     a10:	1e43      	subs	r3, r0, #1
     a12:	4198      	sbcs	r0, r3
     a14:	b2c0      	uxtb	r0, r0
     a16:	224b      	movs	r2, #75	; 0x4b
     a18:	4908      	ldr	r1, [pc, #32]	; (a3c <can_async_init+0x38>)
     a1a:	4b09      	ldr	r3, [pc, #36]	; (a40 <can_async_init+0x3c>)
     a1c:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     a1e:	0021      	movs	r1, r4
     a20:	0028      	movs	r0, r5
     a22:	4b08      	ldr	r3, [pc, #32]	; (a44 <can_async_init+0x40>)
     a24:	4798      	blx	r3
	if (rc) {
     a26:	2800      	cmp	r0, #0
     a28:	d105      	bne.n	a36 <can_async_init+0x32>
	descr->dev.cb.tx_done     = can_tx_done;
     a2a:	4b07      	ldr	r3, [pc, #28]	; (a48 <can_async_init+0x44>)
     a2c:	606b      	str	r3, [r5, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     a2e:	4b07      	ldr	r3, [pc, #28]	; (a4c <can_async_init+0x48>)
     a30:	60ab      	str	r3, [r5, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     a32:	4b07      	ldr	r3, [pc, #28]	; (a50 <can_async_init+0x4c>)
     a34:	60eb      	str	r3, [r5, #12]
}
     a36:	bd70      	pop	{r4, r5, r6, pc}
     a38:	2000      	movs	r0, #0
     a3a:	e7ec      	b.n	a16 <can_async_init+0x12>
     a3c:	000024b8 	.word	0x000024b8
     a40:	00000e29 	.word	0x00000e29
     a44:	00000fc1 	.word	0x00000fc1
     a48:	000009e1 	.word	0x000009e1
     a4c:	000009ed 	.word	0x000009ed
     a50:	000009f9 	.word	0x000009f9

00000a54 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
     a54:	b570      	push	{r4, r5, r6, lr}
     a56:	0004      	movs	r4, r0
     a58:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     a5a:	2800      	cmp	r0, #0
     a5c:	d00c      	beq.n	a78 <crc_sync_init+0x24>
     a5e:	0008      	movs	r0, r1
     a60:	1e43      	subs	r3, r0, #1
     a62:	4198      	sbcs	r0, r3
     a64:	b2c0      	uxtb	r0, r0
     a66:	2235      	movs	r2, #53	; 0x35
     a68:	4904      	ldr	r1, [pc, #16]	; (a7c <crc_sync_init+0x28>)
     a6a:	4b05      	ldr	r3, [pc, #20]	; (a80 <crc_sync_init+0x2c>)
     a6c:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
     a6e:	0029      	movs	r1, r5
     a70:	0020      	movs	r0, r4
     a72:	4b04      	ldr	r3, [pc, #16]	; (a84 <crc_sync_init+0x30>)
     a74:	4798      	blx	r3
}
     a76:	bd70      	pop	{r4, r5, r6, pc}
     a78:	2000      	movs	r0, #0
     a7a:	e7f4      	b.n	a66 <crc_sync_init+0x12>
     a7c:	000024d4 	.word	0x000024d4
     a80:	00000e29 	.word	0x00000e29
     a84:	00001203 	.word	0x00001203

00000a88 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     a88:	b570      	push	{r4, r5, r6, lr}
     a8a:	0005      	movs	r5, r0
     a8c:	000c      	movs	r4, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     a8e:	2800      	cmp	r0, #0
     a90:	d011      	beq.n	ab6 <dac_sync_init+0x2e>
     a92:	0008      	movs	r0, r1
     a94:	1e43      	subs	r3, r0, #1
     a96:	4198      	sbcs	r0, r3
     a98:	b2c0      	uxtb	r0, r0
     a9a:	223c      	movs	r2, #60	; 0x3c
     a9c:	4907      	ldr	r1, [pc, #28]	; (abc <dac_sync_init+0x34>)
     a9e:	4b08      	ldr	r3, [pc, #32]	; (ac0 <dac_sync_init+0x38>)
     aa0:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     aa2:	0021      	movs	r1, r4
     aa4:	0028      	movs	r0, r5
     aa6:	4b07      	ldr	r3, [pc, #28]	; (ac4 <dac_sync_init+0x3c>)
     aa8:	4798      	blx	r3
	if (rc) {
     aaa:	2800      	cmp	r0, #0
     aac:	d102      	bne.n	ab4 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     aae:	2300      	movs	r3, #0
     ab0:	606b      	str	r3, [r5, #4]
		descr->sel_ch[i].length = 0;
     ab2:	60ab      	str	r3, [r5, #8]
	}

	return ERR_NONE;
}
     ab4:	bd70      	pop	{r4, r5, r6, pc}
     ab6:	2000      	movs	r0, #0
     ab8:	e7ef      	b.n	a9a <dac_sync_init+0x12>
     aba:	46c0      	nop			; (mov r8, r8)
     abc:	000024f0 	.word	0x000024f0
     ac0:	00000e29 	.word	0x00000e29
     ac4:	000011c9 	.word	0x000011c9

00000ac8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     ac8:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     aca:	4b02      	ldr	r3, [pc, #8]	; (ad4 <delay_init+0xc>)
     acc:	6018      	str	r0, [r3, #0]
     ace:	4b02      	ldr	r3, [pc, #8]	; (ad8 <delay_init+0x10>)
     ad0:	4798      	blx	r3
}
     ad2:	bd10      	pop	{r4, pc}
     ad4:	20000068 	.word	0x20000068
     ad8:	00001e5d 	.word	0x00001e5d

00000adc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     adc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     ade:	4b04      	ldr	r3, [pc, #16]	; (af0 <delay_ms+0x14>)
     ae0:	681c      	ldr	r4, [r3, #0]
     ae2:	4b04      	ldr	r3, [pc, #16]	; (af4 <delay_ms+0x18>)
     ae4:	4798      	blx	r3
     ae6:	0001      	movs	r1, r0
     ae8:	0020      	movs	r0, r4
     aea:	4b03      	ldr	r3, [pc, #12]	; (af8 <delay_ms+0x1c>)
     aec:	4798      	blx	r3
}
     aee:	bd10      	pop	{r4, pc}
     af0:	20000068 	.word	0x20000068
     af4:	0000113d 	.word	0x0000113d
     af8:	00001e71 	.word	0x00001e71

00000afc <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     afc:	b510      	push	{r4, lr}
	return _event_system_init();
     afe:	4b01      	ldr	r3, [pc, #4]	; (b04 <event_system_init+0x8>)
     b00:	4798      	blx	r3
}
     b02:	bd10      	pop	{r4, pc}
     b04:	00001369 	.word	0x00001369

00000b08 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     b08:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     b0a:	4b0c      	ldr	r3, [pc, #48]	; (b3c <process_ext_irq+0x34>)
     b0c:	685c      	ldr	r4, [r3, #4]
     b0e:	42a0      	cmp	r0, r4
     b10:	d00e      	beq.n	b30 <process_ext_irq+0x28>
     b12:	2201      	movs	r2, #1
     b14:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     b16:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     b18:	25ff      	movs	r5, #255	; 0xff
     b1a:	e003      	b.n	b24 <process_ext_irq+0x1c>
     b1c:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     b1e:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     b20:	085b      	lsrs	r3, r3, #1
     b22:	d10a      	bne.n	b3a <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     b24:	42a0      	cmp	r0, r4
     b26:	d9f9      	bls.n	b1c <process_ext_irq+0x14>
	while (upper >= lower) {
     b28:	2a00      	cmp	r2, #0
     b2a:	d006      	beq.n	b3a <process_ext_irq+0x32>
			lower = middle + 1;
     b2c:	0031      	movs	r1, r6
     b2e:	e7f6      	b.n	b1e <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     b30:	4b02      	ldr	r3, [pc, #8]	; (b3c <process_ext_irq+0x34>)
     b32:	681b      	ldr	r3, [r3, #0]
     b34:	2b00      	cmp	r3, #0
     b36:	d000      	beq.n	b3a <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     b38:	4798      	blx	r3
		}
	}
}
     b3a:	bd70      	pop	{r4, r5, r6, pc}
     b3c:	2000006c 	.word	0x2000006c

00000b40 <ext_irq_init>:
{
     b40:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <ext_irq_init+0x18>)
     b44:	2201      	movs	r2, #1
     b46:	4252      	negs	r2, r2
     b48:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     b4a:	2200      	movs	r2, #0
     b4c:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     b4e:	4803      	ldr	r0, [pc, #12]	; (b5c <ext_irq_init+0x1c>)
     b50:	4b03      	ldr	r3, [pc, #12]	; (b60 <ext_irq_init+0x20>)
     b52:	4798      	blx	r3
}
     b54:	bd10      	pop	{r4, pc}
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	2000006c 	.word	0x2000006c
     b5c:	00000b09 	.word	0x00000b09
     b60:	00001209 	.word	0x00001209

00000b64 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     b64:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     b66:	6943      	ldr	r3, [r0, #20]
     b68:	2b00      	cmp	r3, #0
     b6a:	d000      	beq.n	b6e <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     b6c:	4798      	blx	r3
	}
}
     b6e:	bd10      	pop	{r4, pc}

00000b70 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     b70:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     b72:	6983      	ldr	r3, [r0, #24]
     b74:	2b00      	cmp	r3, #0
     b76:	d000      	beq.n	b7a <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     b78:	4798      	blx	r3
	}
}
     b7a:	bd10      	pop	{r4, pc}

00000b7c <flash_init>:
{
     b7c:	b570      	push	{r4, r5, r6, lr}
     b7e:	0005      	movs	r5, r0
     b80:	000c      	movs	r4, r1
	ASSERT(flash && hw);
     b82:	2800      	cmp	r0, #0
     b84:	d012      	beq.n	bac <flash_init+0x30>
     b86:	0008      	movs	r0, r1
     b88:	1e43      	subs	r3, r0, #1
     b8a:	4198      	sbcs	r0, r3
     b8c:	b2c0      	uxtb	r0, r0
     b8e:	2242      	movs	r2, #66	; 0x42
     b90:	4907      	ldr	r1, [pc, #28]	; (bb0 <flash_init+0x34>)
     b92:	4b08      	ldr	r3, [pc, #32]	; (bb4 <flash_init+0x38>)
     b94:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     b96:	0021      	movs	r1, r4
     b98:	0028      	movs	r0, r5
     b9a:	4b07      	ldr	r3, [pc, #28]	; (bb8 <flash_init+0x3c>)
     b9c:	4798      	blx	r3
	if (rc) {
     b9e:	2800      	cmp	r0, #0
     ba0:	d103      	bne.n	baa <flash_init+0x2e>
	flash->dev.flash_cb.ready_cb = flash_ready;
     ba2:	4b06      	ldr	r3, [pc, #24]	; (bbc <flash_init+0x40>)
     ba4:	602b      	str	r3, [r5, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     ba6:	4b06      	ldr	r3, [pc, #24]	; (bc0 <flash_init+0x44>)
     ba8:	606b      	str	r3, [r5, #4]
}
     baa:	bd70      	pop	{r4, r5, r6, pc}
     bac:	2000      	movs	r0, #0
     bae:	e7ee      	b.n	b8e <flash_init+0x12>
     bb0:	0000250c 	.word	0x0000250c
     bb4:	00000e29 	.word	0x00000e29
     bb8:	0000148d 	.word	0x0000148d
     bbc:	00000b65 	.word	0x00000b65
     bc0:	00000b71 	.word	0x00000b71

00000bc4 <freqmeter_sync_init>:

/**
 * \brief Initialize frequency meter
 */
int32_t freqmeter_sync_init(struct freqmeter_sync_descriptor *const descr, void *const hw)
{
     bc4:	b570      	push	{r4, r5, r6, lr}
     bc6:	0005      	movs	r5, r0
     bc8:	000c      	movs	r4, r1
	int32_t status;

	ASSERT(descr && hw);
     bca:	2800      	cmp	r0, #0
     bcc:	d011      	beq.n	bf2 <freqmeter_sync_init+0x2e>
     bce:	0008      	movs	r0, r1
     bd0:	1e43      	subs	r3, r0, #1
     bd2:	4198      	sbcs	r0, r3
     bd4:	b2c0      	uxtb	r0, r0
     bd6:	223b      	movs	r2, #59	; 0x3b
     bd8:	490a      	ldr	r1, [pc, #40]	; (c04 <freqmeter_sync_init+0x40>)
     bda:	4b0b      	ldr	r3, [pc, #44]	; (c08 <freqmeter_sync_init+0x44>)
     bdc:	4798      	blx	r3

	status = _freqmeter_sync_init(&descr->device, hw);
     bde:	002e      	movs	r6, r5
     be0:	3608      	adds	r6, #8
     be2:	0021      	movs	r1, r4
     be4:	0030      	movs	r0, r6
     be6:	4b09      	ldr	r3, [pc, #36]	; (c0c <freqmeter_sync_init+0x48>)
     be8:	4798      	blx	r3
     bea:	1e04      	subs	r4, r0, #0
	if (status) {
     bec:	d003      	beq.n	bf6 <freqmeter_sync_init+0x32>
	}

	descr->period = _freqmeter_sync_set_measurement_period(&descr->device, 0xFFFFFFFF);

	return ERR_NONE;
}
     bee:	0020      	movs	r0, r4
     bf0:	bd70      	pop	{r4, r5, r6, pc}
     bf2:	2000      	movs	r0, #0
     bf4:	e7ef      	b.n	bd6 <freqmeter_sync_init+0x12>
	descr->period = _freqmeter_sync_set_measurement_period(&descr->device, 0xFFFFFFFF);
     bf6:	2101      	movs	r1, #1
     bf8:	4249      	negs	r1, r1
     bfa:	0030      	movs	r0, r6
     bfc:	4b04      	ldr	r3, [pc, #16]	; (c10 <freqmeter_sync_init+0x4c>)
     bfe:	4798      	blx	r3
     c00:	6028      	str	r0, [r5, #0]
	return ERR_NONE;
     c02:	e7f4      	b.n	bee <freqmeter_sync_init+0x2a>
     c04:	00002524 	.word	0x00002524
     c08:	00000e29 	.word	0x00000e29
     c0c:	00001425 	.word	0x00001425
     c10:	00001461 	.word	0x00001461

00000c14 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     c14:	b510      	push	{r4, lr}
     c16:	b084      	sub	sp, #16
     c18:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     c1a:	ab01      	add	r3, sp, #4
     c1c:	3814      	subs	r0, #20
     c1e:	8b82      	ldrh	r2, [r0, #28]
     c20:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     c22:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
     c24:	4a05      	ldr	r2, [pc, #20]	; (c3c <i2c_m_sync_write+0x28>)
     c26:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     c28:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     c2a:	0019      	movs	r1, r3
     c2c:	4b04      	ldr	r3, [pc, #16]	; (c40 <i2c_m_sync_write+0x2c>)
     c2e:	4798      	blx	r3

	if (ret) {
     c30:	2800      	cmp	r0, #0
     c32:	d100      	bne.n	c36 <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
     c34:	0020      	movs	r0, r4
}
     c36:	b004      	add	sp, #16
     c38:	bd10      	pop	{r4, pc}
     c3a:	46c0      	nop			; (mov r8, r8)
     c3c:	ffff8000 	.word	0xffff8000
     c40:	0000170d 	.word	0x0000170d

00000c44 <i2c_m_sync_read>:
{
     c44:	b510      	push	{r4, lr}
     c46:	b084      	sub	sp, #16
     c48:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     c4a:	ab01      	add	r3, sp, #4
     c4c:	3814      	subs	r0, #20
     c4e:	8b82      	ldrh	r2, [r0, #28]
     c50:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     c52:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     c54:	4a05      	ldr	r2, [pc, #20]	; (c6c <i2c_m_sync_read+0x28>)
     c56:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     c58:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     c5a:	0019      	movs	r1, r3
     c5c:	4b04      	ldr	r3, [pc, #16]	; (c70 <i2c_m_sync_read+0x2c>)
     c5e:	4798      	blx	r3
	if (ret) {
     c60:	2800      	cmp	r0, #0
     c62:	d100      	bne.n	c66 <i2c_m_sync_read+0x22>
	return n;
     c64:	0020      	movs	r0, r4
}
     c66:	b004      	add	sp, #16
     c68:	bd10      	pop	{r4, pc}
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	ffff8001 	.word	0xffff8001
     c70:	0000170d 	.word	0x0000170d

00000c74 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     c74:	b570      	push	{r4, r5, r6, lr}
     c76:	0004      	movs	r4, r0
     c78:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     c7a:	1e43      	subs	r3, r0, #1
     c7c:	4198      	sbcs	r0, r3
     c7e:	b2c0      	uxtb	r0, r0
     c80:	2268      	movs	r2, #104	; 0x68
     c82:	4907      	ldr	r1, [pc, #28]	; (ca0 <i2c_m_sync_init+0x2c>)
     c84:	4b07      	ldr	r3, [pc, #28]	; (ca4 <i2c_m_sync_init+0x30>)
     c86:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     c88:	0029      	movs	r1, r5
     c8a:	0020      	movs	r0, r4
     c8c:	4b06      	ldr	r3, [pc, #24]	; (ca8 <i2c_m_sync_init+0x34>)
     c8e:	4798      	blx	r3
	if (init_status) {
     c90:	2800      	cmp	r0, #0
     c92:	d103      	bne.n	c9c <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     c94:	4b05      	ldr	r3, [pc, #20]	; (cac <i2c_m_sync_init+0x38>)
     c96:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     c98:	4b05      	ldr	r3, [pc, #20]	; (cb0 <i2c_m_sync_init+0x3c>)
     c9a:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     c9c:	bd70      	pop	{r4, r5, r6, pc}
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	00002544 	.word	0x00002544
     ca4:	00000e29 	.word	0x00000e29
     ca8:	000016dd 	.word	0x000016dd
     cac:	00000c45 	.word	0x00000c45
     cb0:	00000c15 	.word	0x00000c15

00000cb4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     cb4:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     cb6:	6943      	ldr	r3, [r0, #20]
     cb8:	2b00      	cmp	r3, #0
     cba:	d000      	beq.n	cbe <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
     cbc:	4798      	blx	r3
	}
}
     cbe:	bd10      	pop	{r4, pc}

00000cc0 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     cc0:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     cc2:	6983      	ldr	r3, [r0, #24]
     cc4:	2b00      	cmp	r3, #0
     cc6:	d000      	beq.n	cca <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
     cc8:	4798      	blx	r3
	}
}
     cca:	bd10      	pop	{r4, pc}

00000ccc <pwm_init>:
{
     ccc:	b570      	push	{r4, r5, r6, lr}
     cce:	0005      	movs	r5, r0
     cd0:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     cd2:	2800      	cmp	r0, #0
     cd4:	d011      	beq.n	cfa <pwm_init+0x2e>
     cd6:	0008      	movs	r0, r1
     cd8:	1e43      	subs	r3, r0, #1
     cda:	4198      	sbcs	r0, r3
     cdc:	b2c0      	uxtb	r0, r0
     cde:	223d      	movs	r2, #61	; 0x3d
     ce0:	4907      	ldr	r1, [pc, #28]	; (d00 <pwm_init+0x34>)
     ce2:	4b08      	ldr	r3, [pc, #32]	; (d04 <pwm_init+0x38>)
     ce4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     ce6:	0021      	movs	r1, r4
     ce8:	0028      	movs	r0, r5
     cea:	4b07      	ldr	r3, [pc, #28]	; (d08 <pwm_init+0x3c>)
     cec:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     cee:	4b07      	ldr	r3, [pc, #28]	; (d0c <pwm_init+0x40>)
     cf0:	602b      	str	r3, [r5, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     cf2:	4b07      	ldr	r3, [pc, #28]	; (d10 <pwm_init+0x44>)
     cf4:	606b      	str	r3, [r5, #4]
}
     cf6:	2000      	movs	r0, #0
     cf8:	bd70      	pop	{r4, r5, r6, pc}
     cfa:	2000      	movs	r0, #0
     cfc:	e7ef      	b.n	cde <pwm_init+0x12>
     cfe:	46c0      	nop			; (mov r8, r8)
     d00:	00002560 	.word	0x00002560
     d04:	00000e29 	.word	0x00000e29
     d08:	00001f4d 	.word	0x00001f4d
     d0c:	00000cb5 	.word	0x00000cb5
     d10:	00000cc1 	.word	0x00000cc1

00000d14 <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     d14:	b570      	push	{r4, r5, r6, lr}
     d16:	0004      	movs	r4, r0
     d18:	000d      	movs	r5, r1
	int32_t rc = 0;

	ASSERT(spi && hw);
     d1a:	2800      	cmp	r0, #0
     d1c:	d016      	beq.n	d4c <spi_m_sync_init+0x38>
     d1e:	0008      	movs	r0, r1
     d20:	1e43      	subs	r3, r0, #1
     d22:	4198      	sbcs	r0, r3
     d24:	b2c0      	uxtb	r0, r0
     d26:	2242      	movs	r2, #66	; 0x42
     d28:	4909      	ldr	r1, [pc, #36]	; (d50 <spi_m_sync_init+0x3c>)
     d2a:	4b0a      	ldr	r3, [pc, #40]	; (d54 <spi_m_sync_init+0x40>)
     d2c:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
     d2e:	6025      	str	r5, [r4, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
     d30:	0029      	movs	r1, r5
     d32:	0020      	movs	r0, r4
     d34:	4b08      	ldr	r3, [pc, #32]	; (d58 <spi_m_sync_init+0x44>)
     d36:	4798      	blx	r3
	if (rc < 0) {
     d38:	2800      	cmp	r0, #0
     d3a:	db06      	blt.n	d4a <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     d3c:	4b07      	ldr	r3, [pc, #28]	; (d5c <spi_m_sync_init+0x48>)
     d3e:	8223      	strh	r3, [r4, #16]
	spi->io.read  = _spi_m_sync_io_read;
     d40:	4b07      	ldr	r3, [pc, #28]	; (d60 <spi_m_sync_init+0x4c>)
     d42:	60e3      	str	r3, [r4, #12]
	spi->io.write = _spi_m_sync_io_write;
     d44:	4b07      	ldr	r3, [pc, #28]	; (d64 <spi_m_sync_init+0x50>)
     d46:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
     d48:	2000      	movs	r0, #0
}
     d4a:	bd70      	pop	{r4, r5, r6, pc}
     d4c:	2000      	movs	r0, #0
     d4e:	e7ea      	b.n	d26 <spi_m_sync_init+0x12>
     d50:	00002578 	.word	0x00002578
     d54:	00000e29 	.word	0x00000e29
     d58:	00001b8d 	.word	0x00001b8d
     d5c:	ffff8000 	.word	0xffff8000
     d60:	00000ded 	.word	0x00000ded
     d64:	00000db1 	.word	0x00000db1

00000d68 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     d68:	b530      	push	{r4, r5, lr}
     d6a:	b087      	sub	sp, #28
     d6c:	0004      	movs	r4, r0
     d6e:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     d70:	2800      	cmp	r0, #0
     d72:	d014      	beq.n	d9e <spi_m_sync_transfer+0x36>
     d74:	0008      	movs	r0, r1
     d76:	1e43      	subs	r3, r0, #1
     d78:	4198      	sbcs	r0, r3
     d7a:	b2c0      	uxtb	r0, r0
     d7c:	22bd      	movs	r2, #189	; 0xbd
     d7e:	4909      	ldr	r1, [pc, #36]	; (da4 <spi_m_sync_transfer+0x3c>)
     d80:	4b09      	ldr	r3, [pc, #36]	; (da8 <spi_m_sync_transfer+0x40>)
     d82:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     d84:	682b      	ldr	r3, [r5, #0]
     d86:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     d88:	686b      	ldr	r3, [r5, #4]
     d8a:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     d8c:	68ab      	ldr	r3, [r5, #8]
     d8e:	9301      	str	r3, [sp, #4]
     d90:	9305      	str	r3, [sp, #20]

	return _spi_m_sync_trans(&spi->dev, &msg);
     d92:	a903      	add	r1, sp, #12
     d94:	0020      	movs	r0, r4
     d96:	4b05      	ldr	r3, [pc, #20]	; (dac <spi_m_sync_transfer+0x44>)
     d98:	4798      	blx	r3
}
     d9a:	b007      	add	sp, #28
     d9c:	bd30      	pop	{r4, r5, pc}
     d9e:	2000      	movs	r0, #0
     da0:	e7ec      	b.n	d7c <spi_m_sync_transfer+0x14>
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	00002578 	.word	0x00002578
     da8:	00000e29 	.word	0x00000e29
     dac:	00001d4d 	.word	0x00001d4d

00000db0 <_spi_m_sync_io_write>:
{
     db0:	b570      	push	{r4, r5, r6, lr}
     db2:	b084      	sub	sp, #16
     db4:	0004      	movs	r4, r0
     db6:	000e      	movs	r6, r1
     db8:	0015      	movs	r5, r2
	ASSERT(io);
     dba:	1e43      	subs	r3, r0, #1
     dbc:	4198      	sbcs	r0, r3
     dbe:	b2c0      	uxtb	r0, r0
     dc0:	22ad      	movs	r2, #173	; 0xad
     dc2:	4907      	ldr	r1, [pc, #28]	; (de0 <_spi_m_sync_io_write+0x30>)
     dc4:	4b07      	ldr	r3, [pc, #28]	; (de4 <_spi_m_sync_io_write+0x34>)
     dc6:	4798      	blx	r3
	xfer.rxbuf = 0;
     dc8:	2300      	movs	r3, #0
     dca:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     dcc:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     dce:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     dd0:	0020      	movs	r0, r4
     dd2:	3808      	subs	r0, #8
	return spi_m_sync_transfer(spi, &xfer);
     dd4:	a901      	add	r1, sp, #4
     dd6:	4b04      	ldr	r3, [pc, #16]	; (de8 <_spi_m_sync_io_write+0x38>)
     dd8:	4798      	blx	r3
}
     dda:	b004      	add	sp, #16
     ddc:	bd70      	pop	{r4, r5, r6, pc}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	00002578 	.word	0x00002578
     de4:	00000e29 	.word	0x00000e29
     de8:	00000d69 	.word	0x00000d69

00000dec <_spi_m_sync_io_read>:
{
     dec:	b570      	push	{r4, r5, r6, lr}
     dee:	b084      	sub	sp, #16
     df0:	0004      	movs	r4, r0
     df2:	000e      	movs	r6, r1
     df4:	0015      	movs	r5, r2
	ASSERT(io);
     df6:	1e43      	subs	r3, r0, #1
     df8:	4198      	sbcs	r0, r3
     dfa:	b2c0      	uxtb	r0, r0
     dfc:	2291      	movs	r2, #145	; 0x91
     dfe:	4907      	ldr	r1, [pc, #28]	; (e1c <_spi_m_sync_io_read+0x30>)
     e00:	4b07      	ldr	r3, [pc, #28]	; (e20 <_spi_m_sync_io_read+0x34>)
     e02:	4798      	blx	r3
	xfer.rxbuf = buf;
     e04:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     e06:	2300      	movs	r3, #0
     e08:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     e0a:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     e0c:	0020      	movs	r0, r4
     e0e:	3808      	subs	r0, #8
	return spi_m_sync_transfer(spi, &xfer);
     e10:	a901      	add	r1, sp, #4
     e12:	4b04      	ldr	r3, [pc, #16]	; (e24 <_spi_m_sync_io_read+0x38>)
     e14:	4798      	blx	r3
}
     e16:	b004      	add	sp, #16
     e18:	bd70      	pop	{r4, r5, r6, pc}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	00002578 	.word	0x00002578
     e20:	00000e29 	.word	0x00000e29
     e24:	00000d69 	.word	0x00000d69

00000e28 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     e28:	2800      	cmp	r0, #0
     e2a:	d100      	bne.n	e2e <assert+0x6>
		__asm("BKPT #0");
     e2c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     e2e:	4770      	bx	lr

00000e30 <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
     e30:	b510      	push	{r4, lr}
     e32:	0004      	movs	r4, r0
	ASSERT(hw == AC);
     e34:	4b18      	ldr	r3, [pc, #96]	; (e98 <_ac_init+0x68>)
     e36:	18c0      	adds	r0, r0, r3
     e38:	4243      	negs	r3, r0
     e3a:	4158      	adcs	r0, r3
     e3c:	b2c0      	uxtb	r0, r0
     e3e:	2230      	movs	r2, #48	; 0x30
     e40:	32ff      	adds	r2, #255	; 0xff
     e42:	4916      	ldr	r1, [pc, #88]	; (e9c <_ac_init+0x6c>)
     e44:	4b16      	ldr	r3, [pc, #88]	; (ea0 <_ac_init+0x70>)
     e46:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
     e48:	2201      	movs	r2, #1
     e4a:	6a23      	ldr	r3, [r4, #32]
     e4c:	421a      	tst	r2, r3
     e4e:	d1fc      	bne.n	e4a <_ac_init+0x1a>
     e50:	2203      	movs	r2, #3
     e52:	6a23      	ldr	r3, [r4, #32]
     e54:	421a      	tst	r2, r3
     e56:	d1fc      	bne.n	e52 <_ac_init+0x22>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
     e58:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
     e5a:	079b      	lsls	r3, r3, #30
     e5c:	d418      	bmi.n	e90 <_ac_init+0x60>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
     e5e:	2201      	movs	r2, #1
     e60:	6a23      	ldr	r3, [r4, #32]
     e62:	421a      	tst	r2, r3
     e64:	d1fc      	bne.n	e60 <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
     e66:	7823      	ldrb	r3, [r4, #0]
     e68:	2201      	movs	r2, #1
     e6a:	4313      	orrs	r3, r2
     e6c:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
     e6e:	6a23      	ldr	r3, [r4, #32]
     e70:	421a      	tst	r2, r3
     e72:	d1fc      	bne.n	e6e <_ac_init+0x3e>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
     e74:	22c0      	movs	r2, #192	; 0xc0
     e76:	00d2      	lsls	r2, r2, #3
     e78:	6122      	str	r2, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
     e7a:	2300      	movs	r3, #0
     e7c:	7323      	strb	r3, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
     e7e:	6162      	str	r2, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
     e80:	7363      	strb	r3, [r4, #13]
	((Ac *)hw)->COMPCTRL[index].reg = data;
     e82:	61a2      	str	r2, [r4, #24]
	((Ac *)hw)->SCALER[index].reg = data;
     e84:	73a3      	strb	r3, [r4, #14]
	((Ac *)hw)->COMPCTRL[index].reg = data;
     e86:	61e2      	str	r2, [r4, #28]
	((Ac *)hw)->SCALER[index].reg = data;
     e88:	73e3      	strb	r3, [r4, #15]
	((Ac *)hw)->EVCTRL.reg = data;
     e8a:	8063      	strh	r3, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 2, _ac.comp_scaler2);
	hri_ac_write_COMPCTRL_reg(hw, 3, _ac.comp_ctrl3);
	hri_ac_write_SCALER_reg(hw, 3, _ac.comp_scaler3);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
     e8c:	2000      	movs	r0, #0
}
     e8e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     e90:	2011      	movs	r0, #17
     e92:	4240      	negs	r0, r0
     e94:	e7fb      	b.n	e8e <_ac_init+0x5e>
     e96:	46c0      	nop			; (mov r8, r8)
     e98:	bdffb000 	.word	0xbdffb000
     e9c:	00002594 	.word	0x00002594
     ea0:	00000e29 	.word	0x00000e29

00000ea4 <_ac_sync_init>:
{
     ea4:	b570      	push	{r4, r5, r6, lr}
     ea6:	0005      	movs	r5, r0
     ea8:	000c      	movs	r4, r1
	ASSERT(device);
     eaa:	1e43      	subs	r3, r0, #1
     eac:	4198      	sbcs	r0, r3
     eae:	b2c0      	uxtb	r0, r0
     eb0:	228a      	movs	r2, #138	; 0x8a
     eb2:	4904      	ldr	r1, [pc, #16]	; (ec4 <_ac_sync_init+0x20>)
     eb4:	4b04      	ldr	r3, [pc, #16]	; (ec8 <_ac_sync_init+0x24>)
     eb6:	4798      	blx	r3
	device->hw = hw;
     eb8:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
     eba:	0020      	movs	r0, r4
     ebc:	4b03      	ldr	r3, [pc, #12]	; (ecc <_ac_sync_init+0x28>)
     ebe:	4798      	blx	r3
}
     ec0:	bd70      	pop	{r4, r5, r6, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	00002594 	.word	0x00002594
     ec8:	00000e29 	.word	0x00000e29
     ecc:	00000e31 	.word	0x00000e31

00000ed0 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     ed0:	b530      	push	{r4, r5, lr}
     ed2:	000c      	movs	r4, r1
typedef uint8_t  hri_adc_seqstatus_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ed4:	2201      	movs	r2, #1
     ed6:	8c03      	ldrh	r3, [r0, #32]
     ed8:	4213      	tst	r3, r2
     eda:	d1fc      	bne.n	ed6 <_adc_init+0x6>
     edc:	2203      	movs	r2, #3
     ede:	8c03      	ldrh	r3, [r0, #32]
     ee0:	4213      	tst	r3, r2
     ee2:	d1fc      	bne.n	ede <_adc_init+0xe>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     ee4:	7803      	ldrb	r3, [r0, #0]

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
     ee6:	079b      	lsls	r3, r3, #30
     ee8:	d430      	bmi.n	f4c <_adc_init+0x7c>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     eea:	2201      	movs	r2, #1
     eec:	8c03      	ldrh	r3, [r0, #32]
     eee:	4213      	tst	r3, r2
     ef0:	d1fc      	bne.n	eec <_adc_init+0x1c>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
     ef2:	7803      	ldrb	r3, [r0, #0]
     ef4:	2201      	movs	r2, #1
     ef6:	4313      	orrs	r3, r2
     ef8:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     efa:	8c03      	ldrh	r3, [r0, #32]
     efc:	4213      	tst	r3, r2
     efe:	d1fc      	bne.n	efa <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     f00:	4d14      	ldr	r5, [pc, #80]	; (f54 <_adc_init+0x84>)
     f02:	00e2      	lsls	r2, r4, #3
     f04:	1b13      	subs	r3, r2, r4
     f06:	009b      	lsls	r3, r3, #2
     f08:	18eb      	adds	r3, r5, r3
     f0a:	7899      	ldrb	r1, [r3, #2]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
     f0c:	7041      	strb	r1, [r0, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     f0e:	78d9      	ldrb	r1, [r3, #3]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
     f10:	7081      	strb	r1, [r0, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     f12:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
     f14:	70c1      	strb	r1, [r0, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     f16:	88d9      	ldrh	r1, [r3, #6]
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
     f18:	8101      	strh	r1, [r0, #8]
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
     f1a:	8919      	ldrh	r1, [r3, #8]
}

static inline void hri_adc_write_CTRLC_reg(const void *const hw, hri_adc_ctrlc_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLC.reg = data;
     f1c:	8141      	strh	r1, [r0, #10]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     f1e:	7a99      	ldrb	r1, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
     f20:	7301      	strb	r1, [r0, #12]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     f22:	7ad9      	ldrb	r1, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
     f24:	7341      	strb	r1, [r0, #13]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     f26:	8999      	ldrh	r1, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
     f28:	81c1      	strh	r1, [r0, #14]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     f2a:	89d9      	ldrh	r1, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
     f2c:	8201      	strh	r1, [r0, #16]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     f2e:	8a19      	ldrh	r1, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
     f30:	8241      	strh	r1, [r0, #18]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     f32:	8a59      	ldrh	r1, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
     f34:	8281      	strh	r1, [r0, #20]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     f36:	7d1b      	ldrb	r3, [r3, #20]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
     f38:	7703      	strb	r3, [r0, #28]
}

static inline void hri_adc_write_SEQCTRL_reg(const void *const hw, hri_adc_seqctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SEQCTRL.reg = data;
     f3a:	2300      	movs	r3, #0
     f3c:	6283      	str	r3, [r0, #40]	; 0x28
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     f3e:	1b11      	subs	r1, r2, r4
     f40:	0089      	lsls	r1, r1, #2
     f42:	1869      	adds	r1, r5, r1
     f44:	784b      	ldrb	r3, [r1, #1]
	((Adc *)hw)->CTRLA.reg = data;
     f46:	7003      	strb	r3, [r0, #0]

	return ERR_NONE;
     f48:	2000      	movs	r0, #0
}
     f4a:	bd30      	pop	{r4, r5, pc}
		return ERR_DENIED;
     f4c:	2011      	movs	r0, #17
     f4e:	4240      	negs	r0, r0
     f50:	e7fb      	b.n	f4a <_adc_init+0x7a>
     f52:	46c0      	nop			; (mov r8, r8)
     f54:	000025a8 	.word	0x000025a8

00000f58 <_adc_get_regs>:
{
     f58:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
     f5a:	4b07      	ldr	r3, [pc, #28]	; (f78 <_adc_get_regs+0x20>)
     f5c:	469c      	mov	ip, r3
     f5e:	4460      	add	r0, ip
     f60:	0a80      	lsrs	r0, r0, #10
		if (_adcs[i].number == n) {
     f62:	b2c0      	uxtb	r0, r0
     f64:	2800      	cmp	r0, #0
     f66:	d004      	beq.n	f72 <_adc_get_regs+0x1a>
	ASSERT(false);
     f68:	2296      	movs	r2, #150	; 0x96
     f6a:	4904      	ldr	r1, [pc, #16]	; (f7c <_adc_get_regs+0x24>)
     f6c:	2000      	movs	r0, #0
     f6e:	4b04      	ldr	r3, [pc, #16]	; (f80 <_adc_get_regs+0x28>)
     f70:	4798      	blx	r3
}
     f72:	2000      	movs	r0, #0
     f74:	bd10      	pop	{r4, pc}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	bdffbc00 	.word	0xbdffbc00
     f7c:	000025c4 	.word	0x000025c4
     f80:	00000e29 	.word	0x00000e29

00000f84 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
     f84:	b570      	push	{r4, r5, r6, lr}
     f86:	0005      	movs	r5, r0
     f88:	000c      	movs	r4, r1
	ASSERT(device);
     f8a:	1e43      	subs	r3, r0, #1
     f8c:	4198      	sbcs	r0, r3
     f8e:	b2c0      	uxtb	r0, r0
     f90:	22db      	movs	r2, #219	; 0xdb
     f92:	4906      	ldr	r1, [pc, #24]	; (fac <_adc_sync_init+0x28>)
     f94:	4b06      	ldr	r3, [pc, #24]	; (fb0 <_adc_sync_init+0x2c>)
     f96:	4798      	blx	r3

	device->hw = hw;
     f98:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
     f9a:	0020      	movs	r0, r4
     f9c:	4b05      	ldr	r3, [pc, #20]	; (fb4 <_adc_sync_init+0x30>)
     f9e:	4798      	blx	r3
     fa0:	0001      	movs	r1, r0
     fa2:	0020      	movs	r0, r4
     fa4:	4b04      	ldr	r3, [pc, #16]	; (fb8 <_adc_sync_init+0x34>)
     fa6:	4798      	blx	r3
}
     fa8:	bd70      	pop	{r4, r5, r6, pc}
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	000025c4 	.word	0x000025c4
     fb0:	00000e29 	.word	0x00000e29
     fb4:	00000f59 	.word	0x00000f59
     fb8:	00000ed1 	.word	0x00000ed1

00000fbc <_adc_get_adc_sync>:
 * \brief Retrieve ADC sync helper functions
 */
void *_adc_get_adc_sync(void)
{
	return (void *)NULL;
}
     fbc:	2000      	movs	r0, #0
     fbe:	4770      	bx	lr

00000fc0 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
     fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev->hw = hw;
     fc2:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     fc4:	698b      	ldr	r3, [r1, #24]
     fc6:	2201      	movs	r2, #1
     fc8:	4313      	orrs	r3, r2
     fca:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
     fcc:	6802      	ldr	r2, [r0, #0]

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
     fce:	2401      	movs	r4, #1
	tmp = ((Can *)hw)->CCCR.reg;
     fd0:	6993      	ldr	r3, [r2, #24]
     fd2:	421c      	tst	r4, r3
     fd4:	d0fc      	beq.n	fd0 <_can_async_init+0x10>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     fd6:	6993      	ldr	r3, [r2, #24]
     fd8:	2402      	movs	r4, #2
     fda:	4323      	orrs	r3, r4
     fdc:	6193      	str	r3, [r2, #24]
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (hw == CAN0) {
     fde:	4b34      	ldr	r3, [pc, #208]	; (10b0 <_can_async_init+0xf0>)
     fe0:	4299      	cmp	r1, r3
     fe2:	d010      	beq.n	1006 <_can_async_init+0x46>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
     fe4:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
     fe6:	6993      	ldr	r3, [r2, #24]
     fe8:	2102      	movs	r1, #2
     fea:	438b      	bics	r3, r1
     fec:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
     fee:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
     ff0:	6993      	ldr	r3, [r2, #24]
     ff2:	3901      	subs	r1, #1
     ff4:	438b      	bics	r3, r1
     ff6:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
     ff8:	6801      	ldr	r1, [r0, #0]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
     ffa:	2201      	movs	r2, #1
	tmp = ((Can *)hw)->CCCR.reg;
     ffc:	698b      	ldr	r3, [r1, #24]
     ffe:	421a      	tst	r2, r3
    1000:	d1fc      	bne.n	ffc <_can_async_init+0x3c>
	};

	return ERR_NONE;
}
    1002:	2000      	movs	r0, #0
    1004:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_can0_dev    = dev;
    1006:	4b2b      	ldr	r3, [pc, #172]	; (10b4 <_can_async_init+0xf4>)
    1008:	001a      	movs	r2, r3
    100a:	c201      	stmia	r2!, {r0}
		dev->context = (void *)&_can0_context;
    100c:	492a      	ldr	r1, [pc, #168]	; (10b8 <_can_async_init+0xf8>)
    100e:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN0_CCCR_REG);
    1010:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    1012:	698c      	ldr	r4, [r1, #24]
    1014:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN0_MRCFG_REG);
    1016:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    1018:	2400      	movs	r4, #0
    101a:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN0_BTP_REG);
    101c:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    101e:	4d27      	ldr	r5, [pc, #156]	; (10bc <_can_async_init+0xfc>)
    1020:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN0_DBTP_REG);
    1022:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    1024:	4d26      	ldr	r5, [pc, #152]	; (10c0 <_can_async_init+0x100>)
    1026:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN0_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo));
    1028:	4d26      	ldr	r5, [pc, #152]	; (10c4 <_can_async_init+0x104>)
    102a:	042d      	lsls	r5, r5, #16
    102c:	0c2d      	lsrs	r5, r5, #16
    102e:	2180      	movs	r1, #128	; 0x80
    1030:	0289      	lsls	r1, r1, #10
    1032:	430d      	orrs	r5, r1
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    1034:	26a0      	movs	r6, #160	; 0xa0
    1036:	6807      	ldr	r7, [r0, #0]
    1038:	51bd      	str	r5, [r7, r6]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    103a:	25bc      	movs	r5, #188	; 0xbc
    103c:	6806      	ldr	r6, [r0, #0]
    103e:	5174      	str	r4, [r6, r5]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    1040:	350c      	adds	r5, #12
    1042:	6806      	ldr	r6, [r0, #0]
    1044:	5174      	str	r4, [r6, r5]
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN0_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can0_tx_fifo));
    1046:	4d20      	ldr	r5, [pc, #128]	; (10c8 <_can_async_init+0x108>)
    1048:	042d      	lsls	r5, r5, #16
    104a:	0c2d      	lsrs	r5, r5, #16
    104c:	2680      	movs	r6, #128	; 0x80
    104e:	04b6      	lsls	r6, r6, #18
    1050:	4335      	orrs	r5, r6
	((Can *)hw)->TXBC.reg = data;
    1052:	26c0      	movs	r6, #192	; 0xc0
    1054:	6807      	ldr	r7, [r0, #0]
    1056:	51bd      	str	r5, [r7, r6]
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN0_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo));
    1058:	0412      	lsls	r2, r2, #16
    105a:	0c12      	lsrs	r2, r2, #16
    105c:	430a      	orrs	r2, r1
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    105e:	25f0      	movs	r5, #240	; 0xf0
    1060:	6806      	ldr	r6, [r0, #0]
    1062:	5172      	str	r2, [r6, r5]
	((Can *)hw)->GFC.reg = data;
    1064:	3d70      	subs	r5, #112	; 0x70
    1066:	2228      	movs	r2, #40	; 0x28
    1068:	6806      	ldr	r6, [r0, #0]
    106a:	5172      	str	r2, [r6, r5]
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN0_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can0_rx_std_filter));
    106c:	001a      	movs	r2, r3
    106e:	3214      	adds	r2, #20
    1070:	0412      	lsls	r2, r2, #16
    1072:	0c12      	lsrs	r2, r2, #16
    1074:	430a      	orrs	r2, r1
	((Can *)hw)->SIDFC.reg = data;
    1076:	2684      	movs	r6, #132	; 0x84
    1078:	6807      	ldr	r7, [r0, #0]
    107a:	51ba      	str	r2, [r7, r6]
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN0_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can0_rx_ext_filter));
    107c:	331c      	adds	r3, #28
    107e:	041b      	lsls	r3, r3, #16
    1080:	0c1b      	lsrs	r3, r3, #16
    1082:	430b      	orrs	r3, r1
	((Can *)hw)->XIDFC.reg = data;
    1084:	2288      	movs	r2, #136	; 0x88
    1086:	6801      	ldr	r1, [r0, #0]
    1088:	508b      	str	r3, [r1, r2]
	((Can *)hw)->XIDAM.reg = data;
    108a:	2390      	movs	r3, #144	; 0x90
    108c:	6802      	ldr	r2, [r0, #0]
    108e:	50d4      	str	r4, [r2, r3]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1090:	4b0e      	ldr	r3, [pc, #56]	; (10cc <_can_async_init+0x10c>)
    1092:	2280      	movs	r2, #128	; 0x80
    1094:	0212      	lsls	r2, r2, #8
    1096:	515a      	str	r2, [r3, r5]
  __ASM volatile ("dsb 0xF":::"memory");
    1098:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    109c:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    10a0:	21c0      	movs	r1, #192	; 0xc0
    10a2:	0049      	lsls	r1, r1, #1
    10a4:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    10a6:	601a      	str	r2, [r3, #0]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    10a8:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    10aa:	2201      	movs	r2, #1
    10ac:	65da      	str	r2, [r3, #92]	; 0x5c
    10ae:	e799      	b.n	fe4 <_can_async_init+0x24>
    10b0:	42001c00 	.word	0x42001c00
    10b4:	20000074 	.word	0x20000074
    10b8:	20000000 	.word	0x20000000
    10bc:	06020a07 	.word	0x06020a07
    10c0:	00000a33 	.word	0x00000a33
    10c4:	200001dc 	.word	0x200001dc
    10c8:	200001fc 	.word	0x200001fc
    10cc:	e000e100 	.word	0xe000e100

000010d0 <CAN0_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN0_Handler(void)
{
    10d0:	b570      	push	{r4, r5, r6, lr}
	struct _can_async_device *dev = _can0_dev;
    10d2:	4b19      	ldr	r3, [pc, #100]	; (1138 <CAN0_Handler+0x68>)
    10d4:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    10d6:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    10d8:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    10da:	07e3      	lsls	r3, r4, #31
    10dc:	d414      	bmi.n	1108 <CAN0_Handler+0x38>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    10de:	05a3      	lsls	r3, r4, #22
    10e0:	d416      	bmi.n	1110 <CAN0_Handler+0x40>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    10e2:	01a3      	lsls	r3, r4, #6
    10e4:	d418      	bmi.n	1118 <CAN0_Handler+0x48>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    10e6:	01e3      	lsls	r3, r4, #7
    10e8:	d41b      	bmi.n	1122 <CAN0_Handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    10ea:	0223      	lsls	r3, r4, #8
    10ec:	d507      	bpl.n	10fe <CAN0_Handler+0x2e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    10ee:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    10f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
    10f2:	0689      	lsls	r1, r1, #26
    10f4:	0fc9      	lsrs	r1, r1, #31
    10f6:	3101      	adds	r1, #1
    10f8:	0028      	movs	r0, r5
    10fa:	68eb      	ldr	r3, [r5, #12]
    10fc:	4798      	blx	r3
	}

	if (ir & CAN_IR_RF0L) {
    10fe:	0723      	lsls	r3, r4, #28
    1100:	d414      	bmi.n	112c <CAN0_Handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    1102:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    1104:	651c      	str	r4, [r3, #80]	; 0x50
}
    1106:	bd70      	pop	{r4, r5, r6, pc}
		dev->cb.rx_done(dev);
    1108:	0028      	movs	r0, r5
    110a:	68ab      	ldr	r3, [r5, #8]
    110c:	4798      	blx	r3
    110e:	e7e6      	b.n	10de <CAN0_Handler+0xe>
		dev->cb.tx_done(dev);
    1110:	0028      	movs	r0, r5
    1112:	686b      	ldr	r3, [r5, #4]
    1114:	4798      	blx	r3
    1116:	e7e4      	b.n	10e2 <CAN0_Handler+0x12>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    1118:	2103      	movs	r1, #3
    111a:	0028      	movs	r0, r5
    111c:	68eb      	ldr	r3, [r5, #12]
    111e:	4798      	blx	r3
    1120:	e7e1      	b.n	10e6 <CAN0_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    1122:	2100      	movs	r1, #0
    1124:	0028      	movs	r0, r5
    1126:	68eb      	ldr	r3, [r5, #12]
    1128:	4798      	blx	r3
    112a:	e7de      	b.n	10ea <CAN0_Handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    112c:	2104      	movs	r1, #4
    112e:	0028      	movs	r0, r5
    1130:	68eb      	ldr	r3, [r5, #12]
    1132:	4798      	blx	r3
    1134:	e7e5      	b.n	1102 <CAN0_Handler+0x32>
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	20000074 	.word	0x20000074

0000113c <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    113c:	23fa      	movs	r3, #250	; 0xfa
    113e:	011b      	lsls	r3, r3, #4
    1140:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1142:	4770      	bx	lr

00001144 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1144:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1146:	4b08      	ldr	r3, [pc, #32]	; (1168 <_init_chip+0x24>)
    1148:	685a      	ldr	r2, [r3, #4]
    114a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    114c:	4b07      	ldr	r3, [pc, #28]	; (116c <_init_chip+0x28>)
    114e:	4798      	blx	r3
	_oscctrl_init_sources();
    1150:	4b07      	ldr	r3, [pc, #28]	; (1170 <_init_chip+0x2c>)
    1152:	4798      	blx	r3
	_mclk_init();
    1154:	4b07      	ldr	r3, [pc, #28]	; (1174 <_init_chip+0x30>)
    1156:	4798      	blx	r3
	_gclk_init_generators();
    1158:	4b07      	ldr	r3, [pc, #28]	; (1178 <_init_chip+0x34>)
    115a:	4798      	blx	r3
	_oscctrl_init_referenced_generators();
    115c:	4b07      	ldr	r3, [pc, #28]	; (117c <_init_chip+0x38>)
    115e:	4798      	blx	r3

	_div_init();
    1160:	4b07      	ldr	r3, [pc, #28]	; (1180 <_init_chip+0x3c>)
    1162:	4798      	blx	r3

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif
}
    1164:	bd10      	pop	{r4, pc}
    1166:	46c0      	nop			; (mov r8, r8)
    1168:	41004000 	.word	0x41004000
    116c:	00001521 	.word	0x00001521
    1170:	00001539 	.word	0x00001539
    1174:	00001481 	.word	0x00001481
    1178:	00001471 	.word	0x00001471
    117c:	0000156d 	.word	0x0000156d
    1180:	000011f5 	.word	0x000011f5

00001184 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    1184:	2201      	movs	r2, #1
    1186:	6903      	ldr	r3, [r0, #16]
    1188:	421a      	tst	r2, r3
    118a:	d1fc      	bne.n	1186 <_dac_init+0x2>
    118c:	2203      	movs	r2, #3
    118e:	6903      	ldr	r3, [r0, #16]
    1190:	421a      	tst	r2, r3
    1192:	d1fc      	bne.n	118e <_dac_init+0xa>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    1194:	7803      	ldrb	r3, [r0, #0]
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);

	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    1196:	079b      	lsls	r3, r3, #30
    1198:	d412      	bmi.n	11c0 <_dac_init+0x3c>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    119a:	2201      	movs	r2, #1
    119c:	6903      	ldr	r3, [r0, #16]
    119e:	421a      	tst	r2, r3
    11a0:	d1fc      	bne.n	119c <_dac_init+0x18>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    11a2:	7803      	ldrb	r3, [r0, #0]
    11a4:	2201      	movs	r2, #1
    11a6:	4313      	orrs	r3, r2
    11a8:	7003      	strb	r3, [r0, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    11aa:	6903      	ldr	r3, [r0, #16]
    11ac:	421a      	tst	r2, r3
    11ae:	d1fc      	bne.n	11aa <_dac_init+0x26>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    11b0:	2200      	movs	r2, #0
    11b2:	7082      	strb	r2, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    11b4:	2301      	movs	r3, #1
    11b6:	7043      	strb	r3, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    11b8:	7002      	strb	r2, [r0, #0]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    11ba:	7503      	strb	r3, [r0, #20]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    11bc:	2000      	movs	r0, #0
}
    11be:	4770      	bx	lr
		return ERR_DENIED;
    11c0:	2011      	movs	r0, #17
    11c2:	4240      	negs	r0, r0
    11c4:	e7fb      	b.n	11be <_dac_init+0x3a>
	...

000011c8 <_dac_sync_init>:
{
    11c8:	b570      	push	{r4, r5, r6, lr}
    11ca:	0005      	movs	r5, r0
    11cc:	000c      	movs	r4, r1
	ASSERT(device);
    11ce:	1e43      	subs	r3, r0, #1
    11d0:	4198      	sbcs	r0, r3
    11d2:	b2c0      	uxtb	r0, r0
    11d4:	2258      	movs	r2, #88	; 0x58
    11d6:	4904      	ldr	r1, [pc, #16]	; (11e8 <_dac_sync_init+0x20>)
    11d8:	4b04      	ldr	r3, [pc, #16]	; (11ec <_dac_sync_init+0x24>)
    11da:	4798      	blx	r3
	device->hw = hw;
    11dc:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    11de:	0020      	movs	r0, r4
    11e0:	4b03      	ldr	r3, [pc, #12]	; (11f0 <_dac_sync_init+0x28>)
    11e2:	4798      	blx	r3
}
    11e4:	bd70      	pop	{r4, r5, r6, pc}
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	000025dc 	.word	0x000025dc
    11ec:	00000e29 	.word	0x00000e29
    11f0:	00001185 	.word	0x00001185

000011f4 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
    11f4:	2290      	movs	r2, #144	; 0x90
    11f6:	05d2      	lsls	r2, r2, #23
    11f8:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
    11fa:	2102      	movs	r1, #2
    11fc:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
    11fe:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
    1200:	4770      	bx	lr

00001202 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    1202:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    1204:	2000      	movs	r0, #0
    1206:	4770      	bx	lr

00001208 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1208:	4924      	ldr	r1, [pc, #144]	; (129c <_ext_irq_init+0x94>)
    120a:	2201      	movs	r2, #1
    120c:	684b      	ldr	r3, [r1, #4]
    120e:	421a      	tst	r2, r3
    1210:	d1fc      	bne.n	120c <_ext_irq_init+0x4>
    1212:	4922      	ldr	r1, [pc, #136]	; (129c <_ext_irq_init+0x94>)
    1214:	2203      	movs	r2, #3
    1216:	684b      	ldr	r3, [r1, #4]
    1218:	421a      	tst	r2, r3
    121a:	d1fc      	bne.n	1216 <_ext_irq_init+0xe>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    121c:	4b1f      	ldr	r3, [pc, #124]	; (129c <_ext_irq_init+0x94>)
    121e:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    1220:	079b      	lsls	r3, r3, #30
    1222:	d438      	bmi.n	1296 <_ext_irq_init+0x8e>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1224:	491d      	ldr	r1, [pc, #116]	; (129c <_ext_irq_init+0x94>)
    1226:	2201      	movs	r2, #1
    1228:	684b      	ldr	r3, [r1, #4]
    122a:	421a      	tst	r2, r3
    122c:	d1fc      	bne.n	1228 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    122e:	4a1b      	ldr	r2, [pc, #108]	; (129c <_ext_irq_init+0x94>)
    1230:	7813      	ldrb	r3, [r2, #0]
    1232:	2101      	movs	r1, #1
    1234:	430b      	orrs	r3, r1
    1236:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1238:	0011      	movs	r1, r2
    123a:	2201      	movs	r2, #1
    123c:	684b      	ldr	r3, [r1, #4]
    123e:	421a      	tst	r2, r3
    1240:	d1fc      	bne.n	123c <_ext_irq_init+0x34>
    1242:	4916      	ldr	r1, [pc, #88]	; (129c <_ext_irq_init+0x94>)
    1244:	2203      	movs	r2, #3
    1246:	684b      	ldr	r3, [r1, #4]
    1248:	421a      	tst	r2, r3
    124a:	d1fc      	bne.n	1246 <_ext_irq_init+0x3e>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    124c:	4b13      	ldr	r3, [pc, #76]	; (129c <_ext_irq_init+0x94>)
    124e:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1250:	2110      	movs	r1, #16
    1252:	438a      	bics	r2, r1
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    1254:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1256:	2200      	movs	r2, #0
    1258:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    125a:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    125c:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    125e:	61da      	str	r2, [r3, #28]
    1260:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1262:	0019      	movs	r1, r3
    1264:	3203      	adds	r2, #3
    1266:	684b      	ldr	r3, [r1, #4]
    1268:	421a      	tst	r2, r3
    126a:	d1fc      	bne.n	1266 <_ext_irq_init+0x5e>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    126c:	4a0b      	ldr	r2, [pc, #44]	; (129c <_ext_irq_init+0x94>)
    126e:	7813      	ldrb	r3, [r2, #0]
    1270:	2102      	movs	r1, #2
    1272:	430b      	orrs	r3, r1
    1274:	7013      	strb	r3, [r2, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1276:	4b0a      	ldr	r3, [pc, #40]	; (12a0 <_ext_irq_init+0x98>)
    1278:	2208      	movs	r2, #8
    127a:	317e      	adds	r1, #126	; 0x7e
    127c:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    127e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1282:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1286:	3101      	adds	r1, #1
    1288:	31ff      	adds	r1, #255	; 0xff
    128a:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    128c:	601a      	str	r2, [r3, #0]
	hri_eic_set_CTRLA_ENABLE_bit(EIC);
	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    128e:	4b05      	ldr	r3, [pc, #20]	; (12a4 <_ext_irq_init+0x9c>)
    1290:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
    1292:	2000      	movs	r0, #0
}
    1294:	4770      	bx	lr
		return ERR_DENIED;
    1296:	2011      	movs	r0, #17
    1298:	4240      	negs	r0, r0
    129a:	e7fb      	b.n	1294 <_ext_irq_init+0x8c>
    129c:	40002800 	.word	0x40002800
    12a0:	e000e100 	.word	0xe000e100
    12a4:	200000a0 	.word	0x200000a0

000012a8 <EIC_Handler>:

/**
* \brief EIC interrupt handler
*/
void EIC_Handler(void)
{
    12a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12aa:	46d6      	mov	lr, sl
    12ac:	4647      	mov	r7, r8
    12ae:	b580      	push	{r7, lr}
    12b0:	b085      	sub	sp, #20
	return ((Eic *)hw)->INTFLAG.reg;
    12b2:	4b27      	ldr	r3, [pc, #156]	; (1350 <EIC_Handler+0xa8>)
    12b4:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    12b6:	9203      	str	r2, [sp, #12]
	hri_eic_clear_INTFLAG_reg(EIC, flags);
    12b8:	9a03      	ldr	r2, [sp, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    12ba:	615a      	str	r2, [r3, #20]
	ASSERT(callback);
    12bc:	4b25      	ldr	r3, [pc, #148]	; (1354 <EIC_Handler+0xac>)
    12be:	6818      	ldr	r0, [r3, #0]
    12c0:	1e43      	subs	r3, r0, #1
    12c2:	4198      	sbcs	r0, r3
    12c4:	b2c0      	uxtb	r0, r0
    12c6:	2204      	movs	r2, #4
    12c8:	32ff      	adds	r2, #255	; 0xff
    12ca:	4923      	ldr	r1, [pc, #140]	; (1358 <EIC_Handler+0xb0>)
    12cc:	4b23      	ldr	r3, [pc, #140]	; (135c <EIC_Handler+0xb4>)
    12ce:	4798      	blx	r3
	while (flags) {
    12d0:	9b03      	ldr	r3, [sp, #12]
    12d2:	2b00      	cmp	r3, #0
    12d4:	d037      	beq.n	1346 <EIC_Handler+0x9e>
		pos = ffs(flags) - 1;
    12d6:	4b22      	ldr	r3, [pc, #136]	; (1360 <EIC_Handler+0xb8>)
    12d8:	469a      	mov	sl, r3
				if (_map[middle].extint == pos) {
    12da:	24ff      	movs	r4, #255	; 0xff
    12dc:	4f21      	ldr	r7, [pc, #132]	; (1364 <EIC_Handler+0xbc>)
    12de:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    12e0:	4698      	mov	r8, r3
    12e2:	e028      	b.n	1336 <EIC_Handler+0x8e>
					upper = middle - 1;
    12e4:	3e01      	subs	r6, #1
    12e6:	b2f2      	uxtb	r2, r6
			while (upper >= lower) {
    12e8:	4291      	cmp	r1, r2
    12ea:	d80c      	bhi.n	1306 <EIC_Handler+0x5e>
				middle = (upper + lower) >> 1;
    12ec:	1853      	adds	r3, r2, r1
    12ee:	105b      	asrs	r3, r3, #1
    12f0:	b2de      	uxtb	r6, r3
				if (_map[middle].extint == pos) {
    12f2:	4023      	ands	r3, r4
    12f4:	00db      	lsls	r3, r3, #3
    12f6:	5ddb      	ldrb	r3, [r3, r7]
    12f8:	4283      	cmp	r3, r0
    12fa:	d004      	beq.n	1306 <EIC_Handler+0x5e>
				if (_map[middle].extint < pos) {
    12fc:	4298      	cmp	r0, r3
    12fe:	ddf1      	ble.n	12e4 <EIC_Handler+0x3c>
					lower = middle + 1;
    1300:	3601      	adds	r6, #1
    1302:	b2f1      	uxtb	r1, r6
    1304:	e7f0      	b.n	12e8 <EIC_Handler+0x40>
			flags &= ~(1ul << pos);
    1306:	9b03      	ldr	r3, [sp, #12]
    1308:	002a      	movs	r2, r5
    130a:	4082      	lsls	r2, r0
    130c:	4393      	bics	r3, r2
    130e:	9303      	str	r3, [sp, #12]
			pos = ffs(flags) - 1;
    1310:	9803      	ldr	r0, [sp, #12]
    1312:	47c0      	blx	r8
    1314:	3801      	subs	r0, #1
    1316:	b240      	sxtb	r0, r0
		while (-1 != pos) {
    1318:	1c43      	adds	r3, r0, #1
    131a:	d004      	beq.n	1326 <EIC_Handler+0x7e>
				if (_map[middle].extint == pos) {
    131c:	9b01      	ldr	r3, [sp, #4]
    131e:	2600      	movs	r6, #0
    1320:	2100      	movs	r1, #0
    1322:	2200      	movs	r2, #0
    1324:	e7ea      	b.n	12fc <EIC_Handler+0x54>
	return ((Eic *)hw)->INTFLAG.reg;
    1326:	4b0a      	ldr	r3, [pc, #40]	; (1350 <EIC_Handler+0xa8>)
    1328:	695a      	ldr	r2, [r3, #20]
		flags = hri_eic_read_INTFLAG_reg(EIC);
    132a:	9203      	str	r2, [sp, #12]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    132c:	9a03      	ldr	r2, [sp, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    132e:	615a      	str	r2, [r3, #20]
	while (flags) {
    1330:	9b03      	ldr	r3, [sp, #12]
    1332:	2b00      	cmp	r3, #0
    1334:	d007      	beq.n	1346 <EIC_Handler+0x9e>
		pos = ffs(flags) - 1;
    1336:	9803      	ldr	r0, [sp, #12]
    1338:	47d0      	blx	sl
    133a:	3801      	subs	r0, #1
    133c:	b240      	sxtb	r0, r0
			flags &= ~(1ul << pos);
    133e:	2501      	movs	r5, #1
		while (-1 != pos) {
    1340:	1c43      	adds	r3, r0, #1
    1342:	d1eb      	bne.n	131c <EIC_Handler+0x74>
    1344:	e7ef      	b.n	1326 <EIC_Handler+0x7e>
	_ext_irq_handler();
}
    1346:	b005      	add	sp, #20
    1348:	bc0c      	pop	{r2, r3}
    134a:	4690      	mov	r8, r2
    134c:	469a      	mov	sl, r3
    134e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1350:	40002800 	.word	0x40002800
    1354:	200000a0 	.word	0x200000a0
    1358:	000025fc 	.word	0x000025fc
    135c:	00000e29 	.word	0x00000e29
    1360:	000021d5 	.word	0x000021d5
    1364:	000025f4 	.word	0x000025f4

00001368 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1368:	b510      	push	{r4, lr}
    136a:	2300      	movs	r3, #0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    136c:	4c10      	ldr	r4, [pc, #64]	; (13b0 <_event_system_init+0x48>)
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    136e:	2084      	movs	r0, #132	; 0x84
    1370:	05c0      	lsls	r0, r0, #23
    1372:	5d19      	ldrb	r1, [r3, r4]
    1374:	001a      	movs	r2, r3
    1376:	3220      	adds	r2, #32
    1378:	0092      	lsls	r2, r2, #2
    137a:	5011      	str	r1, [r2, r0]
    137c:	3301      	adds	r3, #1
	for (i = 0; i < EVSYS_USERS; i++) {
    137e:	2b2f      	cmp	r3, #47	; 0x2f
    1380:	d1f7      	bne.n	1372 <_event_system_init+0xa>
    1382:	2300      	movs	r3, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1384:	480a      	ldr	r0, [pc, #40]	; (13b0 <_event_system_init+0x48>)
    1386:	3030      	adds	r0, #48	; 0x30
	((Evsys *)hw)->CHANNEL[index].reg = data;
    1388:	2484      	movs	r4, #132	; 0x84
    138a:	05e4      	lsls	r4, r4, #23
    138c:	005a      	lsls	r2, r3, #1
    138e:	5a11      	ldrh	r1, [r2, r0]
    1390:	001a      	movs	r2, r3
    1392:	3208      	adds	r2, #8
    1394:	0092      	lsls	r2, r2, #2
    1396:	5111      	str	r1, [r2, r4]
    1398:	3301      	adds	r3, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    139a:	2b0c      	cmp	r3, #12
    139c:	d1f6      	bne.n	138c <_event_system_init+0x24>
	return ((Evsys *)hw)->INTENSET.reg;
}

static inline void hri_evsys_write_INTEN_reg(const void *const hw, hri_evsys_intenset_reg_t data)
{
	((Evsys *)hw)->INTENSET.reg = data;
    139e:	2384      	movs	r3, #132	; 0x84
    13a0:	05db      	lsls	r3, r3, #23
    13a2:	2200      	movs	r2, #0
    13a4:	615a      	str	r2, [r3, #20]
	((Evsys *)hw)->INTENCLR.reg = ~data;
    13a6:	3a01      	subs	r2, #1
    13a8:	611a      	str	r2, [r3, #16]
	}

	hri_evsys_write_INTEN_reg(EVSYS, interrupt_cfg);

	return ERR_NONE;
}
    13aa:	2000      	movs	r0, #0
    13ac:	bd10      	pop	{r4, pc}
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	00002614 	.word	0x00002614

000013b4 <_freqmeter_set_measurement_period>:
 * \param[in] period The period to set
 *
 * \return The period value which is set
 */
static uint32_t _freqmeter_set_measurement_period(void *const hw, const uint32_t period)
{
    13b4:	b570      	push	{r4, r5, r6, lr}
    13b6:	0004      	movs	r4, r0
    13b8:	0008      	movs	r0, r1
typedef uint8_t  hri_freqm_intflag_reg_t;
typedef uint8_t  hri_freqm_status_reg_t;

static inline void hri_freqm_wait_for_sync(const void *const hw, hri_freqm_syncbusy_reg_t reg)
{
	while (((Freqm *)hw)->SYNCBUSY.reg & reg) {
    13ba:	2203      	movs	r2, #3
    13bc:	68e3      	ldr	r3, [r4, #12]
    13be:	421a      	tst	r2, r3
    13c0:	d1fc      	bne.n	13bc <_freqmeter_set_measurement_period+0x8>

static inline bool hri_freqm_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_freqm_wait_for_sync(hw, FREQM_SYNCBUSY_SWRST | FREQM_SYNCBUSY_ENABLE);
	tmp = ((Freqm *)hw)->CTRLA.reg;
    13c2:	7825      	ldrb	r5, [r4, #0]
	tmp = (tmp & FREQM_CTRLA_ENABLE) >> FREQM_CTRLA_ENABLE_Pos;
    13c4:	07ad      	lsls	r5, r5, #30
    13c6:	0fed      	lsrs	r5, r5, #31
	bool     enabled = hri_freqm_get_CTRLA_ENABLE_bit(hw);
	uint32_t value   = (uint32_t)((uint64_t)period * CONF_GCLK_FREQM_REF_FREQUENCY / 1000000);
    13c8:	0c41      	lsrs	r1, r0, #17
    13ca:	03c0      	lsls	r0, r0, #15
    13cc:	4a13      	ldr	r2, [pc, #76]	; (141c <_freqmeter_set_measurement_period+0x68>)
    13ce:	2300      	movs	r3, #0
    13d0:	4e13      	ldr	r6, [pc, #76]	; (1420 <_freqmeter_set_measurement_period+0x6c>)
    13d2:	47b0      	blx	r6
	while (((Freqm *)hw)->SYNCBUSY.reg & reg) {
    13d4:	2203      	movs	r2, #3
    13d6:	68e3      	ldr	r3, [r4, #12]
    13d8:	421a      	tst	r2, r3
    13da:	d1fc      	bne.n	13d6 <_freqmeter_set_measurement_period+0x22>
static inline void hri_freqm_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	FREQM_CRITICAL_SECTION_ENTER();
	hri_freqm_wait_for_sync(hw, FREQM_SYNCBUSY_SWRST | FREQM_SYNCBUSY_ENABLE);
	tmp = ((Freqm *)hw)->CTRLA.reg;
    13dc:	7823      	ldrb	r3, [r4, #0]
	tmp &= ~FREQM_CTRLA_ENABLE;
    13de:	2202      	movs	r2, #2
    13e0:	4393      	bics	r3, r2
	tmp |= value << FREQM_CTRLA_ENABLE_Pos;
	((Freqm *)hw)->CTRLA.reg = tmp;
    13e2:	7023      	strb	r3, [r4, #0]
	while (((Freqm *)hw)->SYNCBUSY.reg & reg) {
    13e4:	68e3      	ldr	r3, [r4, #12]
    13e6:	421a      	tst	r2, r3
    13e8:	d1fc      	bne.n	13e4 <_freqmeter_set_measurement_period+0x30>
    13ea:	0001      	movs	r1, r0
    13ec:	28ff      	cmp	r0, #255	; 0xff
    13ee:	d900      	bls.n	13f2 <_freqmeter_set_measurement_period+0x3e>
    13f0:	21ff      	movs	r1, #255	; 0xff
	hri_freqm_wait_for_sync(hw, FREQM_SYNCBUSY_ENABLE);

	if (value > 0xFF) {
		value = CONF_FREQM_REFNUM;
	}
	hri_freqm_write_CFGA_reg(hw, value);
    13f2:	b28b      	uxth	r3, r1
}

static inline void hri_freqm_write_CFGA_reg(const void *const hw, hri_freqm_cfga_reg_t data)
{
	FREQM_CRITICAL_SECTION_ENTER();
	((Freqm *)hw)->CFGA.reg = data;
    13f4:	8063      	strh	r3, [r4, #2]

	if (enabled) {
    13f6:	2d00      	cmp	r5, #0
    13f8:	d00b      	beq.n	1412 <_freqmeter_set_measurement_period+0x5e>
	while (((Freqm *)hw)->SYNCBUSY.reg & reg) {
    13fa:	2203      	movs	r2, #3
    13fc:	68e3      	ldr	r3, [r4, #12]
    13fe:	421a      	tst	r2, r3
    1400:	d1fc      	bne.n	13fc <_freqmeter_set_measurement_period+0x48>
	tmp = ((Freqm *)hw)->CTRLA.reg;
    1402:	7823      	ldrb	r3, [r4, #0]
	tmp &= ~FREQM_CTRLA_ENABLE;
    1404:	2202      	movs	r2, #2
    1406:	4393      	bics	r3, r2
	tmp |= value << FREQM_CTRLA_ENABLE_Pos;
    1408:	4313      	orrs	r3, r2
	((Freqm *)hw)->CTRLA.reg = tmp;
    140a:	7023      	strb	r3, [r4, #0]
	while (((Freqm *)hw)->SYNCBUSY.reg & reg) {
    140c:	68e3      	ldr	r3, [r4, #12]
    140e:	421a      	tst	r2, r3
    1410:	d1fc      	bne.n	140c <_freqmeter_set_measurement_period+0x58>
		hri_freqm_write_CTRLA_ENABLE_bit(hw, enabled);
		hri_freqm_wait_for_sync(hw, FREQM_SYNCBUSY_ENABLE);
	}

	return (value * 1000000) / CONF_GCLK_FREQM_REF_FREQUENCY;
    1412:	4802      	ldr	r0, [pc, #8]	; (141c <_freqmeter_set_measurement_period+0x68>)
    1414:	4348      	muls	r0, r1
    1416:	0bc0      	lsrs	r0, r0, #15
}
    1418:	bd70      	pop	{r4, r5, r6, pc}
    141a:	46c0      	nop			; (mov r8, r8)
    141c:	000f4240 	.word	0x000f4240
    1420:	00002195 	.word	0x00002195

00001424 <_freqmeter_sync_init>:
{
    1424:	b570      	push	{r4, r5, r6, lr}
    1426:	0005      	movs	r5, r0
    1428:	000c      	movs	r4, r1
	ASSERT(device);
    142a:	1e43      	subs	r3, r0, #1
    142c:	4198      	sbcs	r0, r3
    142e:	b2c0      	uxtb	r0, r0
    1430:	223e      	movs	r2, #62	; 0x3e
    1432:	4909      	ldr	r1, [pc, #36]	; (1458 <_freqmeter_sync_init+0x34>)
    1434:	4b09      	ldr	r3, [pc, #36]	; (145c <_freqmeter_sync_init+0x38>)
    1436:	4798      	blx	r3
	device->hw = hw;
    1438:	602c      	str	r4, [r5, #0]
    143a:	2203      	movs	r2, #3
    143c:	68e3      	ldr	r3, [r4, #12]
    143e:	421a      	tst	r2, r3
    1440:	d1fc      	bne.n	143c <_freqmeter_sync_init+0x18>
	tmp = ((Freqm *)hw)->CTRLA.reg;
    1442:	7823      	ldrb	r3, [r4, #0]
	if (hri_freqm_get_CTRLA_ENABLE_bit(hw)) {
    1444:	079b      	lsls	r3, r3, #30
    1446:	d403      	bmi.n	1450 <_freqmeter_sync_init+0x2c>
	((Freqm *)hw)->CFGA.reg = data;
    1448:	23ff      	movs	r3, #255	; 0xff
    144a:	8063      	strh	r3, [r4, #2]
	return ERR_NONE;
    144c:	2000      	movs	r0, #0
}
    144e:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    1450:	2011      	movs	r0, #17
    1452:	4240      	negs	r0, r0
	return _freqmeter_init(device->hw);
    1454:	e7fb      	b.n	144e <_freqmeter_sync_init+0x2a>
    1456:	46c0      	nop			; (mov r8, r8)
    1458:	0000265c 	.word	0x0000265c
    145c:	00000e29 	.word	0x00000e29

00001460 <_freqmeter_sync_set_measurement_period>:
{
    1460:	b510      	push	{r4, lr}
	return _freqmeter_set_measurement_period(device->hw, period);
    1462:	6800      	ldr	r0, [r0, #0]
    1464:	4b01      	ldr	r3, [pc, #4]	; (146c <_freqmeter_sync_set_measurement_period+0xc>)
    1466:	4798      	blx	r3
}
    1468:	bd10      	pop	{r4, pc}
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	000013b5 	.word	0x000013b5

00001470 <_gclk_init_generators>:
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1470:	4a01      	ldr	r2, [pc, #4]	; (1478 <_gclk_init_generators+0x8>)
    1472:	4b02      	ldr	r3, [pc, #8]	; (147c <_gclk_init_generators+0xc>)
    1474:	621a      	str	r2, [r3, #32]
	                               | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos)
	                               | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_8_SOURCE);
#endif
}
    1476:	4770      	bx	lr
    1478:	00010106 	.word	0x00010106
    147c:	40001c00 	.word	0x40001c00

00001480 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1480:	2201      	movs	r2, #1
    1482:	4b01      	ldr	r3, [pc, #4]	; (1488 <_mclk_init+0x8>)
    1484:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    1486:	4770      	bx	lr
    1488:	40000800 	.word	0x40000800

0000148c <_flash_init>:

/**
 * \brief Initialize NVM
 */
int32_t _flash_init(struct _flash_device *const device, void *const hw)
{
    148c:	b570      	push	{r4, r5, r6, lr}
    148e:	0005      	movs	r5, r0
    1490:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    1492:	2800      	cmp	r0, #0
    1494:	d01d      	beq.n	14d2 <_flash_init+0x46>
    1496:	4b10      	ldr	r3, [pc, #64]	; (14d8 <_flash_init+0x4c>)
    1498:	18c8      	adds	r0, r1, r3
    149a:	4243      	negs	r3, r0
    149c:	4158      	adcs	r0, r3
    149e:	b2c0      	uxtb	r0, r0
    14a0:	224f      	movs	r2, #79	; 0x4f
    14a2:	490e      	ldr	r1, [pc, #56]	; (14dc <_flash_init+0x50>)
    14a4:	4b0e      	ldr	r3, [pc, #56]	; (14e0 <_flash_init+0x54>)
    14a6:	4798      	blx	r3
	uint32_t ctrlb;

	device->hw = hw;
    14a8:	612c      	str	r4, [r5, #16]
}

static inline hri_nvmctrl_ctrlb_reg_t hri_nvmctrl_get_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
    14aa:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
    14ac:	239e      	movs	r3, #158	; 0x9e
    14ae:	4013      	ands	r3, r2
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    14b0:	6063      	str	r3, [r4, #4]
	ctrlb      = _nvm.ctrlb & ~(NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	ctrlb |= hri_nvmctrl_get_CTRLB_reg(device->hw, NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	hri_nvmctrl_write_CTRLB_reg(device->hw, ctrlb);

	_nvm_dev = device;
    14b2:	4b0c      	ldr	r3, [pc, #48]	; (14e4 <_flash_init+0x58>)
    14b4:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    14b6:	4b0c      	ldr	r3, [pc, #48]	; (14e8 <_flash_init+0x5c>)
    14b8:	2240      	movs	r2, #64	; 0x40
    14ba:	2180      	movs	r1, #128	; 0x80
    14bc:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    14be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14c2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    14c6:	3101      	adds	r1, #1
    14c8:	31ff      	adds	r1, #255	; 0xff
    14ca:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    14cc:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(NVMCTRL_IRQn);
	NVIC_ClearPendingIRQ(NVMCTRL_IRQn);
	NVIC_EnableIRQ(NVMCTRL_IRQn);
	return ERR_NONE;
}
    14ce:	2000      	movs	r0, #0
    14d0:	bd70      	pop	{r4, r5, r6, pc}
    14d2:	2000      	movs	r0, #0
    14d4:	e7e4      	b.n	14a0 <_flash_init+0x14>
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	beffc000 	.word	0xbeffc000
    14dc:	00002678 	.word	0x00002678
    14e0:	00000e29 	.word	0x00000e29
    14e4:	200000a4 	.word	0x200000a4
    14e8:	e000e100 	.word	0xe000e100

000014ec <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
    14ec:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
    14ee:	4b0b      	ldr	r3, [pc, #44]	; (151c <NVMCTRL_Handler+0x30>)
    14f0:	6818      	ldr	r0, [r3, #0]
    14f2:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    14f4:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    14f6:	07d2      	lsls	r2, r2, #31
    14f8:	d506      	bpl.n	1508 <NVMCTRL_Handler+0x1c>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_READY;
    14fa:	2201      	movs	r2, #1
    14fc:	751a      	strb	r2, [r3, #20]
		hri_nvmctrl_clear_interrupt_READY_bit(hw);
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
    14fe:	6803      	ldr	r3, [r0, #0]
    1500:	2b00      	cmp	r3, #0
    1502:	d000      	beq.n	1506 <NVMCTRL_Handler+0x1a>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
    1504:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
    1506:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
    1508:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
    150a:	0792      	lsls	r2, r2, #30
    150c:	d5fb      	bpl.n	1506 <NVMCTRL_Handler+0x1a>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
    150e:	2202      	movs	r2, #2
    1510:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
    1512:	6843      	ldr	r3, [r0, #4]
    1514:	2b00      	cmp	r3, #0
    1516:	d0f6      	beq.n	1506 <NVMCTRL_Handler+0x1a>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
    1518:	4798      	blx	r3
}
    151a:	e7f4      	b.n	1506 <NVMCTRL_Handler+0x1a>
    151c:	200000a4 	.word	0x200000a4

00001520 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1520:	4b04      	ldr	r3, [pc, #16]	; (1534 <_osc32kctrl_init_sources+0x14>)
    1522:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1524:	21f8      	movs	r1, #248	; 0xf8
    1526:	0149      	lsls	r1, r1, #5
    1528:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    152a:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    152c:	2200      	movs	r2, #0
    152e:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    1530:	4770      	bx	lr
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	40001400 	.word	0x40001400

00001538 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
    1538:	4b0b      	ldr	r3, [pc, #44]	; (1568 <_oscctrl_init_sources+0x30>)
    153a:	2202      	movs	r2, #2
    153c:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
    153e:	3209      	adds	r2, #9
    1540:	755a      	strb	r2, [r3, #21]
	return ((Oscctrl *)hw)->STATUS.reg;
}

static inline bool hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(const void *const hw)
{
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
    1542:	0019      	movs	r1, r3
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
    1544:	3a07      	subs	r2, #7
    1546:	698b      	ldr	r3, [r1, #24]
    1548:	421a      	tst	r2, r3
    154a:	d1fc      	bne.n	1546 <_oscctrl_init_sources+0xe>
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
    154c:	2207      	movs	r2, #7
    154e:	4b06      	ldr	r3, [pc, #24]	; (1568 <_oscctrl_init_sources+0x30>)
    1550:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
    1552:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
    1554:	3209      	adds	r2, #9
    1556:	68cb      	ldr	r3, [r1, #12]
    1558:	421a      	tst	r2, r3
    155a:	d0fc      	beq.n	1556 <_oscctrl_init_sources+0x1e>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
    155c:	4a02      	ldr	r2, [pc, #8]	; (1568 <_oscctrl_init_sources+0x30>)
    155e:	7d13      	ldrb	r3, [r2, #20]
    1560:	2180      	movs	r1, #128	; 0x80
    1562:	430b      	orrs	r3, r1
    1564:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1566:	4770      	bx	lr
    1568:	40001000 	.word	0x40001000

0000156c <_oscctrl_init_referenced_generators>:
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    156c:	4770      	bx	lr
	...

00001570 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    1570:	b510      	push	{r4, lr}
    1572:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    1574:	d025      	beq.n	15c2 <_calendar_init+0x52>
    1576:	6800      	ldr	r0, [r0, #0]
    1578:	1e43      	subs	r3, r0, #1
    157a:	4198      	sbcs	r0, r3
    157c:	b2c0      	uxtb	r0, r0
    157e:	223a      	movs	r2, #58	; 0x3a
    1580:	4912      	ldr	r1, [pc, #72]	; (15cc <_calendar_init+0x5c>)
    1582:	4b13      	ldr	r3, [pc, #76]	; (15d0 <_calendar_init+0x60>)
    1584:	4798      	blx	r3

	_rtc_dev = dev;
    1586:	4b13      	ldr	r3, [pc, #76]	; (15d4 <_calendar_init+0x64>)
    1588:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    158a:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_rtcmode2_freqcorr_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    158c:	2101      	movs	r1, #1
    158e:	691a      	ldr	r2, [r3, #16]
    1590:	4211      	tst	r1, r2
    1592:	d1fc      	bne.n	158e <_calendar_init+0x1e>
    1594:	4910      	ldr	r1, [pc, #64]	; (15d8 <_calendar_init+0x68>)
    1596:	691a      	ldr	r2, [r3, #16]
    1598:	420a      	tst	r2, r1
    159a:	d1fc      	bne.n	1596 <_calendar_init+0x26>

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    159c:	881a      	ldrh	r2, [r3, #0]
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    159e:	0792      	lsls	r2, r2, #30
    15a0:	d411      	bmi.n	15c6 <_calendar_init+0x56>
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    15a2:	2101      	movs	r1, #1
    15a4:	691a      	ldr	r2, [r3, #16]
    15a6:	4211      	tst	r1, r2
    15a8:	d1fc      	bne.n	15a4 <_calendar_init+0x34>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    15aa:	881a      	ldrh	r2, [r3, #0]
    15ac:	2101      	movs	r1, #1
    15ae:	430a      	orrs	r2, r1
    15b0:	801a      	strh	r2, [r3, #0]
		return ERR_DENIED;
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    15b2:	6822      	ldr	r2, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    15b4:	6913      	ldr	r3, [r2, #16]
    15b6:	4219      	tst	r1, r3
    15b8:	d1fc      	bne.n	15b4 <_calendar_init+0x44>
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    15ba:	4b08      	ldr	r3, [pc, #32]	; (15dc <_calendar_init+0x6c>)
    15bc:	8013      	strh	r3, [r2, #0]
	                                  | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);

	return ERR_NONE;
    15be:	2000      	movs	r0, #0
}
    15c0:	bd10      	pop	{r4, pc}
    15c2:	2000      	movs	r0, #0
    15c4:	e7db      	b.n	157e <_calendar_init+0xe>
		return ERR_DENIED;
    15c6:	2011      	movs	r0, #17
    15c8:	4240      	negs	r0, r0
    15ca:	e7f9      	b.n	15c0 <_calendar_init+0x50>
    15cc:	00002698 	.word	0x00002698
    15d0:	00000e29 	.word	0x00000e29
    15d4:	200000a8 	.word	0x200000a8
    15d8:	00008003 	.word	0x00008003
    15dc:	ffff8100 	.word	0xffff8100

000015e0 <RTC_Handler>:

/**
* \brief Rtc interrupt handler
*/
void RTC_Handler(void)
{
    15e0:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    15e2:	4b07      	ldr	r3, [pc, #28]	; (1600 <RTC_Handler+0x20>)
    15e4:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    15e6:	6823      	ldr	r3, [r4, #0]
    15e8:	899b      	ldrh	r3, [r3, #12]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    15ea:	05db      	lsls	r3, r3, #23
    15ec:	d400      	bmi.n	15f0 <RTC_Handler+0x10>
}
    15ee:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    15f0:	0020      	movs	r0, r4
    15f2:	6863      	ldr	r3, [r4, #4]
    15f4:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    15f6:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    15f8:	2280      	movs	r2, #128	; 0x80
    15fa:	0052      	lsls	r2, r2, #1
    15fc:	819a      	strh	r2, [r3, #12]
}
    15fe:	e7f6      	b.n	15ee <RTC_Handler+0xe>
    1600:	200000a8 	.word	0x200000a8

00001604 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    1604:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1606:	4b0b      	ldr	r3, [pc, #44]	; (1634 <_get_i2cm_index+0x30>)
    1608:	469c      	mov	ip, r3
    160a:	4460      	add	r0, ip
    160c:	0a80      	lsrs	r0, r0, #10
    160e:	b2c0      	uxtb	r0, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
    1610:	2800      	cmp	r0, #0
    1612:	d00c      	beq.n	162e <_get_i2cm_index+0x2a>
    1614:	2803      	cmp	r0, #3
    1616:	d007      	beq.n	1628 <_get_i2cm_index+0x24>
			return i;
		}
	}

	ASSERT(false);
    1618:	4a07      	ldr	r2, [pc, #28]	; (1638 <_get_i2cm_index+0x34>)
    161a:	4908      	ldr	r1, [pc, #32]	; (163c <_get_i2cm_index+0x38>)
    161c:	2000      	movs	r0, #0
    161e:	4b08      	ldr	r3, [pc, #32]	; (1640 <_get_i2cm_index+0x3c>)
    1620:	4798      	blx	r3
	return -1;
    1622:	2001      	movs	r0, #1
    1624:	4240      	negs	r0, r0
}
    1626:	bd10      	pop	{r4, pc}
    1628:	3802      	subs	r0, #2
			return i;
    162a:	b240      	sxtb	r0, r0
    162c:	e7fb      	b.n	1626 <_get_i2cm_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    162e:	2000      	movs	r0, #0
    1630:	e7fb      	b.n	162a <_get_i2cm_index+0x26>
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	bdfffc00 	.word	0xbdfffc00
    1638:	000003a1 	.word	0x000003a1
    163c:	00002704 	.word	0x00002704
    1640:	00000e29 	.word	0x00000e29

00001644 <_i2c_m_sync_init_impl>:
		}
	}
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1644:	b570      	push	{r4, r5, r6, lr}
    1646:	0005      	movs	r5, r0
    1648:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    164a:	0008      	movs	r0, r1
    164c:	4b20      	ldr	r3, [pc, #128]	; (16d0 <_i2c_m_sync_init_impl+0x8c>)
    164e:	4798      	blx	r3
    1650:	b2c0      	uxtb	r0, r0
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1652:	2201      	movs	r2, #1
    1654:	69e3      	ldr	r3, [r4, #28]
    1656:	421a      	tst	r2, r3
    1658:	d1fc      	bne.n	1654 <_i2c_m_sync_init_impl+0x10>
    165a:	2203      	movs	r2, #3
    165c:	69e3      	ldr	r3, [r4, #28]
    165e:	421a      	tst	r2, r3
    1660:	d1fc      	bne.n	165c <_i2c_m_sync_init_impl+0x18>

static inline bool hri_sercomi2cm_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1662:	6823      	ldr	r3, [r4, #0]

	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
	/* Check if module is enabled. */
	if (hri_sercomi2cm_get_CTRLA_ENABLE_bit(hw)) {
    1664:	079b      	lsls	r3, r3, #30
    1666:	d42f      	bmi.n	16c8 <_i2c_m_sync_init_impl+0x84>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1668:	2201      	movs	r2, #1
    166a:	69e3      	ldr	r3, [r4, #28]
    166c:	421a      	tst	r2, r3
    166e:	d1fc      	bne.n	166a <_i2c_m_sync_init_impl+0x26>
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_SWRST;
    1670:	6823      	ldr	r3, [r4, #0]
    1672:	2201      	movs	r2, #1
    1674:	4313      	orrs	r3, r2
    1676:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1678:	69e3      	ldr	r3, [r4, #28]
    167a:	421a      	tst	r2, r3
    167c:	d1fc      	bne.n	1678 <_i2c_m_sync_init_impl+0x34>
		return ERR_DENIED;
	}
	hri_sercomi2cm_set_CTRLA_SWRST_bit(hw);
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    167e:	0043      	lsls	r3, r0, #1
    1680:	181b      	adds	r3, r3, r0
    1682:	00da      	lsls	r2, r3, #3
    1684:	4b13      	ldr	r3, [pc, #76]	; (16d4 <_i2c_m_sync_init_impl+0x90>)
    1686:	189b      	adds	r3, r3, r2
    1688:	6859      	ldr	r1, [r3, #4]
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    168a:	6021      	str	r1, [r4, #0]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    168c:	689a      	ldr	r2, [r3, #8]
    168e:	6062      	str	r2, [r4, #4]
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1690:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1692:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1694:	0189      	lsls	r1, r1, #6
    1696:	0f89      	lsrs	r1, r1, #30
    1698:	81a9      	strh	r1, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    169a:	2301      	movs	r3, #1
    169c:	428b      	cmp	r3, r1
    169e:	4189      	sbcs	r1, r1
    16a0:	4249      	negs	r1, r1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16a2:	2204      	movs	r2, #4
    16a4:	69e3      	ldr	r3, [r4, #28]
    16a6:	421a      	tst	r2, r3
    16a8:	d1fc      	bne.n	16a4 <_i2c_m_sync_init_impl+0x60>
static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    16aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    16ac:	4a0a      	ldr	r2, [pc, #40]	; (16d8 <_i2c_m_sync_init_impl+0x94>)
    16ae:	401a      	ands	r2, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    16b0:	038b      	lsls	r3, r1, #14
    16b2:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    16b4:	6263      	str	r3, [r4, #36]	; 0x24

	service->trise = _i2cms[i].trise;
    16b6:	0043      	lsls	r3, r0, #1
    16b8:	1818      	adds	r0, r3, r0
    16ba:	00c0      	lsls	r0, r0, #3
    16bc:	4b05      	ldr	r3, [pc, #20]	; (16d4 <_i2c_m_sync_init_impl+0x90>)
    16be:	1818      	adds	r0, r3, r0
    16c0:	8a43      	ldrh	r3, [r0, #18]
    16c2:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
    16c4:	2000      	movs	r0, #0
}
    16c6:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    16c8:	2011      	movs	r0, #17
    16ca:	4240      	negs	r0, r0
    16cc:	e7fb      	b.n	16c6 <_i2c_m_sync_init_impl+0x82>
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	00001605 	.word	0x00001605
    16d4:	000026b0 	.word	0x000026b0
    16d8:	ffffbfff 	.word	0xffffbfff

000016dc <_i2c_m_sync_init>:
{
    16dc:	b570      	push	{r4, r5, r6, lr}
    16de:	0004      	movs	r4, r0
    16e0:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
    16e2:	1e43      	subs	r3, r0, #1
    16e4:	4198      	sbcs	r0, r3
    16e6:	b2c0      	uxtb	r0, r0
    16e8:	22a2      	movs	r2, #162	; 0xa2
    16ea:	00d2      	lsls	r2, r2, #3
    16ec:	4904      	ldr	r1, [pc, #16]	; (1700 <_i2c_m_sync_init+0x24>)
    16ee:	4b05      	ldr	r3, [pc, #20]	; (1704 <_i2c_m_sync_init+0x28>)
    16f0:	4798      	blx	r3
	i2c_dev->hw = hw;
    16f2:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    16f4:	0029      	movs	r1, r5
    16f6:	0020      	movs	r0, r4
    16f8:	4b03      	ldr	r3, [pc, #12]	; (1708 <_i2c_m_sync_init+0x2c>)
    16fa:	4798      	blx	r3
}
    16fc:	bd70      	pop	{r4, r5, r6, pc}
    16fe:	46c0      	nop			; (mov r8, r8)
    1700:	00002704 	.word	0x00002704
    1704:	00000e29 	.word	0x00000e29
    1708:	00001645 	.word	0x00001645

0000170c <_i2c_m_sync_transfer>:
{
    170c:	b5f0      	push	{r4, r5, r6, r7, lr}
    170e:	46de      	mov	lr, fp
    1710:	464f      	mov	r7, r9
    1712:	4646      	mov	r6, r8
    1714:	b5c0      	push	{r6, r7, lr}
    1716:	b082      	sub	sp, #8
    1718:	0005      	movs	r5, r0
    171a:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
    171c:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    171e:	0006      	movs	r6, r0
    1720:	1e73      	subs	r3, r6, #1
    1722:	419e      	sbcs	r6, r3
    1724:	b2f3      	uxtb	r3, r6
    1726:	4fb6      	ldr	r7, [pc, #728]	; (1a00 <_i2c_m_sync_transfer+0x2f4>)
    1728:	4ab6      	ldr	r2, [pc, #728]	; (1a04 <_i2c_m_sync_transfer+0x2f8>)
    172a:	0039      	movs	r1, r7
    172c:	9301      	str	r3, [sp, #4]
    172e:	0018      	movs	r0, r3
    1730:	4eb5      	ldr	r6, [pc, #724]	; (1a08 <_i2c_m_sync_transfer+0x2fc>)
    1732:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    1734:	6928      	ldr	r0, [r5, #16]
    1736:	1e43      	subs	r3, r0, #1
    1738:	4198      	sbcs	r0, r3
    173a:	b2c0      	uxtb	r0, r0
    173c:	4ab3      	ldr	r2, [pc, #716]	; (1a0c <_i2c_m_sync_transfer+0x300>)
    173e:	0039      	movs	r1, r7
    1740:	47b0      	blx	r6
	ASSERT(msg);
    1742:	4640      	mov	r0, r8
    1744:	1e43      	subs	r3, r0, #1
    1746:	4198      	sbcs	r0, r3
    1748:	b2c0      	uxtb	r0, r0
    174a:	4ab1      	ldr	r2, [pc, #708]	; (1a10 <_i2c_m_sync_transfer+0x304>)
    174c:	0039      	movs	r1, r7
    174e:	47b0      	blx	r6
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1750:	886b      	ldrh	r3, [r5, #2]
    1752:	05da      	lsls	r2, r3, #23
    1754:	d500      	bpl.n	1758 <_i2c_m_sync_transfer+0x4c>
    1756:	e1e7      	b.n	1b28 <_i2c_m_sync_transfer+0x41c>
	msg->flags |= I2C_M_BUSY;
    1758:	4642      	mov	r2, r8
    175a:	8853      	ldrh	r3, [r2, #2]
    175c:	2280      	movs	r2, #128	; 0x80
    175e:	0052      	lsls	r2, r2, #1
    1760:	4313      	orrs	r3, r2
    1762:	4642      	mov	r2, r8
    1764:	8053      	strh	r3, [r2, #2]
	i2c_dev->service.msg = *msg;
    1766:	002a      	movs	r2, r5
    1768:	4641      	mov	r1, r8
    176a:	c9c1      	ldmia	r1!, {r0, r6, r7}
    176c:	c2c1      	stmia	r2!, {r0, r6, r7}
	void *             hw    = i2c_dev->hw;
    176e:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1770:	683a      	ldr	r2, [r7, #0]
    1772:	4691      	mov	r9, r2
	ASSERT(i2c_dev);
    1774:	4aa7      	ldr	r2, [pc, #668]	; (1a14 <_i2c_m_sync_transfer+0x308>)
    1776:	49a2      	ldr	r1, [pc, #648]	; (1a00 <_i2c_m_sync_transfer+0x2f4>)
    1778:	9801      	ldr	r0, [sp, #4]
    177a:	4ba3      	ldr	r3, [pc, #652]	; (1a08 <_i2c_m_sync_transfer+0x2fc>)
    177c:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    177e:	686b      	ldr	r3, [r5, #4]
    1780:	2b01      	cmp	r3, #1
    1782:	d051      	beq.n	1828 <_i2c_m_sync_transfer+0x11c>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1784:	2204      	movs	r2, #4
    1786:	69fb      	ldr	r3, [r7, #28]
    1788:	421a      	tst	r2, r3
    178a:	d1fc      	bne.n	1786 <_i2c_m_sync_transfer+0x7a>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	4aa2      	ldr	r2, [pc, #648]	; (1a18 <_i2c_m_sync_transfer+0x30c>)
    1790:	4013      	ands	r3, r2
    1792:	607b      	str	r3, [r7, #4]
	if (msg->addr & I2C_M_TEN) {
    1794:	882b      	ldrh	r3, [r5, #0]
    1796:	055a      	lsls	r2, r3, #21
    1798:	d553      	bpl.n	1842 <_i2c_m_sync_transfer+0x136>
		if (msg->flags & I2C_M_RD) {
    179a:	886a      	ldrh	r2, [r5, #2]
    179c:	07d2      	lsls	r2, r2, #31
    179e:	d504      	bpl.n	17aa <_i2c_m_sync_transfer+0x9e>
			msg->flags |= I2C_M_TEN;
    17a0:	886a      	ldrh	r2, [r5, #2]
    17a2:	2180      	movs	r1, #128	; 0x80
    17a4:	00c9      	lsls	r1, r1, #3
    17a6:	430a      	orrs	r2, r1
    17a8:	806a      	strh	r2, [r5, #2]
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    17aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    17ac:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    17ae:	499b      	ldr	r1, [pc, #620]	; (1a1c <_i2c_m_sync_transfer+0x310>)
    17b0:	400b      	ands	r3, r1
    17b2:	2180      	movs	r1, #128	; 0x80
    17b4:	01c9      	lsls	r1, r1, #7
    17b6:	4011      	ands	r1, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    17b8:	2280      	movs	r2, #128	; 0x80
    17ba:	0212      	lsls	r2, r2, #8
    17bc:	430a      	orrs	r2, r1
    17be:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    17c0:	627b      	str	r3, [r7, #36]	; 0x24
	void *   hw      = i2c_dev->hw;
    17c2:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    17c4:	7e0b      	ldrb	r3, [r1, #24]
    17c6:	b2db      	uxtb	r3, r3
    17c8:	4a95      	ldr	r2, [pc, #596]	; (1a20 <_i2c_m_sync_transfer+0x314>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    17ca:	2003      	movs	r0, #3
    17cc:	4218      	tst	r0, r3
    17ce:	d104      	bne.n	17da <_i2c_m_sync_transfer+0xce>
    17d0:	7e0b      	ldrb	r3, [r1, #24]
    17d2:	b2db      	uxtb	r3, r3
    17d4:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
    17d6:	2a00      	cmp	r2, #0
    17d8:	d1f8      	bne.n	17cc <_i2c_m_sync_transfer+0xc0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    17da:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    17dc:	2104      	movs	r1, #4
    17de:	69fa      	ldr	r2, [r7, #28]
    17e0:	4211      	tst	r1, r2
    17e2:	d1fc      	bne.n	17de <_i2c_m_sync_transfer+0xd2>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    17e4:	8b7a      	ldrh	r2, [r7, #26]
    17e6:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    17e8:	07d9      	lsls	r1, r3, #31
    17ea:	d400      	bmi.n	17ee <_i2c_m_sync_transfer+0xe2>
    17ec:	e08b      	b.n	1906 <_i2c_m_sync_transfer+0x1fa>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    17ee:	0793      	lsls	r3, r2, #30
    17f0:	d535      	bpl.n	185e <_i2c_m_sync_transfer+0x152>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    17f2:	2301      	movs	r3, #1
    17f4:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    17f6:	886b      	ldrh	r3, [r5, #2]
    17f8:	2180      	movs	r1, #128	; 0x80
    17fa:	0149      	lsls	r1, r1, #5
    17fc:	430b      	orrs	r3, r1
    17fe:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1800:	886b      	ldrh	r3, [r5, #2]
    1802:	4988      	ldr	r1, [pc, #544]	; (1a24 <_i2c_m_sync_transfer+0x318>)
    1804:	400b      	ands	r3, r1
    1806:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1808:	2001      	movs	r0, #1
    180a:	0003      	movs	r3, r0
    180c:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
    180e:	4258      	negs	r0, r3
    1810:	4158      	adcs	r0, r3
    1812:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1814:	886b      	ldrh	r3, [r5, #2]
    1816:	4a83      	ldr	r2, [pc, #524]	; (1a24 <_i2c_m_sync_transfer+0x318>)
    1818:	4013      	ands	r3, r2
    181a:	806b      	strh	r3, [r5, #2]
}
    181c:	b002      	add	sp, #8
    181e:	bc1c      	pop	{r2, r3, r4}
    1820:	4690      	mov	r8, r2
    1822:	4699      	mov	r9, r3
    1824:	46a3      	mov	fp, r4
    1826:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
    1828:	464b      	mov	r3, r9
    182a:	011b      	lsls	r3, r3, #4
    182c:	d5aa      	bpl.n	1784 <_i2c_m_sync_transfer+0x78>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    182e:	2204      	movs	r2, #4
    1830:	69fb      	ldr	r3, [r7, #28]
    1832:	421a      	tst	r2, r3
    1834:	d1fc      	bne.n	1830 <_i2c_m_sync_transfer+0x124>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1836:	687a      	ldr	r2, [r7, #4]
    1838:	2380      	movs	r3, #128	; 0x80
    183a:	02db      	lsls	r3, r3, #11
    183c:	4313      	orrs	r3, r2
    183e:	607b      	str	r3, [r7, #4]
    1840:	e7a8      	b.n	1794 <_i2c_m_sync_transfer+0x88>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    1842:	8868      	ldrh	r0, [r5, #2]
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1844:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1846:	005b      	lsls	r3, r3, #1
    1848:	22ff      	movs	r2, #255	; 0xff
    184a:	4013      	ands	r3, r2
    184c:	3afe      	subs	r2, #254	; 0xfe
    184e:	4002      	ands	r2, r0
    1850:	4313      	orrs	r3, r2
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1852:	2280      	movs	r2, #128	; 0x80
    1854:	01d2      	lsls	r2, r2, #7
    1856:	400a      	ands	r2, r1
		hri_sercomi2cm_write_ADDR_reg(hw,
    1858:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    185a:	627b      	str	r3, [r7, #36]	; 0x24
    185c:	e7b1      	b.n	17c2 <_i2c_m_sync_transfer+0xb6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    185e:	0753      	lsls	r3, r2, #29
    1860:	d40e      	bmi.n	1880 <_i2c_m_sync_transfer+0x174>
			if (msg->flags & I2C_M_TEN) {
    1862:	886b      	ldrh	r3, [r5, #2]
    1864:	055b      	lsls	r3, r3, #21
    1866:	d428      	bmi.n	18ba <_i2c_m_sync_transfer+0x1ae>
			if (msg->len == 0) {
    1868:	686b      	ldr	r3, [r5, #4]
    186a:	2b00      	cmp	r3, #0
    186c:	d140      	bne.n	18f0 <_i2c_m_sync_transfer+0x1e4>
				if (msg->flags & I2C_M_STOP) {
    186e:	886b      	ldrh	r3, [r5, #2]
    1870:	b21b      	sxth	r3, r3
    1872:	2b00      	cmp	r3, #0
    1874:	db32      	blt.n	18dc <_i2c_m_sync_transfer+0x1d0>
				msg->flags &= ~I2C_M_BUSY;
    1876:	886b      	ldrh	r3, [r5, #2]
    1878:	4a6a      	ldr	r2, [pc, #424]	; (1a24 <_i2c_m_sync_transfer+0x318>)
    187a:	4013      	ands	r3, r2
    187c:	806b      	strh	r3, [r5, #2]
    187e:	e06e      	b.n	195e <_i2c_m_sync_transfer+0x252>
				if (msg->len > 0) {
    1880:	686b      	ldr	r3, [r5, #4]
    1882:	2b00      	cmp	r3, #0
    1884:	dd04      	ble.n	1890 <_i2c_m_sync_transfer+0x184>
					msg->flags |= I2C_M_FAIL;
    1886:	886b      	ldrh	r3, [r5, #2]
    1888:	2280      	movs	r2, #128	; 0x80
    188a:	0152      	lsls	r2, r2, #5
    188c:	4313      	orrs	r3, r2
    188e:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1890:	886b      	ldrh	r3, [r5, #2]
    1892:	b21b      	sxth	r3, r3
    1894:	2b00      	cmp	r3, #0
    1896:	db06      	blt.n	18a6 <_i2c_m_sync_transfer+0x19a>
				msg->flags &= ~I2C_M_BUSY;
    1898:	886b      	ldrh	r3, [r5, #2]
    189a:	4a62      	ldr	r2, [pc, #392]	; (1a24 <_i2c_m_sync_transfer+0x318>)
    189c:	4013      	ands	r3, r2
    189e:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    18a0:	2002      	movs	r0, #2
    18a2:	4240      	negs	r0, r0
    18a4:	e7b6      	b.n	1814 <_i2c_m_sync_transfer+0x108>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    18a6:	2304      	movs	r3, #4
    18a8:	69fa      	ldr	r2, [r7, #28]
    18aa:	4213      	tst	r3, r2
    18ac:	d1fc      	bne.n	18a8 <_i2c_m_sync_transfer+0x19c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    18ae:	687a      	ldr	r2, [r7, #4]
    18b0:	23c0      	movs	r3, #192	; 0xc0
    18b2:	029b      	lsls	r3, r3, #10
    18b4:	4313      	orrs	r3, r2
    18b6:	607b      	str	r3, [r7, #4]
    18b8:	e7ee      	b.n	1898 <_i2c_m_sync_transfer+0x18c>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    18ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    18bc:	882b      	ldrh	r3, [r5, #0]
    18be:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    18c0:	2106      	movs	r1, #6
    18c2:	400b      	ands	r3, r1
    18c4:	2180      	movs	r1, #128	; 0x80
    18c6:	01c9      	lsls	r1, r1, #7
    18c8:	400a      	ands	r2, r1
				hri_sercomi2cm_write_ADDR_reg(hw,
    18ca:	21f1      	movs	r1, #241	; 0xf1
    18cc:	430a      	orrs	r2, r1
    18ce:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    18d0:	627b      	str	r3, [r7, #36]	; 0x24
				msg->flags &= ~I2C_M_TEN;
    18d2:	886b      	ldrh	r3, [r5, #2]
    18d4:	4a54      	ldr	r2, [pc, #336]	; (1a28 <_i2c_m_sync_transfer+0x31c>)
    18d6:	4013      	ands	r3, r2
    18d8:	806b      	strh	r3, [r5, #2]
    18da:	e040      	b.n	195e <_i2c_m_sync_transfer+0x252>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    18dc:	2204      	movs	r2, #4
    18de:	69fb      	ldr	r3, [r7, #28]
    18e0:	421a      	tst	r2, r3
    18e2:	d1fc      	bne.n	18de <_i2c_m_sync_transfer+0x1d2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    18e4:	687a      	ldr	r2, [r7, #4]
    18e6:	23c0      	movs	r3, #192	; 0xc0
    18e8:	029b      	lsls	r3, r3, #10
    18ea:	4313      	orrs	r3, r2
    18ec:	607b      	str	r3, [r7, #4]
    18ee:	e7c2      	b.n	1876 <_i2c_m_sync_transfer+0x16a>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    18f0:	68ab      	ldr	r3, [r5, #8]
    18f2:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    18f4:	2328      	movs	r3, #40	; 0x28
    18f6:	54fa      	strb	r2, [r7, r3]
				msg->buffer++;
    18f8:	68ab      	ldr	r3, [r5, #8]
    18fa:	3301      	adds	r3, #1
    18fc:	60ab      	str	r3, [r5, #8]
				msg->len--;
    18fe:	686b      	ldr	r3, [r5, #4]
    1900:	3b01      	subs	r3, #1
    1902:	606b      	str	r3, [r5, #4]
    1904:	e02b      	b.n	195e <_i2c_m_sync_transfer+0x252>
	} else if (flags & SB_FLAG) {
    1906:	079b      	lsls	r3, r3, #30
    1908:	d529      	bpl.n	195e <_i2c_m_sync_transfer+0x252>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    190a:	686b      	ldr	r3, [r5, #4]
    190c:	2b00      	cmp	r3, #0
    190e:	d03a      	beq.n	1986 <_i2c_m_sync_transfer+0x27a>
    1910:	0752      	lsls	r2, r2, #29
    1912:	d438      	bmi.n	1986 <_i2c_m_sync_transfer+0x27a>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1914:	0136      	lsls	r6, r6, #4
    1916:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
    1918:	3b01      	subs	r3, #1
    191a:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    191c:	2b00      	cmp	r3, #0
    191e:	d000      	beq.n	1922 <_i2c_m_sync_transfer+0x216>
    1920:	e105      	b.n	1b2e <_i2c_m_sync_transfer+0x422>
    1922:	2e00      	cmp	r6, #0
    1924:	d10b      	bne.n	193e <_i2c_m_sync_transfer+0x232>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1926:	2204      	movs	r2, #4
    1928:	69fb      	ldr	r3, [r7, #28]
    192a:	421a      	tst	r2, r3
    192c:	d1fc      	bne.n	1928 <_i2c_m_sync_transfer+0x21c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    192e:	687a      	ldr	r2, [r7, #4]
    1930:	2380      	movs	r3, #128	; 0x80
    1932:	02db      	lsls	r3, r3, #11
    1934:	4313      	orrs	r3, r2
    1936:	607b      	str	r3, [r7, #4]
			if (msg->len == 0) {
    1938:	686b      	ldr	r3, [r5, #4]
    193a:	2b00      	cmp	r3, #0
    193c:	d107      	bne.n	194e <_i2c_m_sync_transfer+0x242>
				if (msg->flags & I2C_M_STOP) {
    193e:	886b      	ldrh	r3, [r5, #2]
    1940:	b21b      	sxth	r3, r3
    1942:	2b00      	cmp	r3, #0
    1944:	db15      	blt.n	1972 <_i2c_m_sync_transfer+0x266>
				msg->flags &= ~I2C_M_BUSY;
    1946:	886b      	ldrh	r3, [r5, #2]
    1948:	4a36      	ldr	r2, [pc, #216]	; (1a24 <_i2c_m_sync_transfer+0x318>)
    194a:	4013      	ands	r3, r2
    194c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    194e:	68ab      	ldr	r3, [r5, #8]
    1950:	1c5a      	adds	r2, r3, #1
    1952:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1954:	2228      	movs	r2, #40	; 0x28
    1956:	5cba      	ldrb	r2, [r7, r2]
    1958:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    195a:	2302      	movs	r3, #2
    195c:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    195e:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1960:	2380      	movs	r3, #128	; 0x80
    1962:	005b      	lsls	r3, r3, #1
    1964:	469b      	mov	fp, r3
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1966:	2203      	movs	r2, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1968:	2104      	movs	r1, #4
	if (flags & MB_FLAG) {
    196a:	3bff      	subs	r3, #255	; 0xff
    196c:	4699      	mov	r9, r3
	} else if (flags & SB_FLAG) {
    196e:	2602      	movs	r6, #2
    1970:	e0b0      	b.n	1ad4 <_i2c_m_sync_transfer+0x3c8>
    1972:	2204      	movs	r2, #4
    1974:	69fb      	ldr	r3, [r7, #28]
    1976:	421a      	tst	r2, r3
    1978:	d1fc      	bne.n	1974 <_i2c_m_sync_transfer+0x268>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    197a:	687a      	ldr	r2, [r7, #4]
    197c:	23c0      	movs	r3, #192	; 0xc0
    197e:	029b      	lsls	r3, r3, #10
    1980:	4313      	orrs	r3, r2
    1982:	607b      	str	r3, [r7, #4]
    1984:	e7df      	b.n	1946 <_i2c_m_sync_transfer+0x23a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1986:	2302      	movs	r3, #2
    1988:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    198a:	2002      	movs	r0, #2
    198c:	4240      	negs	r0, r0
    198e:	e741      	b.n	1814 <_i2c_m_sync_transfer+0x108>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1990:	2204      	movs	r2, #4
    1992:	69e3      	ldr	r3, [r4, #28]
    1994:	421a      	tst	r2, r3
    1996:	d1fc      	bne.n	1992 <_i2c_m_sync_transfer+0x286>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1998:	6862      	ldr	r2, [r4, #4]
    199a:	23c0      	movs	r3, #192	; 0xc0
    199c:	029b      	lsls	r3, r3, #10
    199e:	4313      	orrs	r3, r2
    19a0:	6063      	str	r3, [r4, #4]
    19a2:	e0ad      	b.n	1b00 <_i2c_m_sync_transfer+0x3f4>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    19a4:	4239      	tst	r1, r7
    19a6:	d10f      	bne.n	19c8 <_i2c_m_sync_transfer+0x2bc>
			if (msg->flags & I2C_M_TEN) {
    19a8:	886b      	ldrh	r3, [r5, #2]
    19aa:	055b      	lsls	r3, r3, #21
    19ac:	d43e      	bmi.n	1a2c <_i2c_m_sync_transfer+0x320>
			if (msg->len == 0) {
    19ae:	686b      	ldr	r3, [r5, #4]
    19b0:	2b00      	cmp	r3, #0
    19b2:	d156      	bne.n	1a62 <_i2c_m_sync_transfer+0x356>
				if (msg->flags & I2C_M_STOP) {
    19b4:	886b      	ldrh	r3, [r5, #2]
    19b6:	b21b      	sxth	r3, r3
    19b8:	2b00      	cmp	r3, #0
    19ba:	db49      	blt.n	1a50 <_i2c_m_sync_transfer+0x344>
				msg->flags &= ~I2C_M_BUSY;
    19bc:	886b      	ldrh	r3, [r5, #2]
    19be:	4819      	ldr	r0, [pc, #100]	; (1a24 <_i2c_m_sync_transfer+0x318>)
    19c0:	4003      	ands	r3, r0
    19c2:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    19c4:	2000      	movs	r0, #0
    19c6:	e085      	b.n	1ad4 <_i2c_m_sync_transfer+0x3c8>
				if (msg->len > 0) {
    19c8:	686b      	ldr	r3, [r5, #4]
    19ca:	2b00      	cmp	r3, #0
    19cc:	dd04      	ble.n	19d8 <_i2c_m_sync_transfer+0x2cc>
					msg->flags |= I2C_M_FAIL;
    19ce:	886b      	ldrh	r3, [r5, #2]
    19d0:	2080      	movs	r0, #128	; 0x80
    19d2:	0140      	lsls	r0, r0, #5
    19d4:	4303      	orrs	r3, r0
    19d6:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    19d8:	886b      	ldrh	r3, [r5, #2]
    19da:	b21b      	sxth	r3, r3
    19dc:	2b00      	cmp	r3, #0
    19de:	db05      	blt.n	19ec <_i2c_m_sync_transfer+0x2e0>
				msg->flags &= ~I2C_M_BUSY;
    19e0:	886b      	ldrh	r3, [r5, #2]
    19e2:	4810      	ldr	r0, [pc, #64]	; (1a24 <_i2c_m_sync_transfer+0x318>)
    19e4:	4003      	ands	r3, r0
    19e6:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    19e8:	30ff      	adds	r0, #255	; 0xff
    19ea:	e073      	b.n	1ad4 <_i2c_m_sync_transfer+0x3c8>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    19ec:	69e3      	ldr	r3, [r4, #28]
    19ee:	4219      	tst	r1, r3
    19f0:	d1fc      	bne.n	19ec <_i2c_m_sync_transfer+0x2e0>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    19f2:	6860      	ldr	r0, [r4, #4]
    19f4:	23c0      	movs	r3, #192	; 0xc0
    19f6:	029b      	lsls	r3, r3, #10
    19f8:	4303      	orrs	r3, r0
    19fa:	6063      	str	r3, [r4, #4]
    19fc:	e7f0      	b.n	19e0 <_i2c_m_sync_transfer+0x2d4>
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	00002704 	.word	0x00002704
    1a04:	000005ca 	.word	0x000005ca
    1a08:	00000e29 	.word	0x00000e29
    1a0c:	000005cb 	.word	0x000005cb
    1a10:	000005cc 	.word	0x000005cc
    1a14:	0000059f 	.word	0x0000059f
    1a18:	fffbffff 	.word	0xfffbffff
    1a1c:	000007fe 	.word	0x000007fe
    1a20:	0000ffff 	.word	0x0000ffff
    1a24:	fffffeff 	.word	0xfffffeff
    1a28:	fffffbff 	.word	0xfffffbff
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1a2e:	8828      	ldrh	r0, [r5, #0]
    1a30:	09c0      	lsrs	r0, r0, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1a32:	2706      	movs	r7, #6
    1a34:	4038      	ands	r0, r7
    1a36:	2780      	movs	r7, #128	; 0x80
    1a38:	01ff      	lsls	r7, r7, #7
    1a3a:	403b      	ands	r3, r7
				hri_sercomi2cm_write_ADDR_reg(hw,
    1a3c:	27f1      	movs	r7, #241	; 0xf1
    1a3e:	433b      	orrs	r3, r7
    1a40:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1a42:	6263      	str	r3, [r4, #36]	; 0x24
				msg->flags &= ~I2C_M_TEN;
    1a44:	886b      	ldrh	r3, [r5, #2]
    1a46:	484e      	ldr	r0, [pc, #312]	; (1b80 <_i2c_m_sync_transfer+0x474>)
    1a48:	4003      	ands	r3, r0
    1a4a:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1a4c:	2000      	movs	r0, #0
    1a4e:	e041      	b.n	1ad4 <_i2c_m_sync_transfer+0x3c8>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a50:	69e3      	ldr	r3, [r4, #28]
    1a52:	4219      	tst	r1, r3
    1a54:	d1fc      	bne.n	1a50 <_i2c_m_sync_transfer+0x344>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1a56:	6860      	ldr	r0, [r4, #4]
    1a58:	23c0      	movs	r3, #192	; 0xc0
    1a5a:	029b      	lsls	r3, r3, #10
    1a5c:	4303      	orrs	r3, r0
    1a5e:	6063      	str	r3, [r4, #4]
    1a60:	e7ac      	b.n	19bc <_i2c_m_sync_transfer+0x2b0>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1a62:	68ab      	ldr	r3, [r5, #8]
    1a64:	7818      	ldrb	r0, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1a66:	2328      	movs	r3, #40	; 0x28
    1a68:	54e0      	strb	r0, [r4, r3]
				msg->buffer++;
    1a6a:	68ab      	ldr	r3, [r5, #8]
    1a6c:	3301      	adds	r3, #1
    1a6e:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1a70:	686b      	ldr	r3, [r5, #4]
    1a72:	3b01      	subs	r3, #1
    1a74:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1a76:	2000      	movs	r0, #0
    1a78:	e02c      	b.n	1ad4 <_i2c_m_sync_transfer+0x3c8>
	return I2C_OK;
    1a7a:	2000      	movs	r0, #0
	} else if (flags & SB_FLAG) {
    1a7c:	421e      	tst	r6, r3
    1a7e:	d029      	beq.n	1ad4 <_i2c_m_sync_transfer+0x3c8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1a80:	686b      	ldr	r3, [r5, #4]
    1a82:	2b00      	cmp	r3, #0
    1a84:	d04c      	beq.n	1b20 <_i2c_m_sync_transfer+0x414>
    1a86:	4239      	tst	r1, r7
    1a88:	d14a      	bne.n	1b20 <_i2c_m_sync_transfer+0x414>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1a8a:	4660      	mov	r0, ip
    1a8c:	0ec0      	lsrs	r0, r0, #27
    1a8e:	464f      	mov	r7, r9
    1a90:	4038      	ands	r0, r7
			msg->len--;
    1a92:	3b01      	subs	r3, #1
    1a94:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1a96:	2b00      	cmp	r3, #0
    1a98:	d16d      	bne.n	1b76 <_i2c_m_sync_transfer+0x46a>
    1a9a:	2800      	cmp	r0, #0
    1a9c:	d10a      	bne.n	1ab4 <_i2c_m_sync_transfer+0x3a8>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a9e:	69e3      	ldr	r3, [r4, #28]
    1aa0:	4219      	tst	r1, r3
    1aa2:	d1fc      	bne.n	1a9e <_i2c_m_sync_transfer+0x392>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1aa4:	6863      	ldr	r3, [r4, #4]
    1aa6:	2080      	movs	r0, #128	; 0x80
    1aa8:	02c0      	lsls	r0, r0, #11
    1aaa:	4303      	orrs	r3, r0
    1aac:	6063      	str	r3, [r4, #4]
			if (msg->len == 0) {
    1aae:	686b      	ldr	r3, [r5, #4]
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d107      	bne.n	1ac4 <_i2c_m_sync_transfer+0x3b8>
				if (msg->flags & I2C_M_STOP) {
    1ab4:	886b      	ldrh	r3, [r5, #2]
    1ab6:	b21b      	sxth	r3, r3
    1ab8:	2b00      	cmp	r3, #0
    1aba:	db28      	blt.n	1b0e <_i2c_m_sync_transfer+0x402>
				msg->flags &= ~I2C_M_BUSY;
    1abc:	886b      	ldrh	r3, [r5, #2]
    1abe:	4831      	ldr	r0, [pc, #196]	; (1b84 <_i2c_m_sync_transfer+0x478>)
    1ac0:	4003      	ands	r3, r0
    1ac2:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1ac4:	68ab      	ldr	r3, [r5, #8]
    1ac6:	1c58      	adds	r0, r3, #1
    1ac8:	60a8      	str	r0, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1aca:	2028      	movs	r0, #40	; 0x28
    1acc:	5c20      	ldrb	r0, [r4, r0]
    1ace:	7018      	strb	r0, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1ad0:	7626      	strb	r6, [r4, #24]
	return I2C_OK;
    1ad2:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1ad4:	886b      	ldrh	r3, [r5, #2]
    1ad6:	465f      	mov	r7, fp
    1ad8:	423b      	tst	r3, r7
    1ada:	d100      	bne.n	1ade <_i2c_m_sync_transfer+0x3d2>
    1adc:	e69e      	b.n	181c <_i2c_m_sync_transfer+0x110>
	void *   hw      = i2c_dev->hw;
    1ade:	692f      	ldr	r7, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1ae0:	7e3b      	ldrb	r3, [r7, #24]
    1ae2:	b2db      	uxtb	r3, r3
    1ae4:	4828      	ldr	r0, [pc, #160]	; (1b88 <_i2c_m_sync_transfer+0x47c>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1ae6:	421a      	tst	r2, r3
    1ae8:	d128      	bne.n	1b3c <_i2c_m_sync_transfer+0x430>
    1aea:	7e3b      	ldrb	r3, [r7, #24]
    1aec:	b2db      	uxtb	r3, r3
    1aee:	3801      	subs	r0, #1
		if (timeout-- == 0) {
    1af0:	2800      	cmp	r0, #0
    1af2:	d1f8      	bne.n	1ae6 <_i2c_m_sync_transfer+0x3da>
			if (msg->flags & I2C_M_STOP) {
    1af4:	4643      	mov	r3, r8
    1af6:	885b      	ldrh	r3, [r3, #2]
    1af8:	b21b      	sxth	r3, r3
    1afa:	2b00      	cmp	r3, #0
    1afc:	da00      	bge.n	1b00 <_i2c_m_sync_transfer+0x3f4>
    1afe:	e747      	b.n	1990 <_i2c_m_sync_transfer+0x284>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1b00:	886b      	ldrh	r3, [r5, #2]
    1b02:	4a20      	ldr	r2, [pc, #128]	; (1b84 <_i2c_m_sync_transfer+0x478>)
    1b04:	4013      	ands	r3, r2
    1b06:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    1b08:	2005      	movs	r0, #5
    1b0a:	4240      	negs	r0, r0
			return ret;
    1b0c:	e686      	b.n	181c <_i2c_m_sync_transfer+0x110>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1b0e:	69e3      	ldr	r3, [r4, #28]
    1b10:	4219      	tst	r1, r3
    1b12:	d1fc      	bne.n	1b0e <_i2c_m_sync_transfer+0x402>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1b14:	6860      	ldr	r0, [r4, #4]
    1b16:	23c0      	movs	r3, #192	; 0xc0
    1b18:	029b      	lsls	r3, r3, #10
    1b1a:	4303      	orrs	r3, r0
    1b1c:	6063      	str	r3, [r4, #4]
    1b1e:	e7cd      	b.n	1abc <_i2c_m_sync_transfer+0x3b0>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1b20:	7626      	strb	r6, [r4, #24]
			return I2C_NACK;
    1b22:	2002      	movs	r0, #2
    1b24:	4240      	negs	r0, r0
    1b26:	e7d5      	b.n	1ad4 <_i2c_m_sync_transfer+0x3c8>
		return I2C_ERR_BUSY;
    1b28:	2006      	movs	r0, #6
    1b2a:	4240      	negs	r0, r0
    1b2c:	e676      	b.n	181c <_i2c_m_sync_transfer+0x110>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1b2e:	2b01      	cmp	r3, #1
    1b30:	d000      	beq.n	1b34 <_i2c_m_sync_transfer+0x428>
    1b32:	e70c      	b.n	194e <_i2c_m_sync_transfer+0x242>
    1b34:	2e00      	cmp	r6, #0
    1b36:	d100      	bne.n	1b3a <_i2c_m_sync_transfer+0x42e>
    1b38:	e709      	b.n	194e <_i2c_m_sync_transfer+0x242>
    1b3a:	e6f4      	b.n	1926 <_i2c_m_sync_transfer+0x21a>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1b3c:	6820      	ldr	r0, [r4, #0]
    1b3e:	4684      	mov	ip, r0
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1b40:	69e0      	ldr	r0, [r4, #28]
    1b42:	4201      	tst	r1, r0
    1b44:	d1fc      	bne.n	1b40 <_i2c_m_sync_transfer+0x434>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1b46:	8b67      	ldrh	r7, [r4, #26]
    1b48:	b2bf      	uxth	r7, r7
	if (flags & MB_FLAG) {
    1b4a:	4648      	mov	r0, r9
    1b4c:	4218      	tst	r0, r3
    1b4e:	d094      	beq.n	1a7a <_i2c_m_sync_transfer+0x36e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1b50:	423e      	tst	r6, r7
    1b52:	d100      	bne.n	1b56 <_i2c_m_sync_transfer+0x44a>
    1b54:	e726      	b.n	19a4 <_i2c_m_sync_transfer+0x298>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1b56:	7620      	strb	r0, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1b58:	886b      	ldrh	r3, [r5, #2]
    1b5a:	2080      	movs	r0, #128	; 0x80
    1b5c:	0140      	lsls	r0, r0, #5
    1b5e:	4303      	orrs	r3, r0
    1b60:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1b62:	886b      	ldrh	r3, [r5, #2]
    1b64:	4807      	ldr	r0, [pc, #28]	; (1b84 <_i2c_m_sync_transfer+0x478>)
    1b66:	4003      	ands	r3, r0
    1b68:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1b6a:	464b      	mov	r3, r9
    1b6c:	401f      	ands	r7, r3
			return I2C_ERR_BAD_ADDRESS;
    1b6e:	4278      	negs	r0, r7
    1b70:	4178      	adcs	r0, r7
    1b72:	3805      	subs	r0, #5
    1b74:	e7ae      	b.n	1ad4 <_i2c_m_sync_transfer+0x3c8>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1b76:	2b01      	cmp	r3, #1
    1b78:	d1a4      	bne.n	1ac4 <_i2c_m_sync_transfer+0x3b8>
    1b7a:	2800      	cmp	r0, #0
    1b7c:	d0a2      	beq.n	1ac4 <_i2c_m_sync_transfer+0x3b8>
    1b7e:	e78e      	b.n	1a9e <_i2c_m_sync_transfer+0x392>
    1b80:	fffffbff 	.word	0xfffffbff
    1b84:	fffffeff 	.word	0xfffffeff
    1b88:	0000ffff 	.word	0x0000ffff

00001b8c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1b8c:	b570      	push	{r4, r5, r6, lr}
    1b8e:	0006      	movs	r6, r0
    1b90:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1b92:	4b63      	ldr	r3, [pc, #396]	; (1d20 <_spi_m_sync_init+0x194>)
    1b94:	18cb      	adds	r3, r1, r3
    1b96:	0a9b      	lsrs	r3, r3, #10
    1b98:	b2db      	uxtb	r3, r3
		if (sercomspi_regs[i].n == n) {
    1b9a:	2b01      	cmp	r3, #1
    1b9c:	d100      	bne.n	1ba0 <_spi_m_sync_init+0x14>
    1b9e:	e071      	b.n	1c84 <_spi_m_sync_init+0xf8>
    1ba0:	2b02      	cmp	r3, #2
    1ba2:	d008      	beq.n	1bb6 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1ba4:	2800      	cmp	r0, #0
    1ba6:	d100      	bne.n	1baa <_spi_m_sync_init+0x1e>
    1ba8:	e0aa      	b.n	1d00 <_spi_m_sync_init+0x174>
    1baa:	2900      	cmp	r1, #0
    1bac:	d000      	beq.n	1bb0 <_spi_m_sync_init+0x24>
    1bae:	e0af      	b.n	1d10 <_spi_m_sync_init+0x184>
	return NULL;
    1bb0:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    1bb2:	2000      	movs	r0, #0
    1bb4:	e00a      	b.n	1bcc <_spi_m_sync_init+0x40>
		if (sercomspi_regs[i].n == n) {
    1bb6:	3b01      	subs	r3, #1
			return &sercomspi_regs[i];
    1bb8:	011d      	lsls	r5, r3, #4
    1bba:	18eb      	adds	r3, r5, r3
    1bbc:	4d59      	ldr	r5, [pc, #356]	; (1d24 <_spi_m_sync_init+0x198>)
    1bbe:	3530      	adds	r5, #48	; 0x30
    1bc0:	18ed      	adds	r5, r5, r3
	ASSERT(dev && hw);
    1bc2:	2e00      	cmp	r6, #0
    1bc4:	d0f5      	beq.n	1bb2 <_spi_m_sync_init+0x26>
    1bc6:	2001      	movs	r0, #1
    1bc8:	2c00      	cmp	r4, #0
    1bca:	d0f2      	beq.n	1bb2 <_spi_m_sync_init+0x26>
    1bcc:	4a56      	ldr	r2, [pc, #344]	; (1d28 <_spi_m_sync_init+0x19c>)
    1bce:	4957      	ldr	r1, [pc, #348]	; (1d2c <_spi_m_sync_init+0x1a0>)
    1bd0:	4b57      	ldr	r3, [pc, #348]	; (1d30 <_spi_m_sync_init+0x1a4>)
    1bd2:	4798      	blx	r3

	if (regs == NULL) {
    1bd4:	2d00      	cmp	r5, #0
    1bd6:	d100      	bne.n	1bda <_spi_m_sync_init+0x4e>
    1bd8:	e08c      	b.n	1cf4 <_spi_m_sync_init+0x168>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1bda:	2201      	movs	r2, #1
    1bdc:	69e3      	ldr	r3, [r4, #28]
    1bde:	421a      	tst	r2, r3
    1be0:	d1fc      	bne.n	1bdc <_spi_m_sync_init+0x50>
    1be2:	2203      	movs	r2, #3
    1be4:	69e3      	ldr	r3, [r4, #28]
    1be6:	421a      	tst	r2, r3
    1be8:	d1fc      	bne.n	1be4 <_spi_m_sync_init+0x58>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1bea:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	if (hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1bec:	079b      	lsls	r3, r3, #30
    1bee:	d500      	bpl.n	1bf2 <_spi_m_sync_init+0x66>
    1bf0:	e083      	b.n	1cfa <_spi_m_sync_init+0x16e>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1bf2:	2201      	movs	r2, #1
    1bf4:	69e3      	ldr	r3, [r4, #28]
    1bf6:	421a      	tst	r2, r3
    1bf8:	d1fc      	bne.n	1bf4 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    1bfa:	6823      	ldr	r3, [r4, #0]
    1bfc:	2201      	movs	r2, #1
    1bfe:	4313      	orrs	r3, r2
    1c00:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1c02:	69e3      	ldr	r3, [r4, #28]
    1c04:	421a      	tst	r2, r3
    1c06:	d1fc      	bne.n	1c02 <_spi_m_sync_init+0x76>
		return ERR_DENIED;
	}
	hri_sercomspi_set_CTRLA_SWRST_bit(hw);
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	dev->prvt = hw;
    1c08:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1c0a:	782b      	ldrb	r3, [r5, #0]
    1c0c:	221c      	movs	r2, #28
    1c0e:	4013      	ands	r3, r2
    1c10:	2b08      	cmp	r3, #8
    1c12:	d039      	beq.n	1c88 <_spi_m_sync_init+0xfc>
	ASSERT(hw && regs);
    1c14:	0020      	movs	r0, r4
    1c16:	1e43      	subs	r3, r0, #1
    1c18:	4198      	sbcs	r0, r3
    1c1a:	b2c0      	uxtb	r0, r0
    1c1c:	4a45      	ldr	r2, [pc, #276]	; (1d34 <_spi_m_sync_init+0x1a8>)
    1c1e:	4943      	ldr	r1, [pc, #268]	; (1d2c <_spi_m_sync_init+0x1a0>)
    1c20:	4b43      	ldr	r3, [pc, #268]	; (1d30 <_spi_m_sync_init+0x1a4>)
    1c22:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1c24:	782b      	ldrb	r3, [r5, #0]
    1c26:	786a      	ldrb	r2, [r5, #1]
    1c28:	0212      	lsls	r2, r2, #8
    1c2a:	431a      	orrs	r2, r3
    1c2c:	78ab      	ldrb	r3, [r5, #2]
    1c2e:	041b      	lsls	r3, r3, #16
    1c30:	431a      	orrs	r2, r3
    1c32:	78eb      	ldrb	r3, [r5, #3]
    1c34:	061b      	lsls	r3, r3, #24
    1c36:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1c38:	4a3f      	ldr	r2, [pc, #252]	; (1d38 <_spi_m_sync_init+0x1ac>)
    1c3a:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1c3c:	6023      	str	r3, [r4, #0]
	    (regs->ctrlb
    1c3e:	792b      	ldrb	r3, [r5, #4]
    1c40:	796a      	ldrb	r2, [r5, #5]
    1c42:	0212      	lsls	r2, r2, #8
    1c44:	431a      	orrs	r2, r3
    1c46:	79ab      	ldrb	r3, [r5, #6]
    1c48:	041b      	lsls	r3, r3, #16
    1c4a:	431a      	orrs	r2, r3
    1c4c:	79eb      	ldrb	r3, [r5, #7]
    1c4e:	061b      	lsls	r3, r3, #24
    1c50:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    1c52:	4a3a      	ldr	r2, [pc, #232]	; (1d3c <_spi_m_sync_init+0x1b0>)
    1c54:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    1c56:	2280      	movs	r2, #128	; 0x80
    1c58:	0292      	lsls	r2, r2, #10
    1c5a:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1c5c:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1c5e:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1c60:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1c62:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1c64:	2330      	movs	r3, #48	; 0x30
    1c66:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1c68:	792b      	ldrb	r3, [r5, #4]
    1c6a:	2207      	movs	r2, #7
    1c6c:	4013      	ands	r3, r2
    1c6e:	1e5a      	subs	r2, r3, #1
    1c70:	4193      	sbcs	r3, r2
    1c72:	3301      	adds	r3, #1
    1c74:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    1c76:	7baa      	ldrb	r2, [r5, #14]
    1c78:	7beb      	ldrb	r3, [r5, #15]
    1c7a:	021b      	lsls	r3, r3, #8
    1c7c:	4313      	orrs	r3, r2
    1c7e:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1c80:	2000      	movs	r0, #0
}
    1c82:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    1c84:	2300      	movs	r3, #0
    1c86:	e797      	b.n	1bb8 <_spi_m_sync_init+0x2c>
	ASSERT(hw && regs);
    1c88:	0020      	movs	r0, r4
    1c8a:	1e43      	subs	r3, r0, #1
    1c8c:	4198      	sbcs	r0, r3
    1c8e:	b2c0      	uxtb	r0, r0
    1c90:	4a2b      	ldr	r2, [pc, #172]	; (1d40 <_spi_m_sync_init+0x1b4>)
    1c92:	4926      	ldr	r1, [pc, #152]	; (1d2c <_spi_m_sync_init+0x1a0>)
    1c94:	4b26      	ldr	r3, [pc, #152]	; (1d30 <_spi_m_sync_init+0x1a4>)
    1c96:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1c98:	782b      	ldrb	r3, [r5, #0]
    1c9a:	786a      	ldrb	r2, [r5, #1]
    1c9c:	0212      	lsls	r2, r2, #8
    1c9e:	431a      	orrs	r2, r3
    1ca0:	78ab      	ldrb	r3, [r5, #2]
    1ca2:	041b      	lsls	r3, r3, #16
    1ca4:	431a      	orrs	r2, r3
    1ca6:	78eb      	ldrb	r3, [r5, #3]
    1ca8:	061b      	lsls	r3, r3, #24
    1caa:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1cac:	4a22      	ldr	r2, [pc, #136]	; (1d38 <_spi_m_sync_init+0x1ac>)
    1cae:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1cb0:	6023      	str	r3, [r4, #0]
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1cb2:	792b      	ldrb	r3, [r5, #4]
    1cb4:	796a      	ldrb	r2, [r5, #5]
    1cb6:	0212      	lsls	r2, r2, #8
    1cb8:	431a      	orrs	r2, r3
    1cba:	79ab      	ldrb	r3, [r5, #6]
    1cbc:	041b      	lsls	r3, r3, #16
    1cbe:	431a      	orrs	r2, r3
    1cc0:	79eb      	ldrb	r3, [r5, #7]
    1cc2:	061b      	lsls	r3, r3, #24
    1cc4:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1cc6:	4a1f      	ldr	r2, [pc, #124]	; (1d44 <_spi_m_sync_init+0x1b8>)
    1cc8:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    1cca:	4a1f      	ldr	r2, [pc, #124]	; (1d48 <_spi_m_sync_init+0x1bc>)
    1ccc:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1cce:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1cd0:	7a2b      	ldrb	r3, [r5, #8]
    1cd2:	7a6a      	ldrb	r2, [r5, #9]
    1cd4:	0212      	lsls	r2, r2, #8
    1cd6:	431a      	orrs	r2, r3
    1cd8:	7aab      	ldrb	r3, [r5, #10]
    1cda:	041b      	lsls	r3, r3, #16
    1cdc:	431a      	orrs	r2, r3
    1cde:	7aeb      	ldrb	r3, [r5, #11]
    1ce0:	061b      	lsls	r3, r3, #24
    1ce2:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1ce4:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1ce6:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1ce8:	2330      	movs	r3, #48	; 0x30
    1cea:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1cec:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d1fc      	bne.n	1cec <_spi_m_sync_init+0x160>
    1cf2:	e7b9      	b.n	1c68 <_spi_m_sync_init+0xdc>
		return ERR_INVALID_ARG;
    1cf4:	200d      	movs	r0, #13
    1cf6:	4240      	negs	r0, r0
    1cf8:	e7c3      	b.n	1c82 <_spi_m_sync_init+0xf6>
		return ERR_DENIED;
    1cfa:	2011      	movs	r0, #17
    1cfc:	4240      	negs	r0, r0
    1cfe:	e7c0      	b.n	1c82 <_spi_m_sync_init+0xf6>
	ASSERT(dev && hw);
    1d00:	4a09      	ldr	r2, [pc, #36]	; (1d28 <_spi_m_sync_init+0x19c>)
    1d02:	490a      	ldr	r1, [pc, #40]	; (1d2c <_spi_m_sync_init+0x1a0>)
    1d04:	2000      	movs	r0, #0
    1d06:	4b0a      	ldr	r3, [pc, #40]	; (1d30 <_spi_m_sync_init+0x1a4>)
    1d08:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1d0a:	200d      	movs	r0, #13
    1d0c:	4240      	negs	r0, r0
    1d0e:	e7b8      	b.n	1c82 <_spi_m_sync_init+0xf6>
	ASSERT(dev && hw);
    1d10:	4a05      	ldr	r2, [pc, #20]	; (1d28 <_spi_m_sync_init+0x19c>)
    1d12:	4906      	ldr	r1, [pc, #24]	; (1d2c <_spi_m_sync_init+0x1a0>)
    1d14:	2001      	movs	r0, #1
    1d16:	4b06      	ldr	r3, [pc, #24]	; (1d30 <_spi_m_sync_init+0x1a4>)
    1d18:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1d1a:	200d      	movs	r0, #13
    1d1c:	4240      	negs	r0, r0
    1d1e:	e7b0      	b.n	1c82 <_spi_m_sync_init+0xf6>
    1d20:	bdfffc00 	.word	0xbdfffc00
    1d24:	000026b0 	.word	0x000026b0
    1d28:	00000915 	.word	0x00000915
    1d2c:	00002704 	.word	0x00002704
    1d30:	00000e29 	.word	0x00000e29
    1d34:	000008df 	.word	0x000008df
    1d38:	fffffefc 	.word	0xfffffefc
    1d3c:	fffd1dbf 	.word	0xfffd1dbf
    1d40:	000008f3 	.word	0x000008f3
    1d44:	fffdddbf 	.word	0xfffdddbf
    1d48:	00020240 	.word	0x00020240

00001d4c <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d4e:	46de      	mov	lr, fp
    1d50:	4657      	mov	r7, sl
    1d52:	464e      	mov	r6, r9
    1d54:	4645      	mov	r5, r8
    1d56:	b5e0      	push	{r5, r6, r7, lr}
    1d58:	b083      	sub	sp, #12
    1d5a:	4681      	mov	r9, r0
    1d5c:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    1d5e:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1d60:	680b      	ldr	r3, [r1, #0]
    1d62:	4698      	mov	r8, r3
    1d64:	684d      	ldr	r5, [r1, #4]
    1d66:	7903      	ldrb	r3, [r0, #4]
    1d68:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    1d6a:	2800      	cmp	r0, #0
    1d6c:	d015      	beq.n	1d9a <_spi_m_sync_trans+0x4e>
    1d6e:	0020      	movs	r0, r4
    1d70:	1e43      	subs	r3, r0, #1
    1d72:	4198      	sbcs	r0, r3
    1d74:	b2c0      	uxtb	r0, r0
    1d76:	4a36      	ldr	r2, [pc, #216]	; (1e50 <_spi_m_sync_trans+0x104>)
    1d78:	4936      	ldr	r1, [pc, #216]	; (1e54 <_spi_m_sync_trans+0x108>)
    1d7a:	4b37      	ldr	r3, [pc, #220]	; (1e58 <_spi_m_sync_trans+0x10c>)
    1d7c:	4798      	blx	r3
    1d7e:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1d80:	075b      	lsls	r3, r3, #29
    1d82:	d13f      	bne.n	1e04 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1d84:	2303      	movs	r3, #3
    1d86:	69e0      	ldr	r0, [r4, #28]
    1d88:	4018      	ands	r0, r3
    1d8a:	d1fc      	bne.n	1d86 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1d8c:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1d8e:	079b      	lsls	r3, r3, #30
    1d90:	d53b      	bpl.n	1e0a <_spi_m_sync_trans+0xbe>
    1d92:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1d94:	2301      	movs	r3, #1
    1d96:	469c      	mov	ip, r3
    1d98:	e009      	b.n	1dae <_spi_m_sync_trans+0x62>
    1d9a:	2000      	movs	r0, #0
    1d9c:	e7eb      	b.n	1d76 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    1d9e:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    1da0:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1da2:	b25b      	sxtb	r3, r3
    1da4:	2b00      	cmp	r3, #0
    1da6:	db16      	blt.n	1dd6 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1da8:	68b3      	ldr	r3, [r6, #8]
    1daa:	4283      	cmp	r3, r0
    1dac:	d927      	bls.n	1dfe <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1dae:	7e23      	ldrb	r3, [r4, #24]
    1db0:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1db2:	2104      	movs	r1, #4
    1db4:	4219      	tst	r1, r3
    1db6:	d02b      	beq.n	1e10 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1db8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1dba:	2d00      	cmp	r5, #0
    1dbc:	d0f0      	beq.n	1da0 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    1dbe:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    1dc0:	9901      	ldr	r1, [sp, #4]
    1dc2:	2901      	cmp	r1, #1
    1dc4:	d9eb      	bls.n	1d9e <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1dc6:	0a3f      	lsrs	r7, r7, #8
    1dc8:	706f      	strb	r7, [r5, #1]
    1dca:	3502      	adds	r5, #2
    1dcc:	e7e8      	b.n	1da0 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    1dce:	2101      	movs	r1, #1
    1dd0:	468b      	mov	fp, r1
    1dd2:	44d8      	add	r8, fp
    1dd4:	e037      	b.n	1e46 <_spi_m_sync_trans+0xfa>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1dd6:	2301      	movs	r3, #1
    1dd8:	425b      	negs	r3, r3
    1dda:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1ddc:	3381      	adds	r3, #129	; 0x81
    1dde:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1de0:	2013      	movs	r0, #19
    1de2:	4240      	negs	r0, r0
	tmp &= mask;
    1de4:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1de6:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1de8:	4213      	tst	r3, r2
    1dea:	d0fc      	beq.n	1de6 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1dec:	2303      	movs	r3, #3
    1dee:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1df0:	b003      	add	sp, #12
    1df2:	bc3c      	pop	{r2, r3, r4, r5}
    1df4:	4690      	mov	r8, r2
    1df6:	4699      	mov	r9, r3
    1df8:	46a2      	mov	sl, r4
    1dfa:	46ab      	mov	fp, r5
    1dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1dfe:	4293      	cmp	r3, r2
    1e00:	d8d5      	bhi.n	1dae <_spi_m_sync_trans+0x62>
    1e02:	e7ef      	b.n	1de4 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    1e04:	2004      	movs	r0, #4
    1e06:	4240      	negs	r0, r0
    1e08:	e7f2      	b.n	1df0 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    1e0a:	2014      	movs	r0, #20
    1e0c:	4240      	negs	r0, r0
    1e0e:	e7ef      	b.n	1df0 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1e10:	4290      	cmp	r0, r2
    1e12:	d8c6      	bhi.n	1da2 <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1e14:	4667      	mov	r7, ip
    1e16:	421f      	tst	r7, r3
    1e18:	d0c3      	beq.n	1da2 <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1e1a:	464f      	mov	r7, r9
    1e1c:	88ff      	ldrh	r7, [r7, #6]
    1e1e:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    1e20:	4647      	mov	r7, r8
    1e22:	2f00      	cmp	r7, #0
    1e24:	d00f      	beq.n	1e46 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    1e26:	783f      	ldrb	r7, [r7, #0]
    1e28:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    1e2a:	9901      	ldr	r1, [sp, #4]
    1e2c:	2901      	cmp	r1, #1
    1e2e:	d9ce      	bls.n	1dce <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    1e30:	4647      	mov	r7, r8
    1e32:	787f      	ldrb	r7, [r7, #1]
    1e34:	023f      	lsls	r7, r7, #8
    1e36:	46bb      	mov	fp, r7
    1e38:	4657      	mov	r7, sl
    1e3a:	4659      	mov	r1, fp
    1e3c:	430f      	orrs	r7, r1
    1e3e:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    1e40:	2102      	movs	r1, #2
    1e42:	468b      	mov	fp, r1
    1e44:	44d8      	add	r8, fp
	ctrl->txcnt++;
    1e46:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1e48:	4657      	mov	r7, sl
    1e4a:	62a7      	str	r7, [r4, #40]	; 0x28
    1e4c:	e7a9      	b.n	1da2 <_spi_m_sync_trans+0x56>
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	00000a71 	.word	0x00000a71
    1e54:	00002704 	.word	0x00002704
    1e58:	00000e29 	.word	0x00000e29

00001e5c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1e5c:	4b02      	ldr	r3, [pc, #8]	; (1e68 <_delay_init+0xc>)
    1e5e:	4a03      	ldr	r2, [pc, #12]	; (1e6c <_delay_init+0x10>)
    1e60:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1e62:	2205      	movs	r2, #5
    1e64:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    1e66:	4770      	bx	lr
    1e68:	e000e010 	.word	0xe000e010
    1e6c:	00ffffff 	.word	0x00ffffff

00001e70 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    1e70:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1e72:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1e74:	1e5e      	subs	r6, r3, #1
    1e76:	b2f6      	uxtb	r6, r6
    1e78:	2b00      	cmp	r3, #0
    1e7a:	d013      	beq.n	1ea4 <_delay_cycles+0x34>
    1e7c:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    1e7e:	4a0e      	ldr	r2, [pc, #56]	; (1eb8 <_delay_cycles+0x48>)
    1e80:	4d0e      	ldr	r5, [pc, #56]	; (1ebc <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1e82:	2080      	movs	r0, #128	; 0x80
    1e84:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    1e86:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1e88:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1e8a:	6813      	ldr	r3, [r2, #0]
    1e8c:	4203      	tst	r3, r0
    1e8e:	d0fc      	beq.n	1e8a <_delay_cycles+0x1a>
	while (n--) {
    1e90:	3c01      	subs	r4, #1
    1e92:	b2e4      	uxtb	r4, r4
    1e94:	2cff      	cmp	r4, #255	; 0xff
    1e96:	d1f6      	bne.n	1e86 <_delay_cycles+0x16>
    1e98:	0633      	lsls	r3, r6, #24
    1e9a:	1af6      	subs	r6, r6, r3
    1e9c:	4b08      	ldr	r3, [pc, #32]	; (1ec0 <_delay_cycles+0x50>)
    1e9e:	469c      	mov	ip, r3
    1ea0:	4461      	add	r1, ip
    1ea2:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1ea4:	4b04      	ldr	r3, [pc, #16]	; (1eb8 <_delay_cycles+0x48>)
    1ea6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1ea8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1eaa:	0019      	movs	r1, r3
    1eac:	2280      	movs	r2, #128	; 0x80
    1eae:	0252      	lsls	r2, r2, #9
    1eb0:	680b      	ldr	r3, [r1, #0]
    1eb2:	4213      	tst	r3, r2
    1eb4:	d0fc      	beq.n	1eb0 <_delay_cycles+0x40>
		;
}
    1eb6:	bd70      	pop	{r4, r5, r6, pc}
    1eb8:	e000e010 	.word	0xe000e010
    1ebc:	00ffffff 	.word	0x00ffffff
    1ec0:	ff000001 	.word	0xff000001

00001ec4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1ec4:	b570      	push	{r4, r5, r6, lr}
    1ec6:	0005      	movs	r5, r0
	void *const hw = device->hw;
    1ec8:	6904      	ldr	r4, [r0, #16]
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1eca:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1ecc:	07db      	lsls	r3, r3, #31
    1ece:	d505      	bpl.n	1edc <tc_pwm_interrupt_handler+0x18>
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1ed0:	2301      	movs	r3, #1
    1ed2:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1ed4:	6803      	ldr	r3, [r0, #0]
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	d000      	beq.n	1edc <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1eda:	4798      	blx	r3
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1edc:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1ede:	079b      	lsls	r3, r3, #30
    1ee0:	d506      	bpl.n	1ef0 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1ee2:	2302      	movs	r3, #2
    1ee4:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    1ee6:	686b      	ldr	r3, [r5, #4]
    1ee8:	2b00      	cmp	r3, #0
    1eea:	d001      	beq.n	1ef0 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1eec:	0028      	movs	r0, r5
    1eee:	4798      	blx	r3
		}
	}
}
    1ef0:	bd70      	pop	{r4, r5, r6, pc}
	...

00001ef4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    1ef4:	b510      	push	{r4, lr}
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	if ((uint32_t)TC4 == (uint32_t)hw) {
    1ef6:	4b10      	ldr	r3, [pc, #64]	; (1f38 <get_tc_index+0x44>)
    1ef8:	4298      	cmp	r0, r3
    1efa:	d015      	beq.n	1f28 <get_tc_index+0x34>
		return 4;
	}
	return (((uint32_t)hw - (uint32_t)TC0) >> 10);
    1efc:	4b0f      	ldr	r3, [pc, #60]	; (1f3c <get_tc_index+0x48>)
    1efe:	469c      	mov	ip, r3
    1f00:	4460      	add	r0, ip
    1f02:	0a80      	lsrs	r0, r0, #10
    1f04:	b2c0      	uxtb	r0, r0
		if (_tcs[i].number == index) {
    1f06:	4b0e      	ldr	r3, [pc, #56]	; (1f40 <get_tc_index+0x4c>)
    1f08:	781b      	ldrb	r3, [r3, #0]
    1f0a:	4283      	cmp	r3, r0
    1f0c:	d011      	beq.n	1f32 <get_tc_index+0x3e>
    1f0e:	4b0c      	ldr	r3, [pc, #48]	; (1f40 <get_tc_index+0x4c>)
    1f10:	7d1b      	ldrb	r3, [r3, #20]
    1f12:	4283      	cmp	r3, r0
    1f14:	d00a      	beq.n	1f2c <get_tc_index+0x38>
	ASSERT(false);
    1f16:	2266      	movs	r2, #102	; 0x66
    1f18:	32ff      	adds	r2, #255	; 0xff
    1f1a:	490a      	ldr	r1, [pc, #40]	; (1f44 <get_tc_index+0x50>)
    1f1c:	2000      	movs	r0, #0
    1f1e:	4b0a      	ldr	r3, [pc, #40]	; (1f48 <get_tc_index+0x54>)
    1f20:	4798      	blx	r3
	return -1;
    1f22:	2001      	movs	r0, #1
    1f24:	4240      	negs	r0, r0
}
    1f26:	bd10      	pop	{r4, pc}
	if ((uint32_t)TC4 == (uint32_t)hw) {
    1f28:	2004      	movs	r0, #4
    1f2a:	e7eb      	b.n	1f04 <get_tc_index+0x10>
    1f2c:	2001      	movs	r0, #1
			return i;
    1f2e:	b240      	sxtb	r0, r0
    1f30:	e7f9      	b.n	1f26 <get_tc_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1f32:	2000      	movs	r0, #0
    1f34:	e7fb      	b.n	1f2e <get_tc_index+0x3a>
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	42004000 	.word	0x42004000
    1f3c:	bdffd000 	.word	0xbdffd000
    1f40:	20000014 	.word	0x20000014
    1f44:	00002720 	.word	0x00002720
    1f48:	00000e29 	.word	0x00000e29

00001f4c <_pwm_init>:
{
    1f4c:	b570      	push	{r4, r5, r6, lr}
    1f4e:	0005      	movs	r5, r0
    1f50:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    1f52:	0008      	movs	r0, r1
    1f54:	4b3d      	ldr	r3, [pc, #244]	; (204c <STACK_SIZE+0x4c>)
    1f56:	4798      	blx	r3
	device->hw = hw;
    1f58:	612c      	str	r4, [r5, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f5a:	2201      	movs	r2, #1
    1f5c:	6923      	ldr	r3, [r4, #16]
    1f5e:	421a      	tst	r2, r3
    1f60:	d1fc      	bne.n	1f5c <_pwm_init+0x10>
    1f62:	2203      	movs	r2, #3
    1f64:	6923      	ldr	r3, [r4, #16]
    1f66:	421a      	tst	r2, r3
    1f68:	d1fc      	bne.n	1f64 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    1f6a:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    1f6c:	079b      	lsls	r3, r3, #30
    1f6e:	d464      	bmi.n	203a <STACK_SIZE+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f70:	2201      	movs	r2, #1
    1f72:	6923      	ldr	r3, [r4, #16]
    1f74:	421a      	tst	r2, r3
    1f76:	d1fc      	bne.n	1f72 <_pwm_init+0x26>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    1f78:	6823      	ldr	r3, [r4, #0]
    1f7a:	2201      	movs	r2, #1
    1f7c:	4313      	orrs	r3, r2
    1f7e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f80:	6923      	ldr	r3, [r4, #16]
    1f82:	421a      	tst	r2, r3
    1f84:	d1fc      	bne.n	1f80 <_pwm_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1f86:	0083      	lsls	r3, r0, #2
    1f88:	181b      	adds	r3, r3, r0
    1f8a:	009a      	lsls	r2, r3, #2
    1f8c:	4b30      	ldr	r3, [pc, #192]	; (2050 <STACK_SIZE+0x50>)
    1f8e:	189b      	adds	r3, r3, r2
    1f90:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    1f92:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1f94:	7a99      	ldrb	r1, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    1f96:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1f98:	891b      	ldrh	r3, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    1f9a:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    1f9c:	2303      	movs	r3, #3
    1f9e:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1fa0:	3309      	adds	r3, #9
    1fa2:	4013      	ands	r3, r2
    1fa4:	2b08      	cmp	r3, #8
    1fa6:	d038      	beq.n	201a <STACK_SIZE+0x1a>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d149      	bne.n	2040 <STACK_SIZE+0x40>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1fac:	0083      	lsls	r3, r0, #2
    1fae:	181b      	adds	r3, r3, r0
    1fb0:	009b      	lsls	r3, r3, #2
    1fb2:	4a27      	ldr	r2, [pc, #156]	; (2050 <STACK_SIZE+0x50>)
    1fb4:	18d3      	adds	r3, r2, r3
    1fb6:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1fb8:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    1fba:	8a1b      	ldrh	r3, [r3, #16]
    1fbc:	83e3      	strh	r3, [r4, #30]
	if (hw == TC0) {
    1fbe:	4b25      	ldr	r3, [pc, #148]	; (2054 <STACK_SIZE+0x54>)
    1fc0:	429c      	cmp	r4, r3
    1fc2:	d034      	beq.n	202e <STACK_SIZE+0x2e>
	if (hw == TC1) {
    1fc4:	4b24      	ldr	r3, [pc, #144]	; (2058 <STACK_SIZE+0x58>)
    1fc6:	429c      	cmp	r4, r3
    1fc8:	d034      	beq.n	2034 <STACK_SIZE+0x34>
	NVIC_DisableIRQ(_tcs[i].irq);
    1fca:	0083      	lsls	r3, r0, #2
    1fcc:	181b      	adds	r3, r3, r0
    1fce:	009b      	lsls	r3, r3, #2
    1fd0:	4a1f      	ldr	r2, [pc, #124]	; (2050 <STACK_SIZE+0x50>)
    1fd2:	18d3      	adds	r3, r2, r3
    1fd4:	785b      	ldrb	r3, [r3, #1]
    1fd6:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    1fd8:	2b00      	cmp	r3, #0
    1fda:	db34      	blt.n	2046 <STACK_SIZE+0x46>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1fdc:	221f      	movs	r2, #31
    1fde:	401a      	ands	r2, r3
    1fe0:	2301      	movs	r3, #1
    1fe2:	4093      	lsls	r3, r2
    1fe4:	2280      	movs	r2, #128	; 0x80
    1fe6:	491d      	ldr	r1, [pc, #116]	; (205c <STACK_SIZE+0x5c>)
    1fe8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    1fea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1fee:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    1ff2:	0083      	lsls	r3, r0, #2
    1ff4:	1818      	adds	r0, r3, r0
    1ff6:	0080      	lsls	r0, r0, #2
    1ff8:	4b15      	ldr	r3, [pc, #84]	; (2050 <STACK_SIZE+0x50>)
    1ffa:	1818      	adds	r0, r3, r0
    1ffc:	2301      	movs	r3, #1
    1ffe:	56c3      	ldrsb	r3, [r0, r3]
	return 0;
    2000:	2000      	movs	r0, #0
  if ((int32_t)(IRQn) >= 0)
    2002:	2b00      	cmp	r3, #0
    2004:	db08      	blt.n	2018 <STACK_SIZE+0x18>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2006:	3a61      	subs	r2, #97	; 0x61
    2008:	401a      	ands	r2, r3
    200a:	2301      	movs	r3, #1
    200c:	4093      	lsls	r3, r2
    200e:	000a      	movs	r2, r1
    2010:	21c0      	movs	r1, #192	; 0xc0
    2012:	0049      	lsls	r1, r1, #1
    2014:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2016:	6013      	str	r3, [r2, #0]
}
    2018:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    201a:	0083      	lsls	r3, r0, #2
    201c:	181b      	adds	r3, r3, r0
    201e:	009b      	lsls	r3, r3, #2
    2020:	4a0b      	ldr	r2, [pc, #44]	; (2050 <STACK_SIZE+0x50>)
    2022:	18d3      	adds	r3, r2, r3
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2024:	68da      	ldr	r2, [r3, #12]
    2026:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2028:	691b      	ldr	r3, [r3, #16]
    202a:	6223      	str	r3, [r4, #32]
    202c:	e7c7      	b.n	1fbe <_pwm_init+0x72>
		_tc0_dev = (struct _pwm_device *)dev;
    202e:	4b0c      	ldr	r3, [pc, #48]	; (2060 <STACK_SIZE+0x60>)
    2030:	601d      	str	r5, [r3, #0]
    2032:	e7ca      	b.n	1fca <_pwm_init+0x7e>
		_tc1_dev = (struct _pwm_device *)dev;
    2034:	4b0a      	ldr	r3, [pc, #40]	; (2060 <STACK_SIZE+0x60>)
    2036:	605d      	str	r5, [r3, #4]
    2038:	e7c7      	b.n	1fca <_pwm_init+0x7e>
		return ERR_DENIED;
    203a:	2011      	movs	r0, #17
    203c:	4240      	negs	r0, r0
    203e:	e7eb      	b.n	2018 <STACK_SIZE+0x18>
		return -1;
    2040:	2001      	movs	r0, #1
    2042:	4240      	negs	r0, r0
    2044:	e7e8      	b.n	2018 <STACK_SIZE+0x18>
	return 0;
    2046:	2000      	movs	r0, #0
    2048:	e7e6      	b.n	2018 <STACK_SIZE+0x18>
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	00001ef5 	.word	0x00001ef5
    2050:	20000014 	.word	0x20000014
    2054:	42003000 	.word	0x42003000
    2058:	42003400 	.word	0x42003400
    205c:	e000e100 	.word	0xe000e100
    2060:	200000ac 	.word	0x200000ac

00002064 <_tc_get_pwm>:
}
    2064:	2000      	movs	r0, #0
    2066:	4770      	bx	lr

00002068 <TC0_Handler>:
{
    2068:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    206a:	4b02      	ldr	r3, [pc, #8]	; (2074 <TC0_Handler+0xc>)
    206c:	6818      	ldr	r0, [r3, #0]
    206e:	4b02      	ldr	r3, [pc, #8]	; (2078 <TC0_Handler+0x10>)
    2070:	4798      	blx	r3
}
    2072:	bd10      	pop	{r4, pc}
    2074:	200000ac 	.word	0x200000ac
    2078:	00001ec5 	.word	0x00001ec5

0000207c <TC1_Handler>:
{
    207c:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    207e:	4b02      	ldr	r3, [pc, #8]	; (2088 <TC1_Handler+0xc>)
    2080:	6858      	ldr	r0, [r3, #4]
    2082:	4b02      	ldr	r3, [pc, #8]	; (208c <TC1_Handler+0x10>)
    2084:	4798      	blx	r3
}
    2086:	bd10      	pop	{r4, pc}
    2088:	200000ac 	.word	0x200000ac
    208c:	00001ec5 	.word	0x00001ec5

00002090 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    2090:	b510      	push	{r4, lr}
    2092:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2094:	d025      	beq.n	20e2 <_wdt_init+0x52>
    2096:	6800      	ldr	r0, [r0, #0]
    2098:	1e43      	subs	r3, r0, #1
    209a:	4198      	sbcs	r0, r3
    209c:	b2c0      	uxtb	r0, r0
    209e:	225a      	movs	r2, #90	; 0x5a
    20a0:	4914      	ldr	r1, [pc, #80]	; (20f4 <_wdt_init+0x64>)
    20a2:	4b15      	ldr	r3, [pc, #84]	; (20f8 <_wdt_init+0x68>)
    20a4:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    20a6:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    20a8:	210e      	movs	r1, #14
    20aa:	689a      	ldr	r2, [r3, #8]
    20ac:	4211      	tst	r1, r2
    20ae:	d1fc      	bne.n	20aa <_wdt_init+0x1a>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    20b0:	781a      	ldrb	r2, [r3, #0]
    20b2:	09d2      	lsrs	r2, r2, #7
    20b4:	d117      	bne.n	20e6 <_wdt_init+0x56>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    20b6:	210e      	movs	r1, #14
    20b8:	689a      	ldr	r2, [r3, #8]
    20ba:	4211      	tst	r1, r2
    20bc:	d1fc      	bne.n	20b8 <_wdt_init+0x28>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    20be:	781a      	ldrb	r2, [r3, #0]
    20c0:	0792      	lsls	r2, r2, #30
    20c2:	d413      	bmi.n	20ec <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    20c4:	210e      	movs	r1, #14
    20c6:	689a      	ldr	r2, [r3, #8]
    20c8:	4211      	tst	r1, r2
    20ca:	d1fc      	bne.n	20c6 <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    20cc:	781a      	ldrb	r2, [r3, #0]
    20ce:	2104      	movs	r1, #4
    20d0:	438a      	bics	r2, r1
    20d2:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    20d4:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    20d6:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    20d8:	310b      	adds	r1, #11
    20da:	438b      	bics	r3, r1
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    20dc:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    20de:	2000      	movs	r0, #0
}
    20e0:	bd10      	pop	{r4, pc}
    20e2:	2000      	movs	r0, #0
    20e4:	e7db      	b.n	209e <_wdt_init+0xe>
		return ERR_DENIED;
    20e6:	2011      	movs	r0, #17
    20e8:	4240      	negs	r0, r0
    20ea:	e7f9      	b.n	20e0 <_wdt_init+0x50>
    20ec:	2011      	movs	r0, #17
    20ee:	4240      	negs	r0, r0
    20f0:	e7f6      	b.n	20e0 <_wdt_init+0x50>
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	00002734 	.word	0x00002734
    20f8:	00000e29 	.word	0x00000e29

000020fc <main>:
#include "atmel_start.h"
#include <hal_gpio.h>
#include <hal_delay.h>

int main(void)
{
    20fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20fe:	46d6      	mov	lr, sl
    2100:	464f      	mov	r7, r9
    2102:	4646      	mov	r6, r8
    2104:	b5c0      	push	{r6, r7, lr}
    2106:	b082      	sub	sp, #8
	atmel_start_init();
    2108:	4b1e      	ldr	r3, [pc, #120]	; (2184 <main+0x88>)
    210a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    210c:	22c0      	movs	r2, #192	; 0xc0
    210e:	05d2      	lsls	r2, r2, #23
    2110:	2180      	movs	r1, #128	; 0x80
    2112:	0549      	lsls	r1, r1, #21
    2114:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2116:	2482      	movs	r4, #130	; 0x82
    2118:	05e4      	lsls	r4, r4, #23
    211a:	205c      	movs	r0, #92	; 0x5c
    211c:	5c23      	ldrb	r3, [r4, r0]
    211e:	2504      	movs	r5, #4
    2120:	432b      	orrs	r3, r5
    2122:	5423      	strb	r3, [r4, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2124:	6191      	str	r1, [r2, #24]

	gpio_set_pin_pull_mode(SW0, GPIO_PULL_UP);

	while (true) {
		do {
			delay_ms(100);
    2126:	4b18      	ldr	r3, [pc, #96]	; (2188 <main+0x8c>)
    2128:	4698      	mov	r8, r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    212a:	4f18      	ldr	r7, [pc, #96]	; (218c <main+0x90>)
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    212c:	0015      	movs	r5, r2
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    212e:	4e18      	ldr	r6, [pc, #96]	; (2190 <main+0x94>)
    2130:	2064      	movs	r0, #100	; 0x64
    2132:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    2134:	4668      	mov	r0, sp
    2136:	47b8      	blx	r7
    2138:	682c      	ldr	r4, [r5, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    213a:	2382      	movs	r3, #130	; 0x82
    213c:	05db      	lsls	r3, r3, #23
    213e:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2140:	692b      	ldr	r3, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2142:	4053      	eors	r3, r2
    2144:	401c      	ands	r4, r3
    2146:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2148:	4668      	mov	r0, sp
    214a:	47b0      	blx	r6
		} while (gpio_get_pin_level(SW0));
    214c:	00e3      	lsls	r3, r4, #3
    214e:	d4ef      	bmi.n	2130 <main+0x34>
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    2150:	2380      	movs	r3, #128	; 0x80
    2152:	021b      	lsls	r3, r3, #8
    2154:	61eb      	str	r3, [r5, #28]

		gpio_toggle_pin_level(LED0);

		do {
			delay_ms(100);
    2156:	4b0c      	ldr	r3, [pc, #48]	; (2188 <main+0x8c>)
    2158:	469a      	mov	sl, r3
	CRITICAL_SECTION_ENTER();
    215a:	4b0c      	ldr	r3, [pc, #48]	; (218c <main+0x90>)
    215c:	4699      	mov	r9, r3
	CRITICAL_SECTION_LEAVE();
    215e:	4e0c      	ldr	r6, [pc, #48]	; (2190 <main+0x94>)
    2160:	2064      	movs	r0, #100	; 0x64
    2162:	47d0      	blx	sl
	CRITICAL_SECTION_ENTER();
    2164:	a801      	add	r0, sp, #4
    2166:	47c8      	blx	r9
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2168:	682c      	ldr	r4, [r5, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    216a:	2382      	movs	r3, #130	; 0x82
    216c:	05db      	lsls	r3, r3, #23
    216e:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2170:	692b      	ldr	r3, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2172:	4053      	eors	r3, r2
    2174:	401c      	ands	r4, r3
    2176:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2178:	a801      	add	r0, sp, #4
    217a:	47b0      	blx	r6
		} while (!gpio_get_pin_level(SW0));
    217c:	00e3      	lsls	r3, r4, #3
    217e:	d5ef      	bpl.n	2160 <main+0x64>
    2180:	e7d5      	b.n	212e <main+0x32>
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	0000011d 	.word	0x0000011d
    2188:	00000add 	.word	0x00000add
    218c:	00000991 	.word	0x00000991
    2190:	0000099f 	.word	0x0000099f

00002194 <__aeabi_uldivmod>:
    2194:	2b00      	cmp	r3, #0
    2196:	d111      	bne.n	21bc <__aeabi_uldivmod+0x28>
    2198:	2a00      	cmp	r2, #0
    219a:	d10f      	bne.n	21bc <__aeabi_uldivmod+0x28>
    219c:	2900      	cmp	r1, #0
    219e:	d100      	bne.n	21a2 <__aeabi_uldivmod+0xe>
    21a0:	2800      	cmp	r0, #0
    21a2:	d002      	beq.n	21aa <__aeabi_uldivmod+0x16>
    21a4:	2100      	movs	r1, #0
    21a6:	43c9      	mvns	r1, r1
    21a8:	1c08      	adds	r0, r1, #0
    21aa:	b407      	push	{r0, r1, r2}
    21ac:	4802      	ldr	r0, [pc, #8]	; (21b8 <__aeabi_uldivmod+0x24>)
    21ae:	a102      	add	r1, pc, #8	; (adr r1, 21b8 <__aeabi_uldivmod+0x24>)
    21b0:	1840      	adds	r0, r0, r1
    21b2:	9002      	str	r0, [sp, #8]
    21b4:	bd03      	pop	{r0, r1, pc}
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	000001b1 	.word	0x000001b1
    21bc:	b403      	push	{r0, r1}
    21be:	4668      	mov	r0, sp
    21c0:	b501      	push	{r0, lr}
    21c2:	9802      	ldr	r0, [sp, #8]
    21c4:	f000 f810 	bl	21e8 <__udivmoddi4>
    21c8:	9b01      	ldr	r3, [sp, #4]
    21ca:	469e      	mov	lr, r3
    21cc:	b002      	add	sp, #8
    21ce:	bc0c      	pop	{r2, r3}
    21d0:	4770      	bx	lr
    21d2:	46c0      	nop			; (mov r8, r8)

000021d4 <__ffssi2>:
    21d4:	b510      	push	{r4, lr}
    21d6:	2300      	movs	r3, #0
    21d8:	2800      	cmp	r0, #0
    21da:	d002      	beq.n	21e2 <__ffssi2+0xe>
    21dc:	f000 f8f0 	bl	23c0 <__ctzsi2>
    21e0:	1c43      	adds	r3, r0, #1
    21e2:	0018      	movs	r0, r3
    21e4:	bd10      	pop	{r4, pc}
    21e6:	46c0      	nop			; (mov r8, r8)

000021e8 <__udivmoddi4>:
    21e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ea:	4657      	mov	r7, sl
    21ec:	464e      	mov	r6, r9
    21ee:	4645      	mov	r5, r8
    21f0:	46de      	mov	lr, fp
    21f2:	b5e0      	push	{r5, r6, r7, lr}
    21f4:	0004      	movs	r4, r0
    21f6:	b083      	sub	sp, #12
    21f8:	000d      	movs	r5, r1
    21fa:	4692      	mov	sl, r2
    21fc:	4699      	mov	r9, r3
    21fe:	428b      	cmp	r3, r1
    2200:	d82f      	bhi.n	2262 <__udivmoddi4+0x7a>
    2202:	d02c      	beq.n	225e <__udivmoddi4+0x76>
    2204:	4649      	mov	r1, r9
    2206:	4650      	mov	r0, sl
    2208:	f000 f8ce 	bl	23a8 <__clzdi2>
    220c:	0029      	movs	r1, r5
    220e:	0006      	movs	r6, r0
    2210:	0020      	movs	r0, r4
    2212:	f000 f8c9 	bl	23a8 <__clzdi2>
    2216:	1a33      	subs	r3, r6, r0
    2218:	4698      	mov	r8, r3
    221a:	3b20      	subs	r3, #32
    221c:	469b      	mov	fp, r3
    221e:	d500      	bpl.n	2222 <__udivmoddi4+0x3a>
    2220:	e074      	b.n	230c <__udivmoddi4+0x124>
    2222:	4653      	mov	r3, sl
    2224:	465a      	mov	r2, fp
    2226:	4093      	lsls	r3, r2
    2228:	001f      	movs	r7, r3
    222a:	4653      	mov	r3, sl
    222c:	4642      	mov	r2, r8
    222e:	4093      	lsls	r3, r2
    2230:	001e      	movs	r6, r3
    2232:	42af      	cmp	r7, r5
    2234:	d829      	bhi.n	228a <__udivmoddi4+0xa2>
    2236:	d026      	beq.n	2286 <__udivmoddi4+0x9e>
    2238:	465b      	mov	r3, fp
    223a:	1ba4      	subs	r4, r4, r6
    223c:	41bd      	sbcs	r5, r7
    223e:	2b00      	cmp	r3, #0
    2240:	da00      	bge.n	2244 <__udivmoddi4+0x5c>
    2242:	e079      	b.n	2338 <__udivmoddi4+0x150>
    2244:	2200      	movs	r2, #0
    2246:	2300      	movs	r3, #0
    2248:	9200      	str	r2, [sp, #0]
    224a:	9301      	str	r3, [sp, #4]
    224c:	2301      	movs	r3, #1
    224e:	465a      	mov	r2, fp
    2250:	4093      	lsls	r3, r2
    2252:	9301      	str	r3, [sp, #4]
    2254:	2301      	movs	r3, #1
    2256:	4642      	mov	r2, r8
    2258:	4093      	lsls	r3, r2
    225a:	9300      	str	r3, [sp, #0]
    225c:	e019      	b.n	2292 <__udivmoddi4+0xaa>
    225e:	4282      	cmp	r2, r0
    2260:	d9d0      	bls.n	2204 <__udivmoddi4+0x1c>
    2262:	2200      	movs	r2, #0
    2264:	2300      	movs	r3, #0
    2266:	9200      	str	r2, [sp, #0]
    2268:	9301      	str	r3, [sp, #4]
    226a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    226c:	2b00      	cmp	r3, #0
    226e:	d001      	beq.n	2274 <__udivmoddi4+0x8c>
    2270:	601c      	str	r4, [r3, #0]
    2272:	605d      	str	r5, [r3, #4]
    2274:	9800      	ldr	r0, [sp, #0]
    2276:	9901      	ldr	r1, [sp, #4]
    2278:	b003      	add	sp, #12
    227a:	bc3c      	pop	{r2, r3, r4, r5}
    227c:	4690      	mov	r8, r2
    227e:	4699      	mov	r9, r3
    2280:	46a2      	mov	sl, r4
    2282:	46ab      	mov	fp, r5
    2284:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2286:	42a3      	cmp	r3, r4
    2288:	d9d6      	bls.n	2238 <__udivmoddi4+0x50>
    228a:	2200      	movs	r2, #0
    228c:	2300      	movs	r3, #0
    228e:	9200      	str	r2, [sp, #0]
    2290:	9301      	str	r3, [sp, #4]
    2292:	4643      	mov	r3, r8
    2294:	2b00      	cmp	r3, #0
    2296:	d0e8      	beq.n	226a <__udivmoddi4+0x82>
    2298:	07fb      	lsls	r3, r7, #31
    229a:	0872      	lsrs	r2, r6, #1
    229c:	431a      	orrs	r2, r3
    229e:	4646      	mov	r6, r8
    22a0:	087b      	lsrs	r3, r7, #1
    22a2:	e00e      	b.n	22c2 <__udivmoddi4+0xda>
    22a4:	42ab      	cmp	r3, r5
    22a6:	d101      	bne.n	22ac <__udivmoddi4+0xc4>
    22a8:	42a2      	cmp	r2, r4
    22aa:	d80c      	bhi.n	22c6 <__udivmoddi4+0xde>
    22ac:	1aa4      	subs	r4, r4, r2
    22ae:	419d      	sbcs	r5, r3
    22b0:	2001      	movs	r0, #1
    22b2:	1924      	adds	r4, r4, r4
    22b4:	416d      	adcs	r5, r5
    22b6:	2100      	movs	r1, #0
    22b8:	3e01      	subs	r6, #1
    22ba:	1824      	adds	r4, r4, r0
    22bc:	414d      	adcs	r5, r1
    22be:	2e00      	cmp	r6, #0
    22c0:	d006      	beq.n	22d0 <__udivmoddi4+0xe8>
    22c2:	42ab      	cmp	r3, r5
    22c4:	d9ee      	bls.n	22a4 <__udivmoddi4+0xbc>
    22c6:	3e01      	subs	r6, #1
    22c8:	1924      	adds	r4, r4, r4
    22ca:	416d      	adcs	r5, r5
    22cc:	2e00      	cmp	r6, #0
    22ce:	d1f8      	bne.n	22c2 <__udivmoddi4+0xda>
    22d0:	465b      	mov	r3, fp
    22d2:	9800      	ldr	r0, [sp, #0]
    22d4:	9901      	ldr	r1, [sp, #4]
    22d6:	1900      	adds	r0, r0, r4
    22d8:	4169      	adcs	r1, r5
    22da:	2b00      	cmp	r3, #0
    22dc:	db22      	blt.n	2324 <__udivmoddi4+0x13c>
    22de:	002b      	movs	r3, r5
    22e0:	465a      	mov	r2, fp
    22e2:	40d3      	lsrs	r3, r2
    22e4:	002a      	movs	r2, r5
    22e6:	4644      	mov	r4, r8
    22e8:	40e2      	lsrs	r2, r4
    22ea:	001c      	movs	r4, r3
    22ec:	465b      	mov	r3, fp
    22ee:	0015      	movs	r5, r2
    22f0:	2b00      	cmp	r3, #0
    22f2:	db2c      	blt.n	234e <__udivmoddi4+0x166>
    22f4:	0026      	movs	r6, r4
    22f6:	409e      	lsls	r6, r3
    22f8:	0033      	movs	r3, r6
    22fa:	0026      	movs	r6, r4
    22fc:	4647      	mov	r7, r8
    22fe:	40be      	lsls	r6, r7
    2300:	0032      	movs	r2, r6
    2302:	1a80      	subs	r0, r0, r2
    2304:	4199      	sbcs	r1, r3
    2306:	9000      	str	r0, [sp, #0]
    2308:	9101      	str	r1, [sp, #4]
    230a:	e7ae      	b.n	226a <__udivmoddi4+0x82>
    230c:	4642      	mov	r2, r8
    230e:	2320      	movs	r3, #32
    2310:	1a9b      	subs	r3, r3, r2
    2312:	4652      	mov	r2, sl
    2314:	40da      	lsrs	r2, r3
    2316:	4641      	mov	r1, r8
    2318:	0013      	movs	r3, r2
    231a:	464a      	mov	r2, r9
    231c:	408a      	lsls	r2, r1
    231e:	0017      	movs	r7, r2
    2320:	431f      	orrs	r7, r3
    2322:	e782      	b.n	222a <__udivmoddi4+0x42>
    2324:	4642      	mov	r2, r8
    2326:	2320      	movs	r3, #32
    2328:	1a9b      	subs	r3, r3, r2
    232a:	002a      	movs	r2, r5
    232c:	4646      	mov	r6, r8
    232e:	409a      	lsls	r2, r3
    2330:	0023      	movs	r3, r4
    2332:	40f3      	lsrs	r3, r6
    2334:	4313      	orrs	r3, r2
    2336:	e7d5      	b.n	22e4 <__udivmoddi4+0xfc>
    2338:	4642      	mov	r2, r8
    233a:	2320      	movs	r3, #32
    233c:	2100      	movs	r1, #0
    233e:	1a9b      	subs	r3, r3, r2
    2340:	2200      	movs	r2, #0
    2342:	9100      	str	r1, [sp, #0]
    2344:	9201      	str	r2, [sp, #4]
    2346:	2201      	movs	r2, #1
    2348:	40da      	lsrs	r2, r3
    234a:	9201      	str	r2, [sp, #4]
    234c:	e782      	b.n	2254 <__udivmoddi4+0x6c>
    234e:	4642      	mov	r2, r8
    2350:	2320      	movs	r3, #32
    2352:	0026      	movs	r6, r4
    2354:	1a9b      	subs	r3, r3, r2
    2356:	40de      	lsrs	r6, r3
    2358:	002f      	movs	r7, r5
    235a:	46b4      	mov	ip, r6
    235c:	4097      	lsls	r7, r2
    235e:	4666      	mov	r6, ip
    2360:	003b      	movs	r3, r7
    2362:	4333      	orrs	r3, r6
    2364:	e7c9      	b.n	22fa <__udivmoddi4+0x112>
    2366:	46c0      	nop			; (mov r8, r8)

00002368 <__aeabi_idiv0>:
    2368:	4770      	bx	lr
    236a:	46c0      	nop			; (mov r8, r8)

0000236c <__clzsi2>:
    236c:	211c      	movs	r1, #28
    236e:	2301      	movs	r3, #1
    2370:	041b      	lsls	r3, r3, #16
    2372:	4298      	cmp	r0, r3
    2374:	d301      	bcc.n	237a <__clzsi2+0xe>
    2376:	0c00      	lsrs	r0, r0, #16
    2378:	3910      	subs	r1, #16
    237a:	0a1b      	lsrs	r3, r3, #8
    237c:	4298      	cmp	r0, r3
    237e:	d301      	bcc.n	2384 <__clzsi2+0x18>
    2380:	0a00      	lsrs	r0, r0, #8
    2382:	3908      	subs	r1, #8
    2384:	091b      	lsrs	r3, r3, #4
    2386:	4298      	cmp	r0, r3
    2388:	d301      	bcc.n	238e <__clzsi2+0x22>
    238a:	0900      	lsrs	r0, r0, #4
    238c:	3904      	subs	r1, #4
    238e:	a202      	add	r2, pc, #8	; (adr r2, 2398 <__clzsi2+0x2c>)
    2390:	5c10      	ldrb	r0, [r2, r0]
    2392:	1840      	adds	r0, r0, r1
    2394:	4770      	bx	lr
    2396:	46c0      	nop			; (mov r8, r8)
    2398:	02020304 	.word	0x02020304
    239c:	01010101 	.word	0x01010101
	...

000023a8 <__clzdi2>:
    23a8:	b510      	push	{r4, lr}
    23aa:	2900      	cmp	r1, #0
    23ac:	d103      	bne.n	23b6 <__clzdi2+0xe>
    23ae:	f7ff ffdd 	bl	236c <__clzsi2>
    23b2:	3020      	adds	r0, #32
    23b4:	e002      	b.n	23bc <__clzdi2+0x14>
    23b6:	1c08      	adds	r0, r1, #0
    23b8:	f7ff ffd8 	bl	236c <__clzsi2>
    23bc:	bd10      	pop	{r4, pc}
    23be:	46c0      	nop			; (mov r8, r8)

000023c0 <__ctzsi2>:
    23c0:	4241      	negs	r1, r0
    23c2:	4008      	ands	r0, r1
    23c4:	211c      	movs	r1, #28
    23c6:	2301      	movs	r3, #1
    23c8:	041b      	lsls	r3, r3, #16
    23ca:	4298      	cmp	r0, r3
    23cc:	d301      	bcc.n	23d2 <__ctzsi2+0x12>
    23ce:	0c00      	lsrs	r0, r0, #16
    23d0:	3910      	subs	r1, #16
    23d2:	0a1b      	lsrs	r3, r3, #8
    23d4:	4298      	cmp	r0, r3
    23d6:	d301      	bcc.n	23dc <__ctzsi2+0x1c>
    23d8:	0a00      	lsrs	r0, r0, #8
    23da:	3908      	subs	r1, #8
    23dc:	091b      	lsrs	r3, r3, #4
    23de:	4298      	cmp	r0, r3
    23e0:	d301      	bcc.n	23e6 <__ctzsi2+0x26>
    23e2:	0900      	lsrs	r0, r0, #4
    23e4:	3904      	subs	r1, #4
    23e6:	a202      	add	r2, pc, #8	; (adr r2, 23f0 <__ctzsi2+0x30>)
    23e8:	5c10      	ldrb	r0, [r2, r0]
    23ea:	1a40      	subs	r0, r0, r1
    23ec:	4770      	bx	lr
    23ee:	46c0      	nop			; (mov r8, r8)
    23f0:	1d1d1c1b 	.word	0x1d1d1c1b
    23f4:	1e1e1e1e 	.word	0x1e1e1e1e
    23f8:	1f1f1f1f 	.word	0x1f1f1f1f
    23fc:	1f1f1f1f 	.word	0x1f1f1f1f

00002400 <__libc_init_array>:
    2400:	b570      	push	{r4, r5, r6, lr}
    2402:	2600      	movs	r6, #0
    2404:	4d0c      	ldr	r5, [pc, #48]	; (2438 <__libc_init_array+0x38>)
    2406:	4c0d      	ldr	r4, [pc, #52]	; (243c <__libc_init_array+0x3c>)
    2408:	1b64      	subs	r4, r4, r5
    240a:	10a4      	asrs	r4, r4, #2
    240c:	42a6      	cmp	r6, r4
    240e:	d109      	bne.n	2424 <__libc_init_array+0x24>
    2410:	2600      	movs	r6, #0
    2412:	f000 f99b 	bl	274c <_init>
    2416:	4d0a      	ldr	r5, [pc, #40]	; (2440 <__libc_init_array+0x40>)
    2418:	4c0a      	ldr	r4, [pc, #40]	; (2444 <__libc_init_array+0x44>)
    241a:	1b64      	subs	r4, r4, r5
    241c:	10a4      	asrs	r4, r4, #2
    241e:	42a6      	cmp	r6, r4
    2420:	d105      	bne.n	242e <__libc_init_array+0x2e>
    2422:	bd70      	pop	{r4, r5, r6, pc}
    2424:	00b3      	lsls	r3, r6, #2
    2426:	58eb      	ldr	r3, [r5, r3]
    2428:	4798      	blx	r3
    242a:	3601      	adds	r6, #1
    242c:	e7ee      	b.n	240c <__libc_init_array+0xc>
    242e:	00b3      	lsls	r3, r6, #2
    2430:	58eb      	ldr	r3, [r5, r3]
    2432:	4798      	blx	r3
    2434:	3601      	adds	r6, #1
    2436:	e7f2      	b.n	241e <__libc_init_array+0x1e>
    2438:	00002758 	.word	0x00002758
    243c:	00002758 	.word	0x00002758
    2440:	00002758 	.word	0x00002758
    2444:	0000275c 	.word	0x0000275c
    2448:	682f2e2e 	.word	0x682f2e2e
    244c:	692f6c61 	.word	0x692f6c61
    2450:	756c636e 	.word	0x756c636e
    2454:	682f6564 	.word	0x682f6564
    2458:	775f6c61 	.word	0x775f6c61
    245c:	682e7464 	.word	0x682e7464
    2460:	00000000 	.word	0x00000000
    2464:	682f2e2e 	.word	0x682f2e2e
    2468:	732f6c61 	.word	0x732f6c61
    246c:	682f6372 	.word	0x682f6372
    2470:	615f6c61 	.word	0x615f6c61
    2474:	79735f63 	.word	0x79735f63
    2478:	632e636e 	.word	0x632e636e
    247c:	00000000 	.word	0x00000000
    2480:	682f2e2e 	.word	0x682f2e2e
    2484:	732f6c61 	.word	0x732f6c61
    2488:	682f6372 	.word	0x682f6372
    248c:	615f6c61 	.word	0x615f6c61
    2490:	735f6364 	.word	0x735f6364
    2494:	2e636e79 	.word	0x2e636e79
    2498:	00000063 	.word	0x00000063
    249c:	682f2e2e 	.word	0x682f2e2e
    24a0:	732f6c61 	.word	0x732f6c61
    24a4:	682f6372 	.word	0x682f6372
    24a8:	635f6c61 	.word	0x635f6c61
    24ac:	6e656c61 	.word	0x6e656c61
    24b0:	2e726164 	.word	0x2e726164
    24b4:	00000063 	.word	0x00000063
    24b8:	682f2e2e 	.word	0x682f2e2e
    24bc:	732f6c61 	.word	0x732f6c61
    24c0:	682f6372 	.word	0x682f6372
    24c4:	635f6c61 	.word	0x635f6c61
    24c8:	615f6e61 	.word	0x615f6e61
    24cc:	636e7973 	.word	0x636e7973
    24d0:	0000632e 	.word	0x0000632e
    24d4:	682f2e2e 	.word	0x682f2e2e
    24d8:	732f6c61 	.word	0x732f6c61
    24dc:	682f6372 	.word	0x682f6372
    24e0:	635f6c61 	.word	0x635f6c61
    24e4:	735f6372 	.word	0x735f6372
    24e8:	2e636e79 	.word	0x2e636e79
    24ec:	00000063 	.word	0x00000063
    24f0:	682f2e2e 	.word	0x682f2e2e
    24f4:	732f6c61 	.word	0x732f6c61
    24f8:	682f6372 	.word	0x682f6372
    24fc:	645f6c61 	.word	0x645f6c61
    2500:	735f6361 	.word	0x735f6361
    2504:	2e636e79 	.word	0x2e636e79
    2508:	00000063 	.word	0x00000063
    250c:	682f2e2e 	.word	0x682f2e2e
    2510:	732f6c61 	.word	0x732f6c61
    2514:	682f6372 	.word	0x682f6372
    2518:	665f6c61 	.word	0x665f6c61
    251c:	6873616c 	.word	0x6873616c
    2520:	0000632e 	.word	0x0000632e
    2524:	682f2e2e 	.word	0x682f2e2e
    2528:	732f6c61 	.word	0x732f6c61
    252c:	682f6372 	.word	0x682f6372
    2530:	665f6c61 	.word	0x665f6c61
    2534:	6d716572 	.word	0x6d716572
    2538:	72657465 	.word	0x72657465
    253c:	6e79735f 	.word	0x6e79735f
    2540:	00632e63 	.word	0x00632e63
    2544:	682f2e2e 	.word	0x682f2e2e
    2548:	732f6c61 	.word	0x732f6c61
    254c:	682f6372 	.word	0x682f6372
    2550:	695f6c61 	.word	0x695f6c61
    2554:	6d5f6332 	.word	0x6d5f6332
    2558:	6e79735f 	.word	0x6e79735f
    255c:	00632e63 	.word	0x00632e63
    2560:	682f2e2e 	.word	0x682f2e2e
    2564:	732f6c61 	.word	0x732f6c61
    2568:	682f6372 	.word	0x682f6372
    256c:	705f6c61 	.word	0x705f6c61
    2570:	632e6d77 	.word	0x632e6d77
    2574:	00000000 	.word	0x00000000
    2578:	682f2e2e 	.word	0x682f2e2e
    257c:	732f6c61 	.word	0x732f6c61
    2580:	682f6372 	.word	0x682f6372
    2584:	735f6c61 	.word	0x735f6c61
    2588:	6d5f6970 	.word	0x6d5f6970
    258c:	6e79735f 	.word	0x6e79735f
    2590:	00632e63 	.word	0x00632e63
    2594:	682f2e2e 	.word	0x682f2e2e
    2598:	612f6c70 	.word	0x612f6c70
    259c:	70682f63 	.word	0x70682f63
    25a0:	63615f6c 	.word	0x63615f6c
    25a4:	0000632e 	.word	0x0000632e

000025a8 <_adcs>:
	...
    25c4:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    25d4:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    25e4:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

000025f4 <_map>:
    25f4:	000000ff ffffffff 682f2e2e 652f6c70     ........../hpl/e
    2604:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00002614 <user_mux_confs>:
	...

00002644 <channel_confs>:
	...
    265c:	682f2e2e 662f6c70 6d716572 6c70682f     ../hpl/freqm/hpl
    266c:	6572665f 632e6d71 00000000 682f2e2e     _freqm.c....../h
    267c:	6e2f6c70 74636d76 682f6c72 6e5f6c70     pl/nvmctrl/hpl_n
    268c:	74636d76 632e6c72 00000000 682f2e2e     vmctrl.c....../h
    269c:	722f6c70 682f6374 725f6c70 632e6374     pl/rtc/hpl_rtc.c
    26ac:	00000000                                ....

000026b0 <_i2cms>:
    26b0:	00000000 00200014 00000100 00000f0e     ...... .........
    26c0:	00d70000 003d0900 00000003 00200014     ......=....... .
    26d0:	00000100 00000f0e 00d70000 003d0900     ..............=.

000026e0 <sercomspi_regs>:
    26e0:	0020000c 00020000 00000000 01ff0027     .. .........'...
    26f0:	20000c01 02000000 00000000 ff002700     ... .........'..
    2700:	00000201 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    2710:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    2720:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    2730:	0000632e 682f2e2e 772f6c70 682f7464     .c..../hpl/wdt/h
    2740:	775f6c70 632e7464 00000000              pl_wdt.c....

0000274c <_init>:
    274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2752:	bc08      	pop	{r3}
    2754:	469e      	mov	lr, r3
    2756:	4770      	bx	lr

00002758 <__init_array_start>:
    2758:	000000e5 	.word	0x000000e5

0000275c <_fini>:
    275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2762:	bc08      	pop	{r3}
    2764:	469e      	mov	lr, r3
    2766:	4770      	bx	lr

00002768 <__fini_array_start>:
    2768:	000000bd 	.word	0x000000bd
