
SAMBA_BOOTLOADER1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002874  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00002874  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000294  20000004  00002878  00020004  2**2
                  ALLOC
  3 .stack        00000400  20000298  00002b0c  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00042856  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005ba6  00000000  00000000  000628db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000719e  00000000  00000000  00068481  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007f0  00000000  00000000  0006f61f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000910  00000000  00000000  0006fe0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c94e  00000000  00000000  0007071f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000152f6  00000000  00000000  0007d06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000aaf95  00000000  00000000  00092363  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000012e0  00000000  00000000  0013d2f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
       0:	98 06 00 20 61 16 00 00 5d 16 00 00 5d 16 00 00     ... a...]...]...
	...
			| (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos);
      2c:	5d 16 00 00 00 00 00 00 00 00 00 00 5d 16 00 00     ]...........]...
	switch (config->mode) {
      3c:	5d 16 00 00 5d 16 00 00 5d 16 00 00 49 03 00 00     ]...]...]...I...
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
      4c:	75 06 00 00 4d 06 00 00 0d 04 00 00 5d 16 00 00     u...M.......]...
				rtc_count_set_compare(module, config->compare_values[i],
      5c:	5d 16 00 00 5d 16 00 00 11 0c 00 00 21 0c 00 00     ]...].......!...
				return STATUS_ERR_INVALID_ARG;
      6c:	31 0c 00 00 41 0c 00 00 51 0c 00 00 61 0c 00 00     1...A...Q...a...
				rtc_count_set_compare(module, config->compare_values[i],
      7c:	5d 16 00 00 5d 16 00 00 b9 04 00 00 c9 04 00 00     ]...]...........
	return STATUS_OK;
      8c:	d9 04 00 00 4d 05 00 00 5d 05 00 00 6d 05 00 00     ....M...]...m...
      9c:	7d 05 00 00 8d 05 00 00 e1 01 00 00 f1 01 00 00     }...............
      ac:	51 07 00 00 01 02 00 00 9d 05 00 00 5d 16 00 00     Q...........]...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000004 	.word	0x20000004
      dc:	00000000 	.word	0x00000000
      e0:	00002874 	.word	0x00002874

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000008 	.word	0x20000008
     110:	00002874 	.word	0x00002874
     114:	00002874 	.word	0x00002874
     118:	00000000 	.word	0x00000000

0000011c <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     11c:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     11e:	0080      	lsls	r0, r0, #2
     120:	4b2e      	ldr	r3, [pc, #184]	; (1dc <_adc_interrupt_handler+0xc0>)
     122:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     124:	6823      	ldr	r3, [r4, #0]
     126:	799d      	ldrb	r5, [r3, #6]
     128:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     12a:	07ea      	lsls	r2, r5, #31
     12c:	d52d      	bpl.n	18a <_adc_interrupt_handler+0x6e>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     12e:	7ee2      	ldrb	r2, [r4, #27]
     130:	07d2      	lsls	r2, r2, #31
     132:	d52a      	bpl.n	18a <_adc_interrupt_handler+0x6e>
     134:	7ea2      	ldrb	r2, [r4, #26]
     136:	07d2      	lsls	r2, r2, #31
     138:	d527      	bpl.n	18a <_adc_interrupt_handler+0x6e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     13a:	2201      	movs	r2, #1
     13c:	719a      	strb	r2, [r3, #6]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     13e:	6962      	ldr	r2, [r4, #20]
     140:	1c93      	adds	r3, r2, #2
     142:	6163      	str	r3, [r4, #20]
     144:	6823      	ldr	r3, [r4, #0]
     146:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     148:	b29b      	uxth	r3, r3
     14a:	8013      	strh	r3, [r2, #0]

			if (--module->remaining_conversions > 0) {
     14c:	8b23      	ldrh	r3, [r4, #24]
     14e:	3b01      	subs	r3, #1
     150:	b29b      	uxth	r3, r3
     152:	8323      	strh	r3, [r4, #24]
     154:	2b00      	cmp	r3, #0
     156:	d015      	beq.n	184 <_adc_interrupt_handler+0x68>
				if (module->software_trigger == true
     158:	7f63      	ldrb	r3, [r4, #29]
     15a:	2b00      	cmp	r3, #0
     15c:	d015      	beq.n	18a <_adc_interrupt_handler+0x6e>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     15e:	6822      	ldr	r2, [r4, #0]
     160:	79d3      	ldrb	r3, [r2, #7]
     162:	b25b      	sxtb	r3, r3
     164:	2b00      	cmp	r3, #0
     166:	db10      	blt.n	18a <_adc_interrupt_handler+0x6e>
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
     168:	8c13      	ldrh	r3, [r2, #32]
     16a:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     16c:	2b00      	cmp	r3, #0
     16e:	d1fb      	bne.n	168 <_adc_interrupt_handler+0x4c>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     170:	7e13      	ldrb	r3, [r2, #24]
     172:	2102      	movs	r1, #2
     174:	430b      	orrs	r3, r1
     176:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     178:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     17a:	8c13      	ldrh	r3, [r2, #32]
     17c:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     17e:	2b00      	cmp	r3, #0
     180:	d1fb      	bne.n	17a <_adc_interrupt_handler+0x5e>
     182:	e002      	b.n	18a <_adc_interrupt_handler+0x6e>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     184:	7f23      	ldrb	r3, [r4, #28]
     186:	2b05      	cmp	r3, #5
     188:	d016      	beq.n	1b8 <_adc_interrupt_handler+0x9c>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     18a:	076b      	lsls	r3, r5, #29
     18c:	d508      	bpl.n	1a0 <_adc_interrupt_handler+0x84>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     18e:	2304      	movs	r3, #4
     190:	6822      	ldr	r2, [r4, #0]
     192:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     194:	7ee3      	ldrb	r3, [r4, #27]
     196:	079b      	lsls	r3, r3, #30
     198:	d502      	bpl.n	1a0 <_adc_interrupt_handler+0x84>
     19a:	7ea3      	ldrb	r3, [r4, #26]
     19c:	079b      	lsls	r3, r3, #30
     19e:	d414      	bmi.n	1ca <_adc_interrupt_handler+0xae>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     1a0:	07ab      	lsls	r3, r5, #30
     1a2:	d508      	bpl.n	1b6 <_adc_interrupt_handler+0x9a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     1a4:	2302      	movs	r3, #2
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1aa:	7ee3      	ldrb	r3, [r4, #27]
     1ac:	075b      	lsls	r3, r3, #29
     1ae:	d502      	bpl.n	1b6 <_adc_interrupt_handler+0x9a>
     1b0:	7ea3      	ldrb	r3, [r4, #26]
     1b2:	075b      	lsls	r3, r3, #29
     1b4:	d40d      	bmi.n	1d2 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
     1b6:	bd70      	pop	{r4, r5, r6, pc}
					module->job_status = STATUS_OK;
     1b8:	2300      	movs	r3, #0
     1ba:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     1bc:	3301      	adds	r3, #1
     1be:	6822      	ldr	r2, [r4, #0]
     1c0:	7113      	strb	r3, [r2, #4]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     1c2:	0020      	movs	r0, r4
     1c4:	68a3      	ldr	r3, [r4, #8]
     1c6:	4798      	blx	r3
     1c8:	e7df      	b.n	18a <_adc_interrupt_handler+0x6e>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     1ca:	0020      	movs	r0, r4
     1cc:	68e3      	ldr	r3, [r4, #12]
     1ce:	4798      	blx	r3
     1d0:	e7e6      	b.n	1a0 <_adc_interrupt_handler+0x84>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     1d2:	6923      	ldr	r3, [r4, #16]
     1d4:	0020      	movs	r0, r4
     1d6:	4798      	blx	r3
}
     1d8:	e7ed      	b.n	1b6 <_adc_interrupt_handler+0x9a>
     1da:	46c0      	nop			; (mov r8, r8)
     1dc:	20000054 	.word	0x20000054

000001e0 <ADC0_Handler>:
		void ADC##n##_Handler(void) \
		{ \
			_adc_interrupt_handler(n); \
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
     1e0:	b510      	push	{r4, lr}
     1e2:	2000      	movs	r0, #0
     1e4:	4b01      	ldr	r3, [pc, #4]	; (1ec <ADC0_Handler+0xc>)
     1e6:	4798      	blx	r3
     1e8:	bd10      	pop	{r4, pc}
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	0000011d 	.word	0x0000011d

000001f0 <ADC1_Handler>:
     1f0:	b510      	push	{r4, lr}
     1f2:	2001      	movs	r0, #1
     1f4:	4b01      	ldr	r3, [pc, #4]	; (1fc <ADC1_Handler+0xc>)
     1f6:	4798      	blx	r3
     1f8:	bd10      	pop	{r4, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	0000011d 	.word	0x0000011d

00000200 <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     200:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
     202:	4b27      	ldr	r3, [pc, #156]	; (2a0 <DAC_Handler+0xa0>)
     204:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
     206:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     208:	79ab      	ldrb	r3, [r5, #6]
     20a:	07db      	lsls	r3, r3, #31
     20c:	d507      	bpl.n	21e <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     20e:	2301      	movs	r3, #1
     210:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     212:	0023      	movs	r3, r4
     214:	3314      	adds	r3, #20
     216:	d002      	beq.n	21e <DAC_Handler+0x1e>
     218:	7c63      	ldrb	r3, [r4, #17]
     21a:	2b00      	cmp	r3, #0
     21c:	d131      	bne.n	282 <DAC_Handler+0x82>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     21e:	79ab      	ldrb	r3, [r5, #6]
     220:	079b      	lsls	r3, r3, #30
     222:	d538      	bpl.n	296 <DAC_Handler+0x96>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     224:	2302      	movs	r3, #2
     226:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
     228:	89a3      	ldrh	r3, [r4, #12]
     22a:	b29b      	uxth	r3, r3
     22c:	2b00      	cmp	r3, #0
     22e:	d02c      	beq.n	28a <DAC_Handler+0x8a>
				module->job_buffer[module->transferred_conversions++];
     230:	89e3      	ldrh	r3, [r4, #14]
     232:	b29b      	uxth	r3, r3
     234:	1c5a      	adds	r2, r3, #1
     236:	b292      	uxth	r2, r2
     238:	81e2      	strh	r2, [r4, #14]
     23a:	005b      	lsls	r3, r3, #1
     23c:	68a2      	ldr	r2, [r4, #8]
     23e:	4694      	mov	ip, r2
     240:	4463      	add	r3, ip
     242:	881b      	ldrh	r3, [r3, #0]
     244:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
     246:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
     248:	89a3      	ldrh	r3, [r4, #12]
     24a:	3b01      	subs	r3, #1
     24c:	b29b      	uxth	r3, r3
     24e:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
     250:	89a3      	ldrh	r3, [r4, #12]
     252:	b29b      	uxth	r3, r3
     254:	2b00      	cmp	r3, #0
     256:	d118      	bne.n	28a <DAC_Handler+0x8a>
				module->job_status = STATUS_OK;
     258:	2200      	movs	r2, #0
     25a:	3320      	adds	r3, #32
     25c:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
     25e:	3b1e      	subs	r3, #30
     260:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     262:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     264:	2180      	movs	r1, #128	; 0x80
     266:	0549      	lsls	r1, r1, #21
     268:	337e      	adds	r3, #126	; 0x7e
     26a:	4a0e      	ldr	r2, [pc, #56]	; (2a4 <DAC_Handler+0xa4>)
     26c:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
     26e:	0023      	movs	r3, r4
     270:	3314      	adds	r3, #20
     272:	d010      	beq.n	296 <DAC_Handler+0x96>
     274:	7ca3      	ldrb	r3, [r4, #18]
     276:	2b00      	cmp	r3, #0
     278:	d00a      	beq.n	290 <DAC_Handler+0x90>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
     27a:	2000      	movs	r0, #0
     27c:	69e3      	ldr	r3, [r4, #28]
     27e:	4798      	blx	r3
     280:	e006      	b.n	290 <DAC_Handler+0x90>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     282:	2000      	movs	r0, #0
     284:	69a3      	ldr	r3, [r4, #24]
     286:	4798      	blx	r3
     288:	e7c9      	b.n	21e <DAC_Handler+0x1e>
		if ((module->callback) &&
     28a:	0023      	movs	r3, r4
     28c:	3314      	adds	r3, #20
     28e:	d002      	beq.n	296 <DAC_Handler+0x96>
     290:	7c23      	ldrb	r3, [r4, #16]
     292:	2b00      	cmp	r3, #0
     294:	d100      	bne.n	298 <DAC_Handler+0x98>
	_dac_interrupt_handler(0);
}
     296:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
     298:	6963      	ldr	r3, [r4, #20]
     29a:	2000      	movs	r0, #0
     29c:	4798      	blx	r3
}
     29e:	e7fa      	b.n	296 <DAC_Handler+0x96>
     2a0:	2000005c 	.word	0x2000005c
     2a4:	e000e100 	.word	0xe000e100

000002a8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     2a8:	4a06      	ldr	r2, [pc, #24]	; (2c4 <_extint_enable+0x1c>)
     2aa:	7813      	ldrb	r3, [r2, #0]
     2ac:	2102      	movs	r1, #2
     2ae:	430b      	orrs	r3, r1
     2b0:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2b2:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     2b4:	6853      	ldr	r3, [r2, #4]
     2b6:	4219      	tst	r1, r3
     2b8:	d1fc      	bne.n	2b4 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2ba:	6853      	ldr	r3, [r2, #4]
     2bc:	4218      	tst	r0, r3
     2be:	d1f9      	bne.n	2b4 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     2c0:	4770      	bx	lr
     2c2:	46c0      	nop			; (mov r8, r8)
     2c4:	40002800 	.word	0x40002800

000002c8 <_system_extint_init>:
{
     2c8:	b500      	push	{lr}
     2ca:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     2cc:	4a17      	ldr	r2, [pc, #92]	; (32c <_system_extint_init+0x64>)
     2ce:	6951      	ldr	r1, [r2, #20]
     2d0:	2380      	movs	r3, #128	; 0x80
     2d2:	00db      	lsls	r3, r3, #3
     2d4:	430b      	orrs	r3, r1
     2d6:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     2d8:	a901      	add	r1, sp, #4
     2da:	2300      	movs	r3, #0
     2dc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     2de:	2002      	movs	r0, #2
     2e0:	4b13      	ldr	r3, [pc, #76]	; (330 <_system_extint_init+0x68>)
     2e2:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     2e4:	2002      	movs	r0, #2
     2e6:	4b13      	ldr	r3, [pc, #76]	; (334 <_system_extint_init+0x6c>)
     2e8:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     2ea:	4a13      	ldr	r2, [pc, #76]	; (338 <_system_extint_init+0x70>)
     2ec:	7813      	ldrb	r3, [r2, #0]
     2ee:	2101      	movs	r1, #1
     2f0:	430b      	orrs	r3, r1
     2f2:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     2f4:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2f6:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     2f8:	6853      	ldr	r3, [r2, #4]
     2fa:	4219      	tst	r1, r3
     2fc:	d1fc      	bne.n	2f8 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2fe:	6853      	ldr	r3, [r2, #4]
     300:	4218      	tst	r0, r3
     302:	d1f9      	bne.n	2f8 <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     304:	4a0c      	ldr	r2, [pc, #48]	; (338 <_system_extint_init+0x70>)
     306:	7813      	ldrb	r3, [r2, #0]
     308:	2110      	movs	r1, #16
     30a:	438b      	bics	r3, r1
     30c:	7013      	strb	r3, [r2, #0]
     30e:	4b0b      	ldr	r3, [pc, #44]	; (33c <_system_extint_init+0x74>)
     310:	0019      	movs	r1, r3
     312:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     314:	2200      	movs	r2, #0
     316:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     318:	428b      	cmp	r3, r1
     31a:	d1fc      	bne.n	316 <_system_extint_init+0x4e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     31c:	2208      	movs	r2, #8
     31e:	4b08      	ldr	r3, [pc, #32]	; (340 <_system_extint_init+0x78>)
     320:	601a      	str	r2, [r3, #0]
	_extint_enable();
     322:	4b08      	ldr	r3, [pc, #32]	; (344 <_system_extint_init+0x7c>)
     324:	4798      	blx	r3
}
     326:	b003      	add	sp, #12
     328:	bd00      	pop	{pc}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	40000800 	.word	0x40000800
     330:	00001505 	.word	0x00001505
     334:	00001495 	.word	0x00001495
     338:	40002800 	.word	0x40002800
     33c:	20000060 	.word	0x20000060
     340:	e000e100 	.word	0xe000e100
     344:	000002a9 	.word	0x000002a9

00000348 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     34a:	46de      	mov	lr, fp
     34c:	4657      	mov	r7, sl
     34e:	464e      	mov	r6, r9
     350:	4645      	mov	r5, r8
     352:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     354:	4b2b      	ldr	r3, [pc, #172]	; (404 <STACK_SIZE+0x4>)
     356:	681b      	ldr	r3, [r3, #0]
     358:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
     35a:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
     35c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
     35e:	4652      	mov	r2, sl
     360:	8e92      	ldrh	r2, [r2, #52]	; 0x34
     362:	401a      	ands	r2, r3
     364:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     366:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     368:	8973      	ldrh	r3, [r6, #10]
     36a:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     36c:	b21a      	sxth	r2, r3
     36e:	2a00      	cmp	r2, #0
     370:	db08      	blt.n	384 <RTC_Handler+0x3c>
     372:	27ff      	movs	r7, #255	; 0xff
     374:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
     376:	d02a      	beq.n	3ce <RTC_Handler+0x86>
     378:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     37a:	2301      	movs	r3, #1
     37c:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     37e:	33fe      	adds	r3, #254	; 0xfe
     380:	469b      	mov	fp, r3
     382:	e014      	b.n	3ae <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     384:	4643      	mov	r3, r8
     386:	055b      	lsls	r3, r3, #21
     388:	d407      	bmi.n	39a <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     38a:	4b1f      	ldr	r3, [pc, #124]	; (408 <STACK_SIZE+0x8>)
     38c:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
     38e:	bc3c      	pop	{r2, r3, r4, r5}
     390:	4690      	mov	r8, r2
     392:	4699      	mov	r9, r3
     394:	46a2      	mov	sl, r4
     396:	46ab      	mov	fp, r5
     398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     39a:	4653      	mov	r3, sl
     39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     39e:	4798      	blx	r3
     3a0:	e7f3      	b.n	38a <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     3a2:	465b      	mov	r3, fp
     3a4:	401d      	ands	r5, r3
     3a6:	81b5      	strh	r5, [r6, #12]
     3a8:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
     3aa:	2c08      	cmp	r4, #8
     3ac:	d0ef      	beq.n	38e <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     3ae:	0023      	movs	r3, r4
     3b0:	464d      	mov	r5, r9
     3b2:	40a5      	lsls	r5, r4
     3b4:	422f      	tst	r7, r5
     3b6:	d0f4      	beq.n	3a2 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
     3b8:	4642      	mov	r2, r8
     3ba:	4122      	asrs	r2, r4
     3bc:	4649      	mov	r1, r9
     3be:	4211      	tst	r1, r2
     3c0:	d0ef      	beq.n	3a2 <RTC_Handler+0x5a>
				module->callbacks[i]();
     3c2:	3302      	adds	r3, #2
     3c4:	009b      	lsls	r3, r3, #2
     3c6:	4652      	mov	r2, sl
     3c8:	589b      	ldr	r3, [r3, r2]
     3ca:	4798      	blx	r3
     3cc:	e7e9      	b.n	3a2 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     3ce:	05da      	lsls	r2, r3, #23
     3d0:	d50a      	bpl.n	3e8 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     3d2:	4643      	mov	r3, r8
     3d4:	05db      	lsls	r3, r3, #23
     3d6:	d403      	bmi.n	3e0 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     3d8:	2380      	movs	r3, #128	; 0x80
     3da:	005b      	lsls	r3, r3, #1
     3dc:	81b3      	strh	r3, [r6, #12]
     3de:	e7d6      	b.n	38e <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     3e0:	4653      	mov	r3, sl
     3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     3e4:	4798      	blx	r3
     3e6:	e7f7      	b.n	3d8 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     3e8:	059b      	lsls	r3, r3, #22
     3ea:	d5d0      	bpl.n	38e <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     3ec:	4643      	mov	r3, r8
     3ee:	059b      	lsls	r3, r3, #22
     3f0:	d403      	bmi.n	3fa <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     3f2:	2380      	movs	r3, #128	; 0x80
     3f4:	009b      	lsls	r3, r3, #2
     3f6:	81b3      	strh	r3, [r6, #12]
}
     3f8:	e7c9      	b.n	38e <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     3fa:	4653      	mov	r3, sl
     3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     3fe:	4798      	blx	r3
     400:	e7f7      	b.n	3f2 <RTC_Handler+0xaa>
     402:	46c0      	nop			; (mov r8, r8)
     404:	200000a0 	.word	0x200000a0
     408:	ffff8000 	.word	0xffff8000

0000040c <TSENS_Handler>:

struct tsens_module *_tsens_instances;

/** Interrupt handler for the TSENS module. */
void TSENS_Handler(void)
{
     40c:	b5f0      	push	{r4, r5, r6, r7, lr}
     40e:	46c6      	mov	lr, r8
     410:	b500      	push	{lr}
	struct tsens_module *module = _tsens_instances;
     412:	4b14      	ldr	r3, [pc, #80]	; (464 <TSENS_Handler+0x58>)
     414:	681f      	ldr	r7, [r3, #0]
	Assert(module);

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = TSENS->INTFLAG.reg;
     416:	4b14      	ldr	r3, [pc, #80]	; (468 <TSENS_Handler+0x5c>)
     418:	799e      	ldrb	r6, [r3, #6]
     41a:	b2f6      	uxtb	r6, r6

	/* store TSENS result in job buffer */
	uint32_t temp = TSENS->VALUE.reg;
     41c:	68db      	ldr	r3, [r3, #12]
	if(temp & 0x00800000) {
     41e:	021a      	lsls	r2, r3, #8
     420:	d502      	bpl.n	428 <TSENS_Handler+0x1c>
		temp |= ~TSENS_VALUE_MASK;
     422:	22ff      	movs	r2, #255	; 0xff
     424:	0612      	lsls	r2, r2, #24
     426:	4313      	orrs	r3, r2
	}
#if (ERRATA_14476)
	*(module->value) = temp * (-1);
     428:	693a      	ldr	r2, [r7, #16]
     42a:	425b      	negs	r3, r3
     42c:	6013      	str	r3, [r2, #0]
     42e:	2400      	movs	r4, #0
#endif

	for(uint8_t i = 0; i < TSENS_CALLBACK_NUM; i++)
	{
		if (flags & ((uint32_t)0x01 << i)) {
     430:	2501      	movs	r5, #1
			/* Clear the INTFLAG anyway */
			TSENS->INTFLAG.reg = (uint32_t)0x01 << i;
     432:	4b0d      	ldr	r3, [pc, #52]	; (468 <TSENS_Handler+0x5c>)
     434:	4698      	mov	r8, r3
     436:	e002      	b.n	43e <TSENS_Handler+0x32>
     438:	3401      	adds	r4, #1
	for(uint8_t i = 0; i < TSENS_CALLBACK_NUM; i++)
     43a:	2c04      	cmp	r4, #4
     43c:	d00f      	beq.n	45e <TSENS_Handler+0x52>
     43e:	b2e0      	uxtb	r0, r4
		if (flags & ((uint32_t)0x01 << i)) {
     440:	0033      	movs	r3, r6
     442:	40e3      	lsrs	r3, r4
     444:	421d      	tst	r5, r3
     446:	d0f7      	beq.n	438 <TSENS_Handler+0x2c>
			TSENS->INTFLAG.reg = (uint32_t)0x01 << i;
     448:	002b      	movs	r3, r5
     44a:	40a3      	lsls	r3, r4
     44c:	b2db      	uxtb	r3, r3
     44e:	4642      	mov	r2, r8
     450:	7193      	strb	r3, [r2, #6]

			if(module->callback[i] != NULL) {
     452:	00a3      	lsls	r3, r4, #2
     454:	58fb      	ldr	r3, [r7, r3]
     456:	2b00      	cmp	r3, #0
     458:	d0ee      	beq.n	438 <TSENS_Handler+0x2c>
				module->callback[i]((enum tsens_callback)i);
     45a:	4798      	blx	r3
     45c:	e7ec      	b.n	438 <TSENS_Handler+0x2c>
			}
		}
	}
}
     45e:	bc04      	pop	{r2}
     460:	4690      	mov	r8, r2
     462:	bdf0      	pop	{r4, r5, r6, r7, pc}
     464:	200000a4 	.word	0x200000a4
     468:	40003000 	.word	0x40003000

0000046c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     46c:	b5f0      	push	{r4, r5, r6, r7, lr}
     46e:	46c6      	mov	lr, r8
     470:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     472:	0080      	lsls	r0, r0, #2
     474:	4b0e      	ldr	r3, [pc, #56]	; (4b0 <_tcc_interrupt_handler+0x44>)
     476:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     478:	683b      	ldr	r3, [r7, #0]
     47a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     47e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     480:	4013      	ands	r3, r2
     482:	401e      	ands	r6, r3
     484:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     486:	4b0b      	ldr	r3, [pc, #44]	; (4b4 <_tcc_interrupt_handler+0x48>)
     488:	4698      	mov	r8, r3
     48a:	e002      	b.n	492 <_tcc_interrupt_handler+0x26>
     48c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     48e:	2c30      	cmp	r4, #48	; 0x30
     490:	d00a      	beq.n	4a8 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     492:	4643      	mov	r3, r8
     494:	58e5      	ldr	r5, [r4, r3]
     496:	4235      	tst	r5, r6
     498:	d0f8      	beq.n	48c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     49a:	193b      	adds	r3, r7, r4
     49c:	685b      	ldr	r3, [r3, #4]
     49e:	0038      	movs	r0, r7
     4a0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     4a2:	683b      	ldr	r3, [r7, #0]
     4a4:	62dd      	str	r5, [r3, #44]	; 0x2c
     4a6:	e7f1      	b.n	48c <_tcc_interrupt_handler+0x20>
		}
	}
}
     4a8:	bc04      	pop	{r2}
     4aa:	4690      	mov	r8, r2
     4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	200000a8 	.word	0x200000a8
     4b4:	00002568 	.word	0x00002568

000004b8 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     4b8:	b510      	push	{r4, lr}
     4ba:	2000      	movs	r0, #0
     4bc:	4b01      	ldr	r3, [pc, #4]	; (4c4 <TCC0_Handler+0xc>)
     4be:	4798      	blx	r3
     4c0:	bd10      	pop	{r4, pc}
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	0000046d 	.word	0x0000046d

000004c8 <TCC1_Handler>:
     4c8:	b510      	push	{r4, lr}
     4ca:	2001      	movs	r0, #1
     4cc:	4b01      	ldr	r3, [pc, #4]	; (4d4 <TCC1_Handler+0xc>)
     4ce:	4798      	blx	r3
     4d0:	bd10      	pop	{r4, pc}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	0000046d 	.word	0x0000046d

000004d8 <TCC2_Handler>:
     4d8:	b510      	push	{r4, lr}
     4da:	2002      	movs	r0, #2
     4dc:	4b01      	ldr	r3, [pc, #4]	; (4e4 <TCC2_Handler+0xc>)
     4de:	4798      	blx	r3
     4e0:	bd10      	pop	{r4, pc}
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	0000046d 	.word	0x0000046d

000004e8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     4e8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     4ea:	0080      	lsls	r0, r0, #2
     4ec:	4b16      	ldr	r3, [pc, #88]	; (548 <_tc_interrupt_handler+0x60>)
     4ee:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     4f0:	6823      	ldr	r3, [r4, #0]
     4f2:	7a9d      	ldrb	r5, [r3, #10]
     4f4:	7e22      	ldrb	r2, [r4, #24]
     4f6:	7e63      	ldrb	r3, [r4, #25]
     4f8:	4013      	ands	r3, r2
     4fa:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     4fc:	07eb      	lsls	r3, r5, #31
     4fe:	d406      	bmi.n	50e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     500:	07ab      	lsls	r3, r5, #30
     502:	d40b      	bmi.n	51c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     504:	06eb      	lsls	r3, r5, #27
     506:	d410      	bmi.n	52a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     508:	06ab      	lsls	r3, r5, #26
     50a:	d415      	bmi.n	538 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     50c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     50e:	0020      	movs	r0, r4
     510:	68a3      	ldr	r3, [r4, #8]
     512:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     514:	2301      	movs	r3, #1
     516:	6822      	ldr	r2, [r4, #0]
     518:	7293      	strb	r3, [r2, #10]
     51a:	e7f1      	b.n	500 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     51c:	0020      	movs	r0, r4
     51e:	68e3      	ldr	r3, [r4, #12]
     520:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     522:	2302      	movs	r3, #2
     524:	6822      	ldr	r2, [r4, #0]
     526:	7293      	strb	r3, [r2, #10]
     528:	e7ec      	b.n	504 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     52a:	0020      	movs	r0, r4
     52c:	6923      	ldr	r3, [r4, #16]
     52e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     530:	2310      	movs	r3, #16
     532:	6822      	ldr	r2, [r4, #0]
     534:	7293      	strb	r3, [r2, #10]
     536:	e7e7      	b.n	508 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     538:	0020      	movs	r0, r4
     53a:	6963      	ldr	r3, [r4, #20]
     53c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     53e:	6823      	ldr	r3, [r4, #0]
     540:	2220      	movs	r2, #32
     542:	729a      	strb	r2, [r3, #10]
}
     544:	e7e2      	b.n	50c <_tc_interrupt_handler+0x24>
     546:	46c0      	nop			; (mov r8, r8)
     548:	200000b4 	.word	0x200000b4

0000054c <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     54c:	b510      	push	{r4, lr}
     54e:	2000      	movs	r0, #0
     550:	4b01      	ldr	r3, [pc, #4]	; (558 <TC0_Handler+0xc>)
     552:	4798      	blx	r3
     554:	bd10      	pop	{r4, pc}
     556:	46c0      	nop			; (mov r8, r8)
     558:	000004e9 	.word	0x000004e9

0000055c <TC1_Handler>:
     55c:	b510      	push	{r4, lr}
     55e:	2001      	movs	r0, #1
     560:	4b01      	ldr	r3, [pc, #4]	; (568 <TC1_Handler+0xc>)
     562:	4798      	blx	r3
     564:	bd10      	pop	{r4, pc}
     566:	46c0      	nop			; (mov r8, r8)
     568:	000004e9 	.word	0x000004e9

0000056c <TC2_Handler>:
     56c:	b510      	push	{r4, lr}
     56e:	2002      	movs	r0, #2
     570:	4b01      	ldr	r3, [pc, #4]	; (578 <TC2_Handler+0xc>)
     572:	4798      	blx	r3
     574:	bd10      	pop	{r4, pc}
     576:	46c0      	nop			; (mov r8, r8)
     578:	000004e9 	.word	0x000004e9

0000057c <TC3_Handler>:
     57c:	b510      	push	{r4, lr}
     57e:	2003      	movs	r0, #3
     580:	4b01      	ldr	r3, [pc, #4]	; (588 <TC3_Handler+0xc>)
     582:	4798      	blx	r3
     584:	bd10      	pop	{r4, pc}
     586:	46c0      	nop			; (mov r8, r8)
     588:	000004e9 	.word	0x000004e9

0000058c <TC4_Handler>:
     58c:	b510      	push	{r4, lr}
     58e:	2004      	movs	r0, #4
     590:	4b01      	ldr	r3, [pc, #4]	; (598 <TC4_Handler+0xc>)
     592:	4798      	blx	r3
     594:	bd10      	pop	{r4, pc}
     596:	46c0      	nop			; (mov r8, r8)
     598:	000004e9 	.word	0x000004e9

0000059c <SDADC_Handler>:
	}
}

/** Interrupt handler for the SDADC module. */
void SDADC_Handler(void)
{
     59c:	b570      	push	{r4, r5, r6, lr}
	struct sdadc_module *module = _sdadc_instances[instance];
     59e:	4b2a      	ldr	r3, [pc, #168]	; (648 <SDADC_Handler+0xac>)
     5a0:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     5a2:	6823      	ldr	r3, [r4, #0]
     5a4:	79dd      	ldrb	r5, [r3, #7]
     5a6:	b2ed      	uxtb	r5, r5
	if (flags & SDADC_INTFLAG_RESRDY) {
     5a8:	07ea      	lsls	r2, r5, #31
     5aa:	d518      	bpl.n	5de <SDADC_Handler+0x42>
		if ((module->enabled_callback_mask & (1 << SDADC_CALLBACK_READ_BUFFER)) &&
     5ac:	7ee2      	ldrb	r2, [r4, #27]
     5ae:	07d2      	lsls	r2, r2, #31
     5b0:	d515      	bpl.n	5de <SDADC_Handler+0x42>
     5b2:	7ea2      	ldrb	r2, [r4, #26]
     5b4:	07d2      	lsls	r2, r2, #31
     5b6:	d512      	bpl.n	5de <SDADC_Handler+0x42>
			module->hw->INTFLAG.reg = SDADC_INTFLAG_RESRDY;
     5b8:	2201      	movs	r2, #1
     5ba:	71da      	strb	r2, [r3, #7]
			*(module->job_buffer++) = ((int32_t)(module->hw->RESULT.reg << 8)) >> 8;
     5bc:	6962      	ldr	r2, [r4, #20]
     5be:	1d13      	adds	r3, r2, #4
     5c0:	6163      	str	r3, [r4, #20]
     5c2:	6823      	ldr	r3, [r4, #0]
     5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     5c6:	021b      	lsls	r3, r3, #8
     5c8:	121b      	asrs	r3, r3, #8
     5ca:	6013      	str	r3, [r2, #0]
			if (--module->remaining_conversions > 0) {
     5cc:	8b23      	ldrh	r3, [r4, #24]
     5ce:	3b01      	subs	r3, #1
     5d0:	b29b      	uxth	r3, r3
     5d2:	8323      	strh	r3, [r4, #24]
     5d4:	2b00      	cmp	r3, #0
     5d6:	d022      	beq.n	61e <SDADC_Handler+0x82>
				if (module->software_trigger == true) {
     5d8:	7f63      	ldrb	r3, [r4, #29]
     5da:	2b00      	cmp	r3, #0
     5dc:	d116      	bne.n	60c <SDADC_Handler+0x70>
	if (flags & SDADC_INTFLAG_WINMON) {
     5de:	076b      	lsls	r3, r5, #29
     5e0:	d508      	bpl.n	5f4 <SDADC_Handler+0x58>
		module->hw->INTFLAG.reg = SDADC_INTFLAG_WINMON;
     5e2:	2304      	movs	r3, #4
     5e4:	6822      	ldr	r2, [r4, #0]
     5e6:	71d3      	strb	r3, [r2, #7]
		if ((module->enabled_callback_mask & (1 << SDADC_CALLBACK_WINDOW)) &&
     5e8:	7ee3      	ldrb	r3, [r4, #27]
     5ea:	079b      	lsls	r3, r3, #30
     5ec:	d502      	bpl.n	5f4 <SDADC_Handler+0x58>
     5ee:	7ea3      	ldrb	r3, [r4, #26]
     5f0:	079b      	lsls	r3, r3, #30
     5f2:	d420      	bmi.n	636 <SDADC_Handler+0x9a>
	if (flags & SDADC_INTFLAG_OVERRUN) {
     5f4:	07ab      	lsls	r3, r5, #30
     5f6:	d508      	bpl.n	60a <SDADC_Handler+0x6e>
		module->hw->INTFLAG.reg = SDADC_INTFLAG_OVERRUN;
     5f8:	2302      	movs	r3, #2
     5fa:	6822      	ldr	r2, [r4, #0]
     5fc:	71d3      	strb	r3, [r2, #7]
		if ((module->enabled_callback_mask & (1 << SDADC_CALLBACK_ERROR)) &&
     5fe:	7ee3      	ldrb	r3, [r4, #27]
     600:	075b      	lsls	r3, r3, #29
     602:	d502      	bpl.n	60a <SDADC_Handler+0x6e>
     604:	7ea3      	ldrb	r3, [r4, #26]
     606:	075b      	lsls	r3, r3, #29
     608:	d419      	bmi.n	63e <SDADC_Handler+0xa2>
	_sdadc_interrupt_handler(0);
}
     60a:	bd70      	pop	{r4, r5, r6, pc}
		struct sdadc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Sdadc *const sdadc_module = module_inst->hw;
     60c:	6823      	ldr	r3, [r4, #0]
	if (sdadc_module->SYNCBUSY.reg) {
     60e:	6a1a      	ldr	r2, [r3, #32]

	while (sdadc_is_syncing(module_inst)) {
     610:	2a00      	cmp	r2, #0
     612:	d1fc      	bne.n	60e <SDADC_Handler+0x72>
		/* Wait for synchronization */
	}

	sdadc_module->SWTRIG.reg |= SDADC_SWTRIG_START;
     614:	7f1a      	ldrb	r2, [r3, #28]
     616:	2102      	movs	r1, #2
     618:	430a      	orrs	r2, r1
     61a:	771a      	strb	r2, [r3, #28]
     61c:	e7df      	b.n	5de <SDADC_Handler+0x42>
				if (module->job_status == STATUS_BUSY) {
     61e:	7f23      	ldrb	r3, [r4, #28]
     620:	2b05      	cmp	r3, #5
     622:	d1dc      	bne.n	5de <SDADC_Handler+0x42>
					module->job_status = STATUS_OK;
     624:	2300      	movs	r3, #0
     626:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Sdadc *const sdadc_module = module_inst->hw;
	/* Enable interrupt */
	sdadc_module->INTENCLR.reg = interrupt;
     628:	3301      	adds	r3, #1
     62a:	6822      	ldr	r2, [r4, #0]
     62c:	7153      	strb	r3, [r2, #5]
					(module->callback[SDADC_CALLBACK_READ_BUFFER])(module);
     62e:	0020      	movs	r0, r4
     630:	68a3      	ldr	r3, [r4, #8]
     632:	4798      	blx	r3
     634:	e7d3      	b.n	5de <SDADC_Handler+0x42>
			(module->callback[SDADC_CALLBACK_WINDOW])(module);
     636:	0020      	movs	r0, r4
     638:	68e3      	ldr	r3, [r4, #12]
     63a:	4798      	blx	r3
     63c:	e7da      	b.n	5f4 <SDADC_Handler+0x58>
			(module->callback[SDADC_CALLBACK_ERROR])(module);
     63e:	6923      	ldr	r3, [r4, #16]
     640:	0020      	movs	r0, r4
     642:	4798      	blx	r3
}
     644:	e7e1      	b.n	60a <SDADC_Handler+0x6e>
     646:	46c0      	nop			; (mov r8, r8)
     648:	200000c8 	.word	0x200000c8

0000064c <FREQM_Handler>:

/**
* \internal The FREQM interrupt handler.
*/
void FREQM_Handler(void)
{
     64c:	b510      	push	{r4, lr}
	/* Get device instance from the look-up table */
	struct freqm_module *module = _freqm_instance;

	/* Read and mask interrupt flag register */
	uint32_t status = FREQM->INTFLAG.reg;
     64e:	4b07      	ldr	r3, [pc, #28]	; (66c <FREQM_Handler+0x20>)
     650:	7a9b      	ldrb	r3, [r3, #10]

	/* Check if data ready needs to be serviced */
	if (status & FREQM_INTFLAG_DONE) {
     652:	07db      	lsls	r3, r3, #31
     654:	d509      	bpl.n	66a <FREQM_Handler+0x1e>
	struct freqm_module *module = _freqm_instance;
     656:	4b06      	ldr	r3, [pc, #24]	; (670 <FREQM_Handler+0x24>)
     658:	681b      	ldr	r3, [r3, #0]
		if (module->callback[FREQM_CALLBACK_MEASURE_DONE]) {
     65a:	689a      	ldr	r2, [r3, #8]
     65c:	2a00      	cmp	r2, #0
     65e:	d004      	beq.n	66a <FREQM_Handler+0x1e>
			FREQM->INTFLAG.reg = FREQM_INTFLAG_DONE;
     660:	2101      	movs	r1, #1
     662:	4a02      	ldr	r2, [pc, #8]	; (66c <FREQM_Handler+0x20>)
     664:	7291      	strb	r1, [r2, #10]
			module->callback[FREQM_CALLBACK_MEASURE_DONE]();
     666:	689b      	ldr	r3, [r3, #8]
     668:	4798      	blx	r3
		}
	}

}
     66a:	bd10      	pop	{r4, pc}
     66c:	40002c00 	.word	0x40002c00
     670:	200000cc 	.word	0x200000cc

00000674 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     674:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     676:	2200      	movs	r2, #0
     678:	4b10      	ldr	r3, [pc, #64]	; (6bc <EIC_Handler+0x48>)
     67a:	701a      	strb	r2, [r3, #0]
     67c:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     67e:	4910      	ldr	r1, [pc, #64]	; (6c0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     680:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     682:	4e10      	ldr	r6, [pc, #64]	; (6c4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     684:	4c0d      	ldr	r4, [pc, #52]	; (6bc <EIC_Handler+0x48>)
     686:	e00a      	b.n	69e <EIC_Handler+0x2a>
		return eics[eic_index];
     688:	490d      	ldr	r1, [pc, #52]	; (6c0 <EIC_Handler+0x4c>)
     68a:	e008      	b.n	69e <EIC_Handler+0x2a>
     68c:	7823      	ldrb	r3, [r4, #0]
     68e:	3301      	adds	r3, #1
     690:	b2db      	uxtb	r3, r3
     692:	7023      	strb	r3, [r4, #0]
     694:	2b0f      	cmp	r3, #15
     696:	d810      	bhi.n	6ba <EIC_Handler+0x46>
		return NULL;
     698:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     69a:	2b1f      	cmp	r3, #31
     69c:	d9f4      	bls.n	688 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     69e:	0028      	movs	r0, r5
     6a0:	4018      	ands	r0, r3
     6a2:	2201      	movs	r2, #1
     6a4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     6a6:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     6a8:	4210      	tst	r0, r2
     6aa:	d0ef      	beq.n	68c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     6ac:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     6ae:	009b      	lsls	r3, r3, #2
     6b0:	599b      	ldr	r3, [r3, r6]
     6b2:	2b00      	cmp	r3, #0
     6b4:	d0ea      	beq.n	68c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     6b6:	4798      	blx	r3
     6b8:	e7e8      	b.n	68c <EIC_Handler+0x18>
			}
		}
	}
}
     6ba:	bd70      	pop	{r4, r5, r6, pc}
     6bc:	200000d0 	.word	0x200000d0
     6c0:	40002800 	.word	0x40002800
     6c4:	20000060 	.word	0x20000060

000006c8 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
     6c8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
     6ca:	0080      	lsls	r0, r0, #2
     6cc:	4b1f      	ldr	r3, [pc, #124]	; (74c <_ac_interrupt_handler+0x84>)
     6ce:	58c4      	ldr	r4, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
     6d0:	6823      	ldr	r3, [r4, #0]
     6d2:	799d      	ldrb	r5, [r3, #6]
	interrupt_and_callback_status_mask =
     6d4:	7f22      	ldrb	r2, [r4, #28]
     6d6:	7f63      	ldrb	r3, [r4, #29]
     6d8:	4013      	ands	r3, r2
     6da:	401d      	ands	r5, r3
			(module->register_callback_mask & module->enable_callback_mask);

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
     6dc:	07eb      	lsls	r3, r5, #31
     6de:	d40a      	bmi.n	6f6 <_ac_interrupt_handler+0x2e>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
     6e0:	07ab      	lsls	r3, r5, #30
     6e2:	d40f      	bmi.n	704 <_ac_interrupt_handler+0x3c>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
     6e4:	06eb      	lsls	r3, r5, #27
     6e6:	d414      	bmi.n	712 <_ac_interrupt_handler+0x4a>
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
	}

#if (AC_NUM_CMP > 2)
		/* Check if comparator channel 2 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP2) {
     6e8:	076b      	lsls	r3, r5, #29
     6ea:	d419      	bmi.n	720 <_ac_interrupt_handler+0x58>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP2;
	}

	/* Check if comparator channel 3 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP3) {
     6ec:	072b      	lsls	r3, r5, #28
     6ee:	d41e      	bmi.n	72e <_ac_interrupt_handler+0x66>
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP3;
	}

#  if !(SAMC20)
		/* Check if window 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN1) {
     6f0:	06ab      	lsls	r3, r5, #26
     6f2:	d423      	bmi.n	73c <_ac_interrupt_handler+0x74>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
     6f4:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
     6f6:	0020      	movs	r0, r4
     6f8:	6863      	ldr	r3, [r4, #4]
     6fa:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
     6fc:	2301      	movs	r3, #1
     6fe:	6822      	ldr	r2, [r4, #0]
     700:	7193      	strb	r3, [r2, #6]
     702:	e7ed      	b.n	6e0 <_ac_interrupt_handler+0x18>
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
     704:	0020      	movs	r0, r4
     706:	68a3      	ldr	r3, [r4, #8]
     708:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
     70a:	2302      	movs	r3, #2
     70c:	6822      	ldr	r2, [r4, #0]
     70e:	7193      	strb	r3, [r2, #6]
     710:	e7e8      	b.n	6e4 <_ac_interrupt_handler+0x1c>
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
     712:	0020      	movs	r0, r4
     714:	6963      	ldr	r3, [r4, #20]
     716:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
     718:	2310      	movs	r3, #16
     71a:	6822      	ldr	r2, [r4, #0]
     71c:	7193      	strb	r3, [r2, #6]
     71e:	e7e3      	b.n	6e8 <_ac_interrupt_handler+0x20>
		(module->callback[AC_CALLBACK_COMPARATOR_2])(module);
     720:	0020      	movs	r0, r4
     722:	68e3      	ldr	r3, [r4, #12]
     724:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP2;
     726:	2304      	movs	r3, #4
     728:	6822      	ldr	r2, [r4, #0]
     72a:	7193      	strb	r3, [r2, #6]
     72c:	e7de      	b.n	6ec <_ac_interrupt_handler+0x24>
		(module->callback[AC_CALLBACK_COMPARATOR_3])(module);
     72e:	0020      	movs	r0, r4
     730:	6923      	ldr	r3, [r4, #16]
     732:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP3;
     734:	2308      	movs	r3, #8
     736:	6822      	ldr	r2, [r4, #0]
     738:	7193      	strb	r3, [r2, #6]
     73a:	e7d9      	b.n	6f0 <_ac_interrupt_handler+0x28>
		(module->callback[AC_CALLBACK_WINDOW_1])(module);
     73c:	0020      	movs	r0, r4
     73e:	69a3      	ldr	r3, [r4, #24]
     740:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
     742:	6823      	ldr	r3, [r4, #0]
     744:	2220      	movs	r2, #32
     746:	719a      	strb	r2, [r3, #6]
}
     748:	e7d4      	b.n	6f4 <_ac_interrupt_handler+0x2c>
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	200000d4 	.word	0x200000d4

00000750 <AC_Handler>:
{
     750:	b510      	push	{r4, lr}
	_ac_interrupt_handler(0);
     752:	2000      	movs	r0, #0
     754:	4b01      	ldr	r3, [pc, #4]	; (75c <AC_Handler+0xc>)
     756:	4798      	blx	r3
}
     758:	bd10      	pop	{r4, pc}
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	000006c9 	.word	0x000006c9

00000760 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     760:	4b0c      	ldr	r3, [pc, #48]	; (794 <cpu_irq_enter_critical+0x34>)
     762:	681b      	ldr	r3, [r3, #0]
     764:	2b00      	cmp	r3, #0
     766:	d106      	bne.n	776 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     768:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     76c:	2b00      	cmp	r3, #0
     76e:	d007      	beq.n	780 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     770:	2200      	movs	r2, #0
     772:	4b09      	ldr	r3, [pc, #36]	; (798 <cpu_irq_enter_critical+0x38>)
     774:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     776:	4a07      	ldr	r2, [pc, #28]	; (794 <cpu_irq_enter_critical+0x34>)
     778:	6813      	ldr	r3, [r2, #0]
     77a:	3301      	adds	r3, #1
     77c:	6013      	str	r3, [r2, #0]
}
     77e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     780:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     782:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     786:	2200      	movs	r2, #0
     788:	4b04      	ldr	r3, [pc, #16]	; (79c <cpu_irq_enter_critical+0x3c>)
     78a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     78c:	3201      	adds	r2, #1
     78e:	4b02      	ldr	r3, [pc, #8]	; (798 <cpu_irq_enter_critical+0x38>)
     790:	701a      	strb	r2, [r3, #0]
     792:	e7f0      	b.n	776 <cpu_irq_enter_critical+0x16>
     794:	20000020 	.word	0x20000020
     798:	20000024 	.word	0x20000024
     79c:	20000000 	.word	0x20000000

000007a0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     7a0:	4b08      	ldr	r3, [pc, #32]	; (7c4 <cpu_irq_leave_critical+0x24>)
     7a2:	681a      	ldr	r2, [r3, #0]
     7a4:	3a01      	subs	r2, #1
     7a6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     7a8:	681b      	ldr	r3, [r3, #0]
     7aa:	2b00      	cmp	r3, #0
     7ac:	d109      	bne.n	7c2 <cpu_irq_leave_critical+0x22>
     7ae:	4b06      	ldr	r3, [pc, #24]	; (7c8 <cpu_irq_leave_critical+0x28>)
     7b0:	781b      	ldrb	r3, [r3, #0]
     7b2:	2b00      	cmp	r3, #0
     7b4:	d005      	beq.n	7c2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     7b6:	2201      	movs	r2, #1
     7b8:	4b04      	ldr	r3, [pc, #16]	; (7cc <cpu_irq_leave_critical+0x2c>)
     7ba:	701a      	strb	r2, [r3, #0]
     7bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     7c0:	b662      	cpsie	i
	}
}
     7c2:	4770      	bx	lr
     7c4:	20000020 	.word	0x20000020
     7c8:	20000024 	.word	0x20000024
     7cc:	20000000 	.word	0x20000000

000007d0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7d2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     7d4:	ac01      	add	r4, sp, #4
     7d6:	2501      	movs	r5, #1
     7d8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     7da:	2700      	movs	r7, #0
     7dc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     7de:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     7e0:	0021      	movs	r1, r4
     7e2:	200f      	movs	r0, #15
     7e4:	4e06      	ldr	r6, [pc, #24]	; (800 <system_board_init+0x30>)
     7e6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     7e8:	2280      	movs	r2, #128	; 0x80
     7ea:	0212      	lsls	r2, r2, #8
     7ec:	2382      	movs	r3, #130	; 0x82
     7ee:	05db      	lsls	r3, r3, #23
     7f0:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     7f2:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     7f4:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     7f6:	0021      	movs	r1, r4
     7f8:	201c      	movs	r0, #28
     7fa:	47b0      	blx	r6
}
     7fc:	b003      	add	sp, #12
     7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     800:	00000805 	.word	0x00000805

00000804 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     804:	b500      	push	{lr}
     806:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     808:	ab01      	add	r3, sp, #4
     80a:	2280      	movs	r2, #128	; 0x80
     80c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     80e:	780a      	ldrb	r2, [r1, #0]
     810:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     812:	784a      	ldrb	r2, [r1, #1]
     814:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     816:	788a      	ldrb	r2, [r1, #2]
     818:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     81a:	0019      	movs	r1, r3
     81c:	4b01      	ldr	r3, [pc, #4]	; (824 <port_pin_set_config+0x20>)
     81e:	4798      	blx	r3
}
     820:	b003      	add	sp, #12
     822:	bd00      	pop	{pc}
     824:	00001601 	.word	0x00001601

00000828 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     828:	b5f0      	push	{r4, r5, r6, r7, lr}
     82a:	46de      	mov	lr, fp
     82c:	4657      	mov	r7, sl
     82e:	464e      	mov	r6, r9
     830:	4645      	mov	r5, r8
     832:	b5e0      	push	{r5, r6, r7, lr}
     834:	b087      	sub	sp, #28
     836:	4680      	mov	r8, r0
     838:	9104      	str	r1, [sp, #16]
     83a:	0016      	movs	r6, r2
     83c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     83e:	2200      	movs	r2, #0
     840:	2300      	movs	r3, #0
     842:	2100      	movs	r1, #0
     844:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     846:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     848:	2001      	movs	r0, #1
     84a:	0021      	movs	r1, r4
     84c:	9600      	str	r6, [sp, #0]
     84e:	9701      	str	r7, [sp, #4]
     850:	465c      	mov	r4, fp
     852:	9403      	str	r4, [sp, #12]
     854:	4644      	mov	r4, r8
     856:	9405      	str	r4, [sp, #20]
     858:	e013      	b.n	882 <long_division+0x5a>
     85a:	2420      	movs	r4, #32
     85c:	1a64      	subs	r4, r4, r1
     85e:	0005      	movs	r5, r0
     860:	40e5      	lsrs	r5, r4
     862:	46a8      	mov	r8, r5
     864:	e014      	b.n	890 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     866:	9c00      	ldr	r4, [sp, #0]
     868:	9d01      	ldr	r5, [sp, #4]
     86a:	1b12      	subs	r2, r2, r4
     86c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     86e:	465c      	mov	r4, fp
     870:	464d      	mov	r5, r9
     872:	432c      	orrs	r4, r5
     874:	46a3      	mov	fp, r4
     876:	9c03      	ldr	r4, [sp, #12]
     878:	4645      	mov	r5, r8
     87a:	432c      	orrs	r4, r5
     87c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     87e:	3901      	subs	r1, #1
     880:	d325      	bcc.n	8ce <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     882:	2420      	movs	r4, #32
     884:	4264      	negs	r4, r4
     886:	190c      	adds	r4, r1, r4
     888:	d4e7      	bmi.n	85a <long_division+0x32>
     88a:	0005      	movs	r5, r0
     88c:	40a5      	lsls	r5, r4
     88e:	46a8      	mov	r8, r5
     890:	0004      	movs	r4, r0
     892:	408c      	lsls	r4, r1
     894:	46a1      	mov	r9, r4
		r = r << 1;
     896:	1892      	adds	r2, r2, r2
     898:	415b      	adcs	r3, r3
     89a:	0014      	movs	r4, r2
     89c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     89e:	9e05      	ldr	r6, [sp, #20]
     8a0:	464f      	mov	r7, r9
     8a2:	403e      	ands	r6, r7
     8a4:	46b4      	mov	ip, r6
     8a6:	9e04      	ldr	r6, [sp, #16]
     8a8:	4647      	mov	r7, r8
     8aa:	403e      	ands	r6, r7
     8ac:	46b2      	mov	sl, r6
     8ae:	4666      	mov	r6, ip
     8b0:	4657      	mov	r7, sl
     8b2:	433e      	orrs	r6, r7
     8b4:	d003      	beq.n	8be <long_division+0x96>
			r |= 0x01;
     8b6:	0006      	movs	r6, r0
     8b8:	4326      	orrs	r6, r4
     8ba:	0032      	movs	r2, r6
     8bc:	002b      	movs	r3, r5
		if (r >= d) {
     8be:	9c00      	ldr	r4, [sp, #0]
     8c0:	9d01      	ldr	r5, [sp, #4]
     8c2:	429d      	cmp	r5, r3
     8c4:	d8db      	bhi.n	87e <long_division+0x56>
     8c6:	d1ce      	bne.n	866 <long_division+0x3e>
     8c8:	4294      	cmp	r4, r2
     8ca:	d8d8      	bhi.n	87e <long_division+0x56>
     8cc:	e7cb      	b.n	866 <long_division+0x3e>
     8ce:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     8d0:	4658      	mov	r0, fp
     8d2:	0019      	movs	r1, r3
     8d4:	b007      	add	sp, #28
     8d6:	bc3c      	pop	{r2, r3, r4, r5}
     8d8:	4690      	mov	r8, r2
     8da:	4699      	mov	r9, r3
     8dc:	46a2      	mov	sl, r4
     8de:	46ab      	mov	fp, r5
     8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000008e2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     8e2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     8e4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8e6:	2340      	movs	r3, #64	; 0x40
     8e8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     8ea:	4281      	cmp	r1, r0
     8ec:	d202      	bcs.n	8f4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     8ee:	0018      	movs	r0, r3
     8f0:	bd10      	pop	{r4, pc}
		baud_calculated++;
     8f2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     8f4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     8f6:	1c63      	adds	r3, r4, #1
     8f8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     8fa:	4288      	cmp	r0, r1
     8fc:	d9f9      	bls.n	8f2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8fe:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     900:	2cff      	cmp	r4, #255	; 0xff
     902:	d8f4      	bhi.n	8ee <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     904:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     906:	2300      	movs	r3, #0
     908:	e7f1      	b.n	8ee <_sercom_get_sync_baud_val+0xc>
	...

0000090c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     90c:	b5f0      	push	{r4, r5, r6, r7, lr}
     90e:	b083      	sub	sp, #12
     910:	000f      	movs	r7, r1
     912:	0016      	movs	r6, r2
     914:	aa08      	add	r2, sp, #32
     916:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     918:	0004      	movs	r4, r0
     91a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     91c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     91e:	42bc      	cmp	r4, r7
     920:	d902      	bls.n	928 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     922:	0010      	movs	r0, r2
     924:	b003      	add	sp, #12
     926:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     928:	2b00      	cmp	r3, #0
     92a:	d114      	bne.n	956 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     92c:	0002      	movs	r2, r0
     92e:	0008      	movs	r0, r1
     930:	2100      	movs	r1, #0
     932:	4c19      	ldr	r4, [pc, #100]	; (998 <_sercom_get_async_baud_val+0x8c>)
     934:	47a0      	blx	r4
     936:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     938:	003a      	movs	r2, r7
     93a:	2300      	movs	r3, #0
     93c:	2000      	movs	r0, #0
     93e:	4c17      	ldr	r4, [pc, #92]	; (99c <_sercom_get_async_baud_val+0x90>)
     940:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     942:	2200      	movs	r2, #0
     944:	2301      	movs	r3, #1
     946:	1a12      	subs	r2, r2, r0
     948:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     94a:	0c12      	lsrs	r2, r2, #16
     94c:	041b      	lsls	r3, r3, #16
     94e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     950:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     952:	2200      	movs	r2, #0
     954:	e7e5      	b.n	922 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     956:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     958:	2b01      	cmp	r3, #1
     95a:	d1f9      	bne.n	950 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     95c:	000a      	movs	r2, r1
     95e:	2300      	movs	r3, #0
     960:	2100      	movs	r1, #0
     962:	4c0d      	ldr	r4, [pc, #52]	; (998 <_sercom_get_async_baud_val+0x8c>)
     964:	47a0      	blx	r4
     966:	0002      	movs	r2, r0
     968:	000b      	movs	r3, r1
     96a:	9200      	str	r2, [sp, #0]
     96c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     96e:	0038      	movs	r0, r7
     970:	2100      	movs	r1, #0
     972:	4c0a      	ldr	r4, [pc, #40]	; (99c <_sercom_get_async_baud_val+0x90>)
     974:	47a0      	blx	r4
     976:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     978:	2380      	movs	r3, #128	; 0x80
     97a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     97c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     97e:	4298      	cmp	r0, r3
     980:	d8cf      	bhi.n	922 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     982:	0f79      	lsrs	r1, r7, #29
     984:	00f8      	lsls	r0, r7, #3
     986:	9a00      	ldr	r2, [sp, #0]
     988:	9b01      	ldr	r3, [sp, #4]
     98a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     98c:	00ea      	lsls	r2, r5, #3
     98e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     990:	b2d2      	uxtb	r2, r2
     992:	0352      	lsls	r2, r2, #13
     994:	432a      	orrs	r2, r5
     996:	e7db      	b.n	950 <_sercom_get_async_baud_val+0x44>
     998:	000024b9 	.word	0x000024b9
     99c:	00000829 	.word	0x00000829

000009a0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     9a0:	b510      	push	{r4, lr}
     9a2:	b082      	sub	sp, #8
     9a4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     9a6:	4b0e      	ldr	r3, [pc, #56]	; (9e0 <sercom_set_gclk_generator+0x40>)
     9a8:	781b      	ldrb	r3, [r3, #0]
     9aa:	2b00      	cmp	r3, #0
     9ac:	d007      	beq.n	9be <sercom_set_gclk_generator+0x1e>
     9ae:	2900      	cmp	r1, #0
     9b0:	d105      	bne.n	9be <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     9b2:	4b0b      	ldr	r3, [pc, #44]	; (9e0 <sercom_set_gclk_generator+0x40>)
     9b4:	785b      	ldrb	r3, [r3, #1]
     9b6:	4283      	cmp	r3, r0
     9b8:	d010      	beq.n	9dc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     9ba:	201d      	movs	r0, #29
     9bc:	e00c      	b.n	9d8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     9be:	a901      	add	r1, sp, #4
     9c0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     9c2:	2012      	movs	r0, #18
     9c4:	4b07      	ldr	r3, [pc, #28]	; (9e4 <sercom_set_gclk_generator+0x44>)
     9c6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     9c8:	2012      	movs	r0, #18
     9ca:	4b07      	ldr	r3, [pc, #28]	; (9e8 <sercom_set_gclk_generator+0x48>)
     9cc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     9ce:	4b04      	ldr	r3, [pc, #16]	; (9e0 <sercom_set_gclk_generator+0x40>)
     9d0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     9d2:	2201      	movs	r2, #1
     9d4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     9d6:	2000      	movs	r0, #0
}
     9d8:	b002      	add	sp, #8
     9da:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     9dc:	2000      	movs	r0, #0
     9de:	e7fb      	b.n	9d8 <sercom_set_gclk_generator+0x38>
     9e0:	20000028 	.word	0x20000028
     9e4:	00001505 	.word	0x00001505
     9e8:	00001495 	.word	0x00001495

000009ec <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     9ec:	4b40      	ldr	r3, [pc, #256]	; (af0 <_sercom_get_default_pad+0x104>)
     9ee:	4298      	cmp	r0, r3
     9f0:	d031      	beq.n	a56 <_sercom_get_default_pad+0x6a>
     9f2:	d90a      	bls.n	a0a <_sercom_get_default_pad+0x1e>
     9f4:	4b3f      	ldr	r3, [pc, #252]	; (af4 <_sercom_get_default_pad+0x108>)
     9f6:	4298      	cmp	r0, r3
     9f8:	d04d      	beq.n	a96 <_sercom_get_default_pad+0xaa>
     9fa:	4b3f      	ldr	r3, [pc, #252]	; (af8 <_sercom_get_default_pad+0x10c>)
     9fc:	4298      	cmp	r0, r3
     9fe:	d05a      	beq.n	ab6 <_sercom_get_default_pad+0xca>
     a00:	4b3e      	ldr	r3, [pc, #248]	; (afc <_sercom_get_default_pad+0x110>)
     a02:	4298      	cmp	r0, r3
     a04:	d037      	beq.n	a76 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     a06:	2000      	movs	r0, #0
}
     a08:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     a0a:	4b3d      	ldr	r3, [pc, #244]	; (b00 <_sercom_get_default_pad+0x114>)
     a0c:	4298      	cmp	r0, r3
     a0e:	d00c      	beq.n	a2a <_sercom_get_default_pad+0x3e>
     a10:	4b3c      	ldr	r3, [pc, #240]	; (b04 <_sercom_get_default_pad+0x118>)
     a12:	4298      	cmp	r0, r3
     a14:	d1f7      	bne.n	a06 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a16:	2901      	cmp	r1, #1
     a18:	d017      	beq.n	a4a <_sercom_get_default_pad+0x5e>
     a1a:	2900      	cmp	r1, #0
     a1c:	d05d      	beq.n	ada <_sercom_get_default_pad+0xee>
     a1e:	2902      	cmp	r1, #2
     a20:	d015      	beq.n	a4e <_sercom_get_default_pad+0x62>
     a22:	2903      	cmp	r1, #3
     a24:	d015      	beq.n	a52 <_sercom_get_default_pad+0x66>
	return 0;
     a26:	2000      	movs	r0, #0
     a28:	e7ee      	b.n	a08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a2a:	2901      	cmp	r1, #1
     a2c:	d007      	beq.n	a3e <_sercom_get_default_pad+0x52>
     a2e:	2900      	cmp	r1, #0
     a30:	d051      	beq.n	ad6 <_sercom_get_default_pad+0xea>
     a32:	2902      	cmp	r1, #2
     a34:	d005      	beq.n	a42 <_sercom_get_default_pad+0x56>
     a36:	2903      	cmp	r1, #3
     a38:	d005      	beq.n	a46 <_sercom_get_default_pad+0x5a>
	return 0;
     a3a:	2000      	movs	r0, #0
     a3c:	e7e4      	b.n	a08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a3e:	4832      	ldr	r0, [pc, #200]	; (b08 <_sercom_get_default_pad+0x11c>)
     a40:	e7e2      	b.n	a08 <_sercom_get_default_pad+0x1c>
     a42:	4832      	ldr	r0, [pc, #200]	; (b0c <_sercom_get_default_pad+0x120>)
     a44:	e7e0      	b.n	a08 <_sercom_get_default_pad+0x1c>
     a46:	4832      	ldr	r0, [pc, #200]	; (b10 <_sercom_get_default_pad+0x124>)
     a48:	e7de      	b.n	a08 <_sercom_get_default_pad+0x1c>
     a4a:	4832      	ldr	r0, [pc, #200]	; (b14 <_sercom_get_default_pad+0x128>)
     a4c:	e7dc      	b.n	a08 <_sercom_get_default_pad+0x1c>
     a4e:	4832      	ldr	r0, [pc, #200]	; (b18 <_sercom_get_default_pad+0x12c>)
     a50:	e7da      	b.n	a08 <_sercom_get_default_pad+0x1c>
     a52:	4832      	ldr	r0, [pc, #200]	; (b1c <_sercom_get_default_pad+0x130>)
     a54:	e7d8      	b.n	a08 <_sercom_get_default_pad+0x1c>
     a56:	2901      	cmp	r1, #1
     a58:	d007      	beq.n	a6a <_sercom_get_default_pad+0x7e>
     a5a:	2900      	cmp	r1, #0
     a5c:	d03f      	beq.n	ade <_sercom_get_default_pad+0xf2>
     a5e:	2902      	cmp	r1, #2
     a60:	d005      	beq.n	a6e <_sercom_get_default_pad+0x82>
     a62:	2903      	cmp	r1, #3
     a64:	d005      	beq.n	a72 <_sercom_get_default_pad+0x86>
	return 0;
     a66:	2000      	movs	r0, #0
     a68:	e7ce      	b.n	a08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a6a:	482d      	ldr	r0, [pc, #180]	; (b20 <_sercom_get_default_pad+0x134>)
     a6c:	e7cc      	b.n	a08 <_sercom_get_default_pad+0x1c>
     a6e:	482d      	ldr	r0, [pc, #180]	; (b24 <_sercom_get_default_pad+0x138>)
     a70:	e7ca      	b.n	a08 <_sercom_get_default_pad+0x1c>
     a72:	482d      	ldr	r0, [pc, #180]	; (b28 <_sercom_get_default_pad+0x13c>)
     a74:	e7c8      	b.n	a08 <_sercom_get_default_pad+0x1c>
     a76:	2901      	cmp	r1, #1
     a78:	d007      	beq.n	a8a <_sercom_get_default_pad+0x9e>
     a7a:	2900      	cmp	r1, #0
     a7c:	d031      	beq.n	ae2 <_sercom_get_default_pad+0xf6>
     a7e:	2902      	cmp	r1, #2
     a80:	d005      	beq.n	a8e <_sercom_get_default_pad+0xa2>
     a82:	2903      	cmp	r1, #3
     a84:	d005      	beq.n	a92 <_sercom_get_default_pad+0xa6>
	return 0;
     a86:	2000      	movs	r0, #0
     a88:	e7be      	b.n	a08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a8a:	4828      	ldr	r0, [pc, #160]	; (b2c <_sercom_get_default_pad+0x140>)
     a8c:	e7bc      	b.n	a08 <_sercom_get_default_pad+0x1c>
     a8e:	4828      	ldr	r0, [pc, #160]	; (b30 <_sercom_get_default_pad+0x144>)
     a90:	e7ba      	b.n	a08 <_sercom_get_default_pad+0x1c>
     a92:	4828      	ldr	r0, [pc, #160]	; (b34 <_sercom_get_default_pad+0x148>)
     a94:	e7b8      	b.n	a08 <_sercom_get_default_pad+0x1c>
     a96:	2901      	cmp	r1, #1
     a98:	d007      	beq.n	aaa <_sercom_get_default_pad+0xbe>
     a9a:	2900      	cmp	r1, #0
     a9c:	d023      	beq.n	ae6 <_sercom_get_default_pad+0xfa>
     a9e:	2902      	cmp	r1, #2
     aa0:	d005      	beq.n	aae <_sercom_get_default_pad+0xc2>
     aa2:	2903      	cmp	r1, #3
     aa4:	d005      	beq.n	ab2 <_sercom_get_default_pad+0xc6>
	return 0;
     aa6:	2000      	movs	r0, #0
     aa8:	e7ae      	b.n	a08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     aaa:	4823      	ldr	r0, [pc, #140]	; (b38 <_sercom_get_default_pad+0x14c>)
     aac:	e7ac      	b.n	a08 <_sercom_get_default_pad+0x1c>
     aae:	4823      	ldr	r0, [pc, #140]	; (b3c <_sercom_get_default_pad+0x150>)
     ab0:	e7aa      	b.n	a08 <_sercom_get_default_pad+0x1c>
     ab2:	4823      	ldr	r0, [pc, #140]	; (b40 <_sercom_get_default_pad+0x154>)
     ab4:	e7a8      	b.n	a08 <_sercom_get_default_pad+0x1c>
     ab6:	2901      	cmp	r1, #1
     ab8:	d007      	beq.n	aca <_sercom_get_default_pad+0xde>
     aba:	2900      	cmp	r1, #0
     abc:	d015      	beq.n	aea <_sercom_get_default_pad+0xfe>
     abe:	2902      	cmp	r1, #2
     ac0:	d005      	beq.n	ace <_sercom_get_default_pad+0xe2>
     ac2:	2903      	cmp	r1, #3
     ac4:	d005      	beq.n	ad2 <_sercom_get_default_pad+0xe6>
	return 0;
     ac6:	2000      	movs	r0, #0
     ac8:	e79e      	b.n	a08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     aca:	481e      	ldr	r0, [pc, #120]	; (b44 <_sercom_get_default_pad+0x158>)
     acc:	e79c      	b.n	a08 <_sercom_get_default_pad+0x1c>
     ace:	481e      	ldr	r0, [pc, #120]	; (b48 <_sercom_get_default_pad+0x15c>)
     ad0:	e79a      	b.n	a08 <_sercom_get_default_pad+0x1c>
     ad2:	481e      	ldr	r0, [pc, #120]	; (b4c <_sercom_get_default_pad+0x160>)
     ad4:	e798      	b.n	a08 <_sercom_get_default_pad+0x1c>
     ad6:	481e      	ldr	r0, [pc, #120]	; (b50 <_sercom_get_default_pad+0x164>)
     ad8:	e796      	b.n	a08 <_sercom_get_default_pad+0x1c>
     ada:	481e      	ldr	r0, [pc, #120]	; (b54 <_sercom_get_default_pad+0x168>)
     adc:	e794      	b.n	a08 <_sercom_get_default_pad+0x1c>
     ade:	481e      	ldr	r0, [pc, #120]	; (b58 <_sercom_get_default_pad+0x16c>)
     ae0:	e792      	b.n	a08 <_sercom_get_default_pad+0x1c>
     ae2:	481e      	ldr	r0, [pc, #120]	; (b5c <_sercom_get_default_pad+0x170>)
     ae4:	e790      	b.n	a08 <_sercom_get_default_pad+0x1c>
     ae6:	481e      	ldr	r0, [pc, #120]	; (b60 <_sercom_get_default_pad+0x174>)
     ae8:	e78e      	b.n	a08 <_sercom_get_default_pad+0x1c>
     aea:	481e      	ldr	r0, [pc, #120]	; (b64 <_sercom_get_default_pad+0x178>)
     aec:	e78c      	b.n	a08 <_sercom_get_default_pad+0x1c>
     aee:	46c0      	nop			; (mov r8, r8)
     af0:	42000c00 	.word	0x42000c00
     af4:	42001400 	.word	0x42001400
     af8:	42001800 	.word	0x42001800
     afc:	42001000 	.word	0x42001000
     b00:	42000400 	.word	0x42000400
     b04:	42000800 	.word	0x42000800
     b08:	00050003 	.word	0x00050003
     b0c:	00060003 	.word	0x00060003
     b10:	00070003 	.word	0x00070003
     b14:	00110002 	.word	0x00110002
     b18:	00120002 	.word	0x00120002
     b1c:	00130002 	.word	0x00130002
     b20:	000d0002 	.word	0x000d0002
     b24:	000e0002 	.word	0x000e0002
     b28:	000f0002 	.word	0x000f0002
     b2c:	00170002 	.word	0x00170002
     b30:	00180002 	.word	0x00180002
     b34:	00190002 	.word	0x00190002
     b38:	00290003 	.word	0x00290003
     b3c:	002a0003 	.word	0x002a0003
     b40:	002b0003 	.word	0x002b0003
     b44:	00230003 	.word	0x00230003
     b48:	00200003 	.word	0x00200003
     b4c:	00210003 	.word	0x00210003
     b50:	00040003 	.word	0x00040003
     b54:	00100002 	.word	0x00100002
     b58:	000c0002 	.word	0x000c0002
     b5c:	00160002 	.word	0x00160002
     b60:	00280003 	.word	0x00280003
     b64:	00220003 	.word	0x00220003

00000b68 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     b68:	b530      	push	{r4, r5, lr}
     b6a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     b6c:	4b0b      	ldr	r3, [pc, #44]	; (b9c <_sercom_get_sercom_inst_index+0x34>)
     b6e:	466a      	mov	r2, sp
     b70:	cb32      	ldmia	r3!, {r1, r4, r5}
     b72:	c232      	stmia	r2!, {r1, r4, r5}
     b74:	cb32      	ldmia	r3!, {r1, r4, r5}
     b76:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     b78:	9b00      	ldr	r3, [sp, #0]
     b7a:	4283      	cmp	r3, r0
     b7c:	d00b      	beq.n	b96 <_sercom_get_sercom_inst_index+0x2e>
     b7e:	2301      	movs	r3, #1
     b80:	009a      	lsls	r2, r3, #2
     b82:	4669      	mov	r1, sp
     b84:	5852      	ldr	r2, [r2, r1]
     b86:	4282      	cmp	r2, r0
     b88:	d006      	beq.n	b98 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b8a:	3301      	adds	r3, #1
     b8c:	2b06      	cmp	r3, #6
     b8e:	d1f7      	bne.n	b80 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     b90:	2000      	movs	r0, #0
}
     b92:	b007      	add	sp, #28
     b94:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b96:	2300      	movs	r3, #0
			return i;
     b98:	b2d8      	uxtb	r0, r3
     b9a:	e7fa      	b.n	b92 <_sercom_get_sercom_inst_index+0x2a>
     b9c:	00002598 	.word	0x00002598

00000ba0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     ba0:	4770      	bx	lr
	...

00000ba4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     ba6:	4b0a      	ldr	r3, [pc, #40]	; (bd0 <_sercom_set_handler+0x2c>)
     ba8:	781b      	ldrb	r3, [r3, #0]
     baa:	2b00      	cmp	r3, #0
     bac:	d10c      	bne.n	bc8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     bae:	4f09      	ldr	r7, [pc, #36]	; (bd4 <_sercom_set_handler+0x30>)
     bb0:	4e09      	ldr	r6, [pc, #36]	; (bd8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     bb2:	4d0a      	ldr	r5, [pc, #40]	; (bdc <_sercom_set_handler+0x38>)
     bb4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     bb6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     bb8:	195a      	adds	r2, r3, r5
     bba:	6014      	str	r4, [r2, #0]
     bbc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     bbe:	2b18      	cmp	r3, #24
     bc0:	d1f9      	bne.n	bb6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     bc2:	2201      	movs	r2, #1
     bc4:	4b02      	ldr	r3, [pc, #8]	; (bd0 <_sercom_set_handler+0x2c>)
     bc6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     bc8:	0080      	lsls	r0, r0, #2
     bca:	4b02      	ldr	r3, [pc, #8]	; (bd4 <_sercom_set_handler+0x30>)
     bcc:	50c1      	str	r1, [r0, r3]
}
     bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bd0:	2000002a 	.word	0x2000002a
     bd4:	2000002c 	.word	0x2000002c
     bd8:	00000ba1 	.word	0x00000ba1
     bdc:	200000d8 	.word	0x200000d8

00000be0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     be0:	b500      	push	{lr}
     be2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     be4:	2309      	movs	r3, #9
     be6:	466a      	mov	r2, sp
     be8:	7013      	strb	r3, [r2, #0]
     bea:	3301      	adds	r3, #1
     bec:	7053      	strb	r3, [r2, #1]
     bee:	3301      	adds	r3, #1
     bf0:	7093      	strb	r3, [r2, #2]
     bf2:	3301      	adds	r3, #1
     bf4:	70d3      	strb	r3, [r2, #3]
     bf6:	3301      	adds	r3, #1
     bf8:	7113      	strb	r3, [r2, #4]
     bfa:	3301      	adds	r3, #1
     bfc:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     bfe:	4b03      	ldr	r3, [pc, #12]	; (c0c <_sercom_get_interrupt_vector+0x2c>)
     c00:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     c02:	466b      	mov	r3, sp
     c04:	5618      	ldrsb	r0, [r3, r0]
}
     c06:	b003      	add	sp, #12
     c08:	bd00      	pop	{pc}
     c0a:	46c0      	nop			; (mov r8, r8)
     c0c:	00000b69 	.word	0x00000b69

00000c10 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     c10:	b510      	push	{r4, lr}
     c12:	4b02      	ldr	r3, [pc, #8]	; (c1c <SERCOM0_Handler+0xc>)
     c14:	681b      	ldr	r3, [r3, #0]
     c16:	2000      	movs	r0, #0
     c18:	4798      	blx	r3
     c1a:	bd10      	pop	{r4, pc}
     c1c:	2000002c 	.word	0x2000002c

00000c20 <SERCOM1_Handler>:
     c20:	b510      	push	{r4, lr}
     c22:	4b02      	ldr	r3, [pc, #8]	; (c2c <SERCOM1_Handler+0xc>)
     c24:	685b      	ldr	r3, [r3, #4]
     c26:	2001      	movs	r0, #1
     c28:	4798      	blx	r3
     c2a:	bd10      	pop	{r4, pc}
     c2c:	2000002c 	.word	0x2000002c

00000c30 <SERCOM2_Handler>:
     c30:	b510      	push	{r4, lr}
     c32:	4b02      	ldr	r3, [pc, #8]	; (c3c <SERCOM2_Handler+0xc>)
     c34:	689b      	ldr	r3, [r3, #8]
     c36:	2002      	movs	r0, #2
     c38:	4798      	blx	r3
     c3a:	bd10      	pop	{r4, pc}
     c3c:	2000002c 	.word	0x2000002c

00000c40 <SERCOM3_Handler>:
     c40:	b510      	push	{r4, lr}
     c42:	4b02      	ldr	r3, [pc, #8]	; (c4c <SERCOM3_Handler+0xc>)
     c44:	68db      	ldr	r3, [r3, #12]
     c46:	2003      	movs	r0, #3
     c48:	4798      	blx	r3
     c4a:	bd10      	pop	{r4, pc}
     c4c:	2000002c 	.word	0x2000002c

00000c50 <SERCOM4_Handler>:
     c50:	b510      	push	{r4, lr}
     c52:	4b02      	ldr	r3, [pc, #8]	; (c5c <SERCOM4_Handler+0xc>)
     c54:	691b      	ldr	r3, [r3, #16]
     c56:	2004      	movs	r0, #4
     c58:	4798      	blx	r3
     c5a:	bd10      	pop	{r4, pc}
     c5c:	2000002c 	.word	0x2000002c

00000c60 <SERCOM5_Handler>:
     c60:	b510      	push	{r4, lr}
     c62:	4b02      	ldr	r3, [pc, #8]	; (c6c <SERCOM5_Handler+0xc>)
     c64:	695b      	ldr	r3, [r3, #20]
     c66:	2005      	movs	r0, #5
     c68:	4798      	blx	r3
     c6a:	bd10      	pop	{r4, pc}
     c6c:	2000002c 	.word	0x2000002c

00000c70 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     c70:	b5f0      	push	{r4, r5, r6, r7, lr}
     c72:	46de      	mov	lr, fp
     c74:	4657      	mov	r7, sl
     c76:	464e      	mov	r6, r9
     c78:	4645      	mov	r5, r8
     c7a:	b5e0      	push	{r5, r6, r7, lr}
     c7c:	b091      	sub	sp, #68	; 0x44
     c7e:	0005      	movs	r5, r0
     c80:	000c      	movs	r4, r1
     c82:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     c84:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c86:	0008      	movs	r0, r1
     c88:	4bd3      	ldr	r3, [pc, #844]	; (fd8 <usart_init+0x368>)
     c8a:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
     c8c:	2805      	cmp	r0, #5
     c8e:	d00d      	beq.n	cac <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
     c90:	0007      	movs	r7, r0
     c92:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     c94:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     c96:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     c98:	07d2      	lsls	r2, r2, #31
     c9a:	d509      	bpl.n	cb0 <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     c9c:	0018      	movs	r0, r3
     c9e:	b011      	add	sp, #68	; 0x44
     ca0:	bc3c      	pop	{r2, r3, r4, r5}
     ca2:	4690      	mov	r8, r2
     ca4:	4699      	mov	r9, r3
     ca6:	46a2      	mov	sl, r4
     ca8:	46ab      	mov	fp, r5
     caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
     cac:	2719      	movs	r7, #25
     cae:	e7f1      	b.n	c94 <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     cb0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     cb2:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     cb4:	0792      	lsls	r2, r2, #30
     cb6:	d4f1      	bmi.n	c9c <usart_init+0x2c>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     cb8:	4ac8      	ldr	r2, [pc, #800]	; (fdc <usart_init+0x36c>)
     cba:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     cbc:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     cbe:	3b1b      	subs	r3, #27
     cc0:	4083      	lsls	r3, r0
     cc2:	430b      	orrs	r3, r1
     cc4:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
     cc6:	a90f      	add	r1, sp, #60	; 0x3c
     cc8:	2335      	movs	r3, #53	; 0x35
     cca:	4698      	mov	r8, r3
     ccc:	5cf3      	ldrb	r3, [r6, r3]
     cce:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     cd0:	b2ff      	uxtb	r7, r7
     cd2:	0038      	movs	r0, r7
     cd4:	4bc2      	ldr	r3, [pc, #776]	; (fe0 <usart_init+0x370>)
     cd6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     cd8:	0038      	movs	r0, r7
     cda:	4bc2      	ldr	r3, [pc, #776]	; (fe4 <usart_init+0x374>)
     cdc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     cde:	4643      	mov	r3, r8
     ce0:	5cf0      	ldrb	r0, [r6, r3]
     ce2:	2100      	movs	r1, #0
     ce4:	4bc0      	ldr	r3, [pc, #768]	; (fe8 <usart_init+0x378>)
     ce6:	4798      	blx	r3
	module->character_size = config->character_size;
     ce8:	7af3      	ldrb	r3, [r6, #11]
     cea:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     cec:	232c      	movs	r3, #44	; 0x2c
     cee:	5cf3      	ldrb	r3, [r6, r3]
     cf0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     cf2:	232d      	movs	r3, #45	; 0x2d
     cf4:	5cf3      	ldrb	r3, [r6, r3]
     cf6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     cf8:	7ef3      	ldrb	r3, [r6, #27]
     cfa:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     cfc:	2324      	movs	r3, #36	; 0x24
     cfe:	5cf3      	ldrb	r3, [r6, r3]
     d00:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     d02:	682b      	ldr	r3, [r5, #0]
     d04:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d06:	0018      	movs	r0, r3
     d08:	4bb3      	ldr	r3, [pc, #716]	; (fd8 <usart_init+0x368>)
     d0a:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d0c:	3013      	adds	r0, #19
	uint16_t baud  = 0;
     d0e:	2200      	movs	r2, #0
     d10:	230e      	movs	r3, #14
     d12:	a906      	add	r1, sp, #24
     d14:	468c      	mov	ip, r1
     d16:	4463      	add	r3, ip
     d18:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     d1a:	8a33      	ldrh	r3, [r6, #16]
     d1c:	4698      	mov	r8, r3
     d1e:	2380      	movs	r3, #128	; 0x80
     d20:	01db      	lsls	r3, r3, #7
     d22:	4598      	cmp	r8, r3
     d24:	d100      	bne.n	d28 <usart_init+0xb8>
     d26:	e0c6      	b.n	eb6 <usart_init+0x246>
     d28:	d90e      	bls.n	d48 <usart_init+0xd8>
     d2a:	23c0      	movs	r3, #192	; 0xc0
     d2c:	01db      	lsls	r3, r3, #7
     d2e:	4598      	cmp	r8, r3
     d30:	d100      	bne.n	d34 <usart_init+0xc4>
     d32:	e0bb      	b.n	eac <usart_init+0x23c>
     d34:	2380      	movs	r3, #128	; 0x80
     d36:	021b      	lsls	r3, r3, #8
     d38:	4598      	cmp	r8, r3
     d3a:	d000      	beq.n	d3e <usart_init+0xce>
     d3c:	e16a      	b.n	1014 <usart_init+0x3a4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     d3e:	2303      	movs	r3, #3
     d40:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d42:	2300      	movs	r3, #0
     d44:	9307      	str	r3, [sp, #28]
     d46:	e008      	b.n	d5a <usart_init+0xea>
	switch (config->sample_rate) {
     d48:	2380      	movs	r3, #128	; 0x80
     d4a:	019b      	lsls	r3, r3, #6
     d4c:	4598      	cmp	r8, r3
     d4e:	d000      	beq.n	d52 <usart_init+0xe2>
     d50:	e160      	b.n	1014 <usart_init+0x3a4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     d52:	2310      	movs	r3, #16
     d54:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     d56:	3b0f      	subs	r3, #15
     d58:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     d5a:	6833      	ldr	r3, [r6, #0]
     d5c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     d5e:	68f3      	ldr	r3, [r6, #12]
     d60:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     d62:	6973      	ldr	r3, [r6, #20]
     d64:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     d66:	7e33      	ldrb	r3, [r6, #24]
     d68:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d6a:	232e      	movs	r3, #46	; 0x2e
     d6c:	5cf3      	ldrb	r3, [r6, r3]
     d6e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     d70:	6873      	ldr	r3, [r6, #4]
     d72:	4699      	mov	r9, r3
	switch (transfer_mode)
     d74:	2b00      	cmp	r3, #0
     d76:	d100      	bne.n	d7a <usart_init+0x10a>
     d78:	e0ca      	b.n	f10 <usart_init+0x2a0>
     d7a:	2380      	movs	r3, #128	; 0x80
     d7c:	055b      	lsls	r3, r3, #21
     d7e:	4599      	cmp	r9, r3
     d80:	d100      	bne.n	d84 <usart_init+0x114>
     d82:	e0ad      	b.n	ee0 <usart_init+0x270>
	if(config->encoding_format_enable) {
     d84:	7e73      	ldrb	r3, [r6, #25]
     d86:	2b00      	cmp	r3, #0
     d88:	d002      	beq.n	d90 <usart_init+0x120>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     d8a:	7eb3      	ldrb	r3, [r6, #26]
     d8c:	9a02      	ldr	r2, [sp, #8]
     d8e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     d90:	682a      	ldr	r2, [r5, #0]
     d92:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d94:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     d96:	2b00      	cmp	r3, #0
     d98:	d1fc      	bne.n	d94 <usart_init+0x124>
     d9a:	9702      	str	r7, [sp, #8]
	usart_hw->BAUD.reg = baud;
     d9c:	330e      	adds	r3, #14
     d9e:	a906      	add	r1, sp, #24
     da0:	468c      	mov	ip, r1
     da2:	4463      	add	r3, ip
     da4:	881b      	ldrh	r3, [r3, #0]
     da6:	81bb      	strh	r3, [r7, #12]
	ctrla |= transfer_mode;
     da8:	9a05      	ldr	r2, [sp, #20]
     daa:	9b03      	ldr	r3, [sp, #12]
     dac:	431a      	orrs	r2, r3
     dae:	9b04      	ldr	r3, [sp, #16]
     db0:	431a      	orrs	r2, r3
     db2:	464b      	mov	r3, r9
     db4:	431a      	orrs	r2, r3
     db6:	4643      	mov	r3, r8
     db8:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     dba:	465b      	mov	r3, fp
     dbc:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     dbe:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     dc0:	4653      	mov	r3, sl
     dc2:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     dc4:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
     dc6:	232f      	movs	r3, #47	; 0x2f
     dc8:	5cf3      	ldrb	r3, [r6, r3]
     dca:	2b00      	cmp	r3, #0
     dcc:	d101      	bne.n	dd2 <usart_init+0x162>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     dce:	3304      	adds	r3, #4
     dd0:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     dd2:	7e73      	ldrb	r3, [r6, #25]
     dd4:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     dd6:	2124      	movs	r1, #36	; 0x24
     dd8:	5c71      	ldrb	r1, [r6, r1]
     dda:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     ddc:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     dde:	2126      	movs	r1, #38	; 0x26
     de0:	5c71      	ldrb	r1, [r6, r1]
     de2:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     de4:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     de6:	212c      	movs	r1, #44	; 0x2c
     de8:	5c71      	ldrb	r1, [r6, r1]
     dea:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     dec:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     dee:	212d      	movs	r1, #45	; 0x2d
     df0:	5c71      	ldrb	r1, [r6, r1]
     df2:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     df4:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     df6:	7ab0      	ldrb	r0, [r6, #10]
     df8:	7af1      	ldrb	r1, [r6, #11]
     dfa:	4308      	orrs	r0, r1
     dfc:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
     dfe:	8933      	ldrh	r3, [r6, #8]
     e00:	2bff      	cmp	r3, #255	; 0xff
     e02:	d100      	bne.n	e06 <usart_init+0x196>
     e04:	e0aa      	b.n	f5c <usart_init+0x2ec>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     e06:	2180      	movs	r1, #128	; 0x80
     e08:	0449      	lsls	r1, r1, #17
     e0a:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
     e0c:	4318      	orrs	r0, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     e0e:	9902      	ldr	r1, [sp, #8]
     e10:	688b      	ldr	r3, [r1, #8]
     e12:	469c      	mov	ip, r3
						| config->lin_break_length;
     e14:	8c33      	ldrh	r3, [r6, #32]
     e16:	8c71      	ldrh	r1, [r6, #34]	; 0x22
     e18:	430b      	orrs	r3, r1
     e1a:	001f      	movs	r7, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     e1c:	2107      	movs	r1, #7
     e1e:	4663      	mov	r3, ip
     e20:	4019      	ands	r1, r3
						| config->lin_break_length;
     e22:	003b      	movs	r3, r7
     e24:	430b      	orrs	r3, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     e26:	9902      	ldr	r1, [sp, #8]
     e28:	608b      	str	r3, [r1, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
     e2a:	69f3      	ldr	r3, [r6, #28]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d002      	beq.n	e36 <usart_init+0x1c6>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
     e30:	496e      	ldr	r1, [pc, #440]	; (fec <usart_init+0x37c>)
     e32:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
     e34:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     e36:	2334      	movs	r3, #52	; 0x34
     e38:	5cf3      	ldrb	r3, [r6, r3]
     e3a:	2b00      	cmp	r3, #0
     e3c:	d103      	bne.n	e46 <usart_init+0x1d6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     e3e:	4b6c      	ldr	r3, [pc, #432]	; (ff0 <usart_init+0x380>)
     e40:	789b      	ldrb	r3, [r3, #2]
     e42:	079b      	lsls	r3, r3, #30
     e44:	d501      	bpl.n	e4a <usart_init+0x1da>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     e46:	2380      	movs	r3, #128	; 0x80
     e48:	431a      	orrs	r2, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     e4a:	6829      	ldr	r1, [r5, #0]
     e4c:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
     e4e:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
     e50:	2b00      	cmp	r3, #0
     e52:	d1fc      	bne.n	e4e <usart_init+0x1de>
	usart_hw->CTRLB.reg = ctrlb;
     e54:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     e56:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     e58:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
     e5a:	2b00      	cmp	r3, #0
     e5c:	d1fc      	bne.n	e58 <usart_init+0x1e8>
	usart_hw->CTRLA.reg = ctrla;
     e5e:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
     e60:	683b      	ldr	r3, [r7, #0]
     e62:	22f0      	movs	r2, #240	; 0xf0
     e64:	0512      	lsls	r2, r2, #20
     e66:	4013      	ands	r3, r2
     e68:	22e0      	movs	r2, #224	; 0xe0
     e6a:	04d2      	lsls	r2, r2, #19
     e6c:	4293      	cmp	r3, r2
     e6e:	d00a      	beq.n	e86 <usart_init+0x216>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
     e70:	68bb      	ldr	r3, [r7, #8]
     e72:	2207      	movs	r2, #7
     e74:	4393      	bics	r3, r2
     e76:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
     e78:	68ba      	ldr	r2, [r7, #8]
     e7a:	2325      	movs	r3, #37	; 0x25
     e7c:	5cf1      	ldrb	r1, [r6, r3]
     e7e:	3b1e      	subs	r3, #30
     e80:	400b      	ands	r3, r1
     e82:	4313      	orrs	r3, r2
     e84:	60bb      	str	r3, [r7, #8]
     e86:	ab0e      	add	r3, sp, #56	; 0x38
     e88:	2280      	movs	r2, #128	; 0x80
     e8a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e8c:	2200      	movs	r2, #0
     e8e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     e90:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     e92:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     e94:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     e96:	930a      	str	r3, [sp, #40]	; 0x28
     e98:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     e9a:	930b      	str	r3, [sp, #44]	; 0x2c
     e9c:	6c33      	ldr	r3, [r6, #64]	; 0x40
     e9e:	930c      	str	r3, [sp, #48]	; 0x30
     ea0:	6c73      	ldr	r3, [r6, #68]	; 0x44
     ea2:	9302      	str	r3, [sp, #8]
     ea4:	930d      	str	r3, [sp, #52]	; 0x34
     ea6:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ea8:	ae0a      	add	r6, sp, #40	; 0x28
     eaa:	e066      	b.n	f7a <usart_init+0x30a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     eac:	2308      	movs	r3, #8
     eae:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     eb0:	3b07      	subs	r3, #7
     eb2:	9307      	str	r3, [sp, #28]
     eb4:	e751      	b.n	d5a <usart_init+0xea>
	ctrla = (uint32_t)config->data_order |
     eb6:	6833      	ldr	r3, [r6, #0]
     eb8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     eba:	68f3      	ldr	r3, [r6, #12]
     ebc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     ebe:	6973      	ldr	r3, [r6, #20]
     ec0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ec2:	7e33      	ldrb	r3, [r6, #24]
     ec4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ec6:	232e      	movs	r3, #46	; 0x2e
     ec8:	5cf3      	ldrb	r3, [r6, r3]
     eca:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     ecc:	6873      	ldr	r3, [r6, #4]
     ece:	4699      	mov	r9, r3
	switch (transfer_mode)
     ed0:	2b00      	cmp	r3, #0
     ed2:	d019      	beq.n	f08 <usart_init+0x298>
     ed4:	2380      	movs	r3, #128	; 0x80
     ed6:	055b      	lsls	r3, r3, #21
     ed8:	4599      	cmp	r9, r3
     eda:	d001      	beq.n	ee0 <usart_init+0x270>
	enum status_code status_code = STATUS_OK;
     edc:	2300      	movs	r3, #0
     ede:	e027      	b.n	f30 <usart_init+0x2c0>
			if (!config->use_external_clock) {
     ee0:	232f      	movs	r3, #47	; 0x2f
     ee2:	5cf3      	ldrb	r3, [r6, r3]
     ee4:	2b00      	cmp	r3, #0
     ee6:	d000      	beq.n	eea <usart_init+0x27a>
     ee8:	e74c      	b.n	d84 <usart_init+0x114>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     eea:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     eec:	001f      	movs	r7, r3
     eee:	b2c0      	uxtb	r0, r0
     ef0:	4b40      	ldr	r3, [pc, #256]	; (ff4 <usart_init+0x384>)
     ef2:	4798      	blx	r3
     ef4:	0001      	movs	r1, r0
     ef6:	220e      	movs	r2, #14
     ef8:	ab06      	add	r3, sp, #24
     efa:	469c      	mov	ip, r3
     efc:	4462      	add	r2, ip
     efe:	0038      	movs	r0, r7
     f00:	4b3d      	ldr	r3, [pc, #244]	; (ff8 <usart_init+0x388>)
     f02:	4798      	blx	r3
     f04:	0003      	movs	r3, r0
     f06:	e013      	b.n	f30 <usart_init+0x2c0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f08:	2308      	movs	r3, #8
     f0a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f0c:	2300      	movs	r3, #0
     f0e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     f10:	232f      	movs	r3, #47	; 0x2f
     f12:	5cf3      	ldrb	r3, [r6, r3]
     f14:	2b00      	cmp	r3, #0
     f16:	d00f      	beq.n	f38 <usart_init+0x2c8>
				status_code =
     f18:	9b06      	ldr	r3, [sp, #24]
     f1a:	9300      	str	r3, [sp, #0]
     f1c:	9b07      	ldr	r3, [sp, #28]
     f1e:	220e      	movs	r2, #14
     f20:	a906      	add	r1, sp, #24
     f22:	468c      	mov	ip, r1
     f24:	4462      	add	r2, ip
     f26:	6b31      	ldr	r1, [r6, #48]	; 0x30
     f28:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     f2a:	4f34      	ldr	r7, [pc, #208]	; (ffc <usart_init+0x38c>)
     f2c:	47b8      	blx	r7
     f2e:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
     f30:	2b00      	cmp	r3, #0
     f32:	d000      	beq.n	f36 <usart_init+0x2c6>
     f34:	e6b2      	b.n	c9c <usart_init+0x2c>
     f36:	e725      	b.n	d84 <usart_init+0x114>
						_sercom_get_async_baud_val(config->baudrate,
     f38:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     f3a:	001f      	movs	r7, r3
     f3c:	b2c0      	uxtb	r0, r0
     f3e:	4b2d      	ldr	r3, [pc, #180]	; (ff4 <usart_init+0x384>)
     f40:	4798      	blx	r3
     f42:	0001      	movs	r1, r0
				status_code =
     f44:	9b06      	ldr	r3, [sp, #24]
     f46:	9300      	str	r3, [sp, #0]
     f48:	9b07      	ldr	r3, [sp, #28]
     f4a:	220e      	movs	r2, #14
     f4c:	a806      	add	r0, sp, #24
     f4e:	4684      	mov	ip, r0
     f50:	4462      	add	r2, ip
     f52:	0038      	movs	r0, r7
     f54:	4f29      	ldr	r7, [pc, #164]	; (ffc <usart_init+0x38c>)
     f56:	47b8      	blx	r7
     f58:	0003      	movs	r3, r0
     f5a:	e7e9      	b.n	f30 <usart_init+0x2c0>
		if(config->lin_slave_enable) {
     f5c:	7ef3      	ldrb	r3, [r6, #27]
     f5e:	2b00      	cmp	r3, #0
     f60:	d100      	bne.n	f64 <usart_init+0x2f4>
     f62:	e754      	b.n	e0e <usart_init+0x19e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     f64:	2380      	movs	r3, #128	; 0x80
     f66:	04db      	lsls	r3, r3, #19
     f68:	431a      	orrs	r2, r3
     f6a:	e750      	b.n	e0e <usart_init+0x19e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f6c:	0020      	movs	r0, r4
     f6e:	4b24      	ldr	r3, [pc, #144]	; (1000 <usart_init+0x390>)
     f70:	4798      	blx	r3
     f72:	e007      	b.n	f84 <usart_init+0x314>
     f74:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     f76:	2f04      	cmp	r7, #4
     f78:	d00d      	beq.n	f96 <usart_init+0x326>
     f7a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f7c:	00bb      	lsls	r3, r7, #2
     f7e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     f80:	2800      	cmp	r0, #0
     f82:	d0f3      	beq.n	f6c <usart_init+0x2fc>
		if (current_pinmux != PINMUX_UNUSED) {
     f84:	1c43      	adds	r3, r0, #1
     f86:	d0f5      	beq.n	f74 <usart_init+0x304>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f88:	a90e      	add	r1, sp, #56	; 0x38
     f8a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f8c:	0c00      	lsrs	r0, r0, #16
     f8e:	b2c0      	uxtb	r0, r0
     f90:	4b1c      	ldr	r3, [pc, #112]	; (1004 <usart_init+0x394>)
     f92:	4798      	blx	r3
     f94:	e7ee      	b.n	f74 <usart_init+0x304>
		module->callback[i]            = NULL;
     f96:	2300      	movs	r3, #0
     f98:	60eb      	str	r3, [r5, #12]
     f9a:	612b      	str	r3, [r5, #16]
     f9c:	616b      	str	r3, [r5, #20]
     f9e:	61ab      	str	r3, [r5, #24]
     fa0:	61eb      	str	r3, [r5, #28]
     fa2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     fa4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     fa6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     fa8:	2200      	movs	r2, #0
     faa:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     fac:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     fae:	3330      	adds	r3, #48	; 0x30
     fb0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     fb2:	3301      	adds	r3, #1
     fb4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     fb6:	3301      	adds	r3, #1
     fb8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     fba:	3301      	adds	r3, #1
     fbc:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     fbe:	6828      	ldr	r0, [r5, #0]
     fc0:	4b05      	ldr	r3, [pc, #20]	; (fd8 <usart_init+0x368>)
     fc2:	4798      	blx	r3
     fc4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     fc6:	4910      	ldr	r1, [pc, #64]	; (1008 <usart_init+0x398>)
     fc8:	4b10      	ldr	r3, [pc, #64]	; (100c <usart_init+0x39c>)
     fca:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     fcc:	00a4      	lsls	r4, r4, #2
     fce:	4b10      	ldr	r3, [pc, #64]	; (1010 <usart_init+0x3a0>)
     fd0:	50e5      	str	r5, [r4, r3]
	return status_code;
     fd2:	2300      	movs	r3, #0
     fd4:	e662      	b.n	c9c <usart_init+0x2c>
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	00000b69 	.word	0x00000b69
     fdc:	40000800 	.word	0x40000800
     fe0:	00001505 	.word	0x00001505
     fe4:	00001495 	.word	0x00001495
     fe8:	000009a1 	.word	0x000009a1
     fec:	f0ffffff 	.word	0xf0ffffff
     ff0:	41002000 	.word	0x41002000
     ff4:	00001529 	.word	0x00001529
     ff8:	000008e3 	.word	0x000008e3
     ffc:	0000090d 	.word	0x0000090d
    1000:	000009ed 	.word	0x000009ed
    1004:	00001601 	.word	0x00001601
    1008:	000010bd 	.word	0x000010bd
    100c:	00000ba5 	.word	0x00000ba5
    1010:	200000d8 	.word	0x200000d8
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1014:	2310      	movs	r3, #16
    1016:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1018:	2300      	movs	r3, #0
    101a:	9307      	str	r3, [sp, #28]
    101c:	e69d      	b.n	d5a <usart_init+0xea>
    101e:	46c0      	nop			; (mov r8, r8)

00001020 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1020:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1022:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1024:	2a00      	cmp	r2, #0
    1026:	d101      	bne.n	102c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1028:	0018      	movs	r0, r3
    102a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    102c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    102e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1030:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1032:	2a00      	cmp	r2, #0
    1034:	d1f8      	bne.n	1028 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1036:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1038:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    103a:	2a00      	cmp	r2, #0
    103c:	d1fc      	bne.n	1038 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    103e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1040:	2102      	movs	r1, #2
    1042:	7e1a      	ldrb	r2, [r3, #24]
    1044:	420a      	tst	r2, r1
    1046:	d0fc      	beq.n	1042 <usart_write_wait+0x22>
	return STATUS_OK;
    1048:	2300      	movs	r3, #0
    104a:	e7ed      	b.n	1028 <usart_write_wait+0x8>

0000104c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    104c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    104e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1050:	2a00      	cmp	r2, #0
    1052:	d101      	bne.n	1058 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1054:	0018      	movs	r0, r3
    1056:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1058:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    105a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    105c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    105e:	2a00      	cmp	r2, #0
    1060:	d1f8      	bne.n	1054 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1062:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1064:	7e10      	ldrb	r0, [r2, #24]
    1066:	0740      	lsls	r0, r0, #29
    1068:	d5f4      	bpl.n	1054 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    106a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    106c:	2b00      	cmp	r3, #0
    106e:	d1fc      	bne.n	106a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1070:	8b53      	ldrh	r3, [r2, #26]
    1072:	b2db      	uxtb	r3, r3
	if (error_code) {
    1074:	0658      	lsls	r0, r3, #25
    1076:	d01d      	beq.n	10b4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1078:	0798      	lsls	r0, r3, #30
    107a:	d503      	bpl.n	1084 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    107c:	2302      	movs	r3, #2
    107e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1080:	3318      	adds	r3, #24
    1082:	e7e7      	b.n	1054 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1084:	0758      	lsls	r0, r3, #29
    1086:	d503      	bpl.n	1090 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1088:	2304      	movs	r3, #4
    108a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    108c:	331a      	adds	r3, #26
    108e:	e7e1      	b.n	1054 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1090:	07d8      	lsls	r0, r3, #31
    1092:	d503      	bpl.n	109c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1094:	2301      	movs	r3, #1
    1096:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1098:	3312      	adds	r3, #18
    109a:	e7db      	b.n	1054 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    109c:	06d8      	lsls	r0, r3, #27
    109e:	d503      	bpl.n	10a8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    10a0:	2310      	movs	r3, #16
    10a2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    10a4:	3332      	adds	r3, #50	; 0x32
    10a6:	e7d5      	b.n	1054 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    10a8:	069b      	lsls	r3, r3, #26
    10aa:	d503      	bpl.n	10b4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    10ac:	2320      	movs	r3, #32
    10ae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    10b0:	3321      	adds	r3, #33	; 0x21
    10b2:	e7cf      	b.n	1054 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    10b4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    10b6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    10b8:	2300      	movs	r3, #0
    10ba:	e7cb      	b.n	1054 <usart_read_wait+0x8>

000010bc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    10bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    10be:	0080      	lsls	r0, r0, #2
    10c0:	4b64      	ldr	r3, [pc, #400]	; (1254 <_usart_interrupt_handler+0x198>)
    10c2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    10c4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    10c6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    10c8:	2b00      	cmp	r3, #0
    10ca:	d1fc      	bne.n	10c6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    10cc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    10ce:	7da6      	ldrb	r6, [r4, #22]
    10d0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    10d2:	2330      	movs	r3, #48	; 0x30
    10d4:	5ceb      	ldrb	r3, [r5, r3]
    10d6:	2231      	movs	r2, #49	; 0x31
    10d8:	5caf      	ldrb	r7, [r5, r2]
    10da:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    10dc:	07f3      	lsls	r3, r6, #31
    10de:	d522      	bpl.n	1126 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    10e0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    10e2:	b29b      	uxth	r3, r3
    10e4:	2b00      	cmp	r3, #0
    10e6:	d01c      	beq.n	1122 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    10e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    10ea:	7813      	ldrb	r3, [r2, #0]
    10ec:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    10ee:	1c51      	adds	r1, r2, #1
    10f0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    10f2:	7969      	ldrb	r1, [r5, #5]
    10f4:	2901      	cmp	r1, #1
    10f6:	d00e      	beq.n	1116 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    10f8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    10fa:	05db      	lsls	r3, r3, #23
    10fc:	0ddb      	lsrs	r3, r3, #23
    10fe:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1100:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1102:	3b01      	subs	r3, #1
    1104:	b29b      	uxth	r3, r3
    1106:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1108:	2b00      	cmp	r3, #0
    110a:	d10c      	bne.n	1126 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    110c:	3301      	adds	r3, #1
    110e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1110:	3301      	adds	r3, #1
    1112:	75a3      	strb	r3, [r4, #22]
    1114:	e007      	b.n	1126 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1116:	7851      	ldrb	r1, [r2, #1]
    1118:	0209      	lsls	r1, r1, #8
    111a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    111c:	3202      	adds	r2, #2
    111e:	62aa      	str	r2, [r5, #40]	; 0x28
    1120:	e7eb      	b.n	10fa <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1122:	2301      	movs	r3, #1
    1124:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1126:	07b3      	lsls	r3, r6, #30
    1128:	d506      	bpl.n	1138 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    112a:	2302      	movs	r3, #2
    112c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    112e:	2200      	movs	r2, #0
    1130:	3331      	adds	r3, #49	; 0x31
    1132:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1134:	07fb      	lsls	r3, r7, #31
    1136:	d41e      	bmi.n	1176 <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1138:	0773      	lsls	r3, r6, #29
    113a:	d568      	bpl.n	120e <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
    113c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    113e:	b29b      	uxth	r3, r3
    1140:	2b00      	cmp	r3, #0
    1142:	d062      	beq.n	120a <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1144:	8b63      	ldrh	r3, [r4, #26]
    1146:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1148:	071a      	lsls	r2, r3, #28
    114a:	d418      	bmi.n	117e <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    114c:	227f      	movs	r2, #127	; 0x7f
    114e:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    1150:	065a      	lsls	r2, r3, #25
    1152:	d501      	bpl.n	1158 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    1154:	2240      	movs	r2, #64	; 0x40
    1156:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1158:	2b00      	cmp	r3, #0
    115a:	d033      	beq.n	11c4 <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    115c:	079a      	lsls	r2, r3, #30
    115e:	d511      	bpl.n	1184 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1160:	221a      	movs	r2, #26
    1162:	2332      	movs	r3, #50	; 0x32
    1164:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1166:	3b30      	subs	r3, #48	; 0x30
    1168:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    116a:	077b      	lsls	r3, r7, #29
    116c:	d54f      	bpl.n	120e <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    116e:	0028      	movs	r0, r5
    1170:	696b      	ldr	r3, [r5, #20]
    1172:	4798      	blx	r3
    1174:	e04b      	b.n	120e <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1176:	0028      	movs	r0, r5
    1178:	68eb      	ldr	r3, [r5, #12]
    117a:	4798      	blx	r3
    117c:	e7dc      	b.n	1138 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    117e:	2277      	movs	r2, #119	; 0x77
    1180:	4013      	ands	r3, r2
    1182:	e7e5      	b.n	1150 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1184:	075a      	lsls	r2, r3, #29
    1186:	d505      	bpl.n	1194 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1188:	221e      	movs	r2, #30
    118a:	2332      	movs	r3, #50	; 0x32
    118c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    118e:	3b2e      	subs	r3, #46	; 0x2e
    1190:	8363      	strh	r3, [r4, #26]
    1192:	e7ea      	b.n	116a <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1194:	07da      	lsls	r2, r3, #31
    1196:	d505      	bpl.n	11a4 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1198:	2213      	movs	r2, #19
    119a:	2332      	movs	r3, #50	; 0x32
    119c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    119e:	3b31      	subs	r3, #49	; 0x31
    11a0:	8363      	strh	r3, [r4, #26]
    11a2:	e7e2      	b.n	116a <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    11a4:	06da      	lsls	r2, r3, #27
    11a6:	d505      	bpl.n	11b4 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    11a8:	2242      	movs	r2, #66	; 0x42
    11aa:	2332      	movs	r3, #50	; 0x32
    11ac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    11ae:	3b22      	subs	r3, #34	; 0x22
    11b0:	8363      	strh	r3, [r4, #26]
    11b2:	e7da      	b.n	116a <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    11b4:	069b      	lsls	r3, r3, #26
    11b6:	d5d8      	bpl.n	116a <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    11b8:	2241      	movs	r2, #65	; 0x41
    11ba:	2332      	movs	r3, #50	; 0x32
    11bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    11be:	3b12      	subs	r3, #18
    11c0:	8363      	strh	r3, [r4, #26]
    11c2:	e7d2      	b.n	116a <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    11c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    11c6:	05db      	lsls	r3, r3, #23
    11c8:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    11ca:	b2da      	uxtb	r2, r3
    11cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    11ce:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    11d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    11d2:	1c51      	adds	r1, r2, #1
    11d4:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    11d6:	7969      	ldrb	r1, [r5, #5]
    11d8:	2901      	cmp	r1, #1
    11da:	d010      	beq.n	11fe <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    11dc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    11de:	3b01      	subs	r3, #1
    11e0:	b29b      	uxth	r3, r3
    11e2:	85ab      	strh	r3, [r5, #44]	; 0x2c
    11e4:	2b00      	cmp	r3, #0
    11e6:	d112      	bne.n	120e <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    11e8:	3304      	adds	r3, #4
    11ea:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    11ec:	2200      	movs	r2, #0
    11ee:	332e      	adds	r3, #46	; 0x2e
    11f0:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    11f2:	07bb      	lsls	r3, r7, #30
    11f4:	d50b      	bpl.n	120e <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    11f6:	0028      	movs	r0, r5
    11f8:	692b      	ldr	r3, [r5, #16]
    11fa:	4798      	blx	r3
    11fc:	e007      	b.n	120e <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    11fe:	0a1b      	lsrs	r3, r3, #8
    1200:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1202:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1204:	3301      	adds	r3, #1
    1206:	626b      	str	r3, [r5, #36]	; 0x24
    1208:	e7e8      	b.n	11dc <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    120a:	2304      	movs	r3, #4
    120c:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    120e:	06f3      	lsls	r3, r6, #27
    1210:	d504      	bpl.n	121c <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1212:	2310      	movs	r3, #16
    1214:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1216:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1218:	06fb      	lsls	r3, r7, #27
    121a:	d40e      	bmi.n	123a <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    121c:	06b3      	lsls	r3, r6, #26
    121e:	d504      	bpl.n	122a <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1220:	2320      	movs	r3, #32
    1222:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1224:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1226:	073b      	lsls	r3, r7, #28
    1228:	d40b      	bmi.n	1242 <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    122a:	0733      	lsls	r3, r6, #28
    122c:	d504      	bpl.n	1238 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    122e:	2308      	movs	r3, #8
    1230:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1232:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1234:	06bb      	lsls	r3, r7, #26
    1236:	d408      	bmi.n	124a <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    123a:	0028      	movs	r0, r5
    123c:	69eb      	ldr	r3, [r5, #28]
    123e:	4798      	blx	r3
    1240:	e7ec      	b.n	121c <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1242:	0028      	movs	r0, r5
    1244:	69ab      	ldr	r3, [r5, #24]
    1246:	4798      	blx	r3
    1248:	e7ef      	b.n	122a <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    124a:	6a2b      	ldr	r3, [r5, #32]
    124c:	0028      	movs	r0, r5
    124e:	4798      	blx	r3
}
    1250:	e7f2      	b.n	1238 <_usart_interrupt_handler+0x17c>
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	200000d8 	.word	0x200000d8

00001258 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1258:	b510      	push	{r4, lr}
	switch (clock_source) {
    125a:	2807      	cmp	r0, #7
    125c:	d803      	bhi.n	1266 <system_clock_source_get_hz+0xe>
    125e:	0080      	lsls	r0, r0, #2
    1260:	4b0f      	ldr	r3, [pc, #60]	; (12a0 <system_clock_source_get_hz+0x48>)
    1262:	581b      	ldr	r3, [r3, r0]
    1264:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    1266:	2000      	movs	r0, #0
    1268:	e018      	b.n	129c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    126a:	4b0e      	ldr	r3, [pc, #56]	; (12a4 <system_clock_source_get_hz+0x4c>)
    126c:	6858      	ldr	r0, [r3, #4]
    126e:	e015      	b.n	129c <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    1270:	4b0d      	ldr	r3, [pc, #52]	; (12a8 <system_clock_source_get_hz+0x50>)
    1272:	7d59      	ldrb	r1, [r3, #21]
    1274:	0709      	lsls	r1, r1, #28
    1276:	0f09      	lsrs	r1, r1, #28
    1278:	3101      	adds	r1, #1
    127a:	480c      	ldr	r0, [pc, #48]	; (12ac <system_clock_source_get_hz+0x54>)
    127c:	4b0c      	ldr	r3, [pc, #48]	; (12b0 <system_clock_source_get_hz+0x58>)
    127e:	4798      	blx	r3
    1280:	e00c      	b.n	129c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    1282:	4b08      	ldr	r3, [pc, #32]	; (12a4 <system_clock_source_get_hz+0x4c>)
    1284:	6898      	ldr	r0, [r3, #8]
    1286:	e009      	b.n	129c <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1288:	4b07      	ldr	r3, [pc, #28]	; (12a8 <system_clock_source_get_hz+0x50>)
    128a:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    128c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    128e:	079b      	lsls	r3, r3, #30
    1290:	d504      	bpl.n	129c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    1292:	4b04      	ldr	r3, [pc, #16]	; (12a4 <system_clock_source_get_hz+0x4c>)
    1294:	6818      	ldr	r0, [r3, #0]
    1296:	e001      	b.n	129c <system_clock_source_get_hz+0x44>
		return 32768UL;
    1298:	2080      	movs	r0, #128	; 0x80
    129a:	0200      	lsls	r0, r0, #8
	}
}
    129c:	bd10      	pop	{r4, pc}
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	000025b0 	.word	0x000025b0
    12a4:	20000044 	.word	0x20000044
    12a8:	40001000 	.word	0x40001000
    12ac:	02dc6c00 	.word	0x02dc6c00
    12b0:	000023a1 	.word	0x000023a1

000012b4 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    12b4:	b500      	push	{lr}
    12b6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    12b8:	2203      	movs	r2, #3
    12ba:	4b10      	ldr	r3, [pc, #64]	; (12fc <system_clock_init+0x48>)
    12bc:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    12be:	4a10      	ldr	r2, [pc, #64]	; (1300 <system_clock_init+0x4c>)
    12c0:	6853      	ldr	r3, [r2, #4]
    12c2:	211e      	movs	r1, #30
    12c4:	438b      	bics	r3, r1
    12c6:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    12c8:	4a0e      	ldr	r2, [pc, #56]	; (1304 <system_clock_init+0x50>)
    12ca:	7d13      	ldrb	r3, [r2, #20]
    12cc:	3162      	adds	r1, #98	; 0x62
    12ce:	430b      	orrs	r3, r1
    12d0:	7513      	strb	r3, [r2, #20]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    12d2:	4b0d      	ldr	r3, [pc, #52]	; (1308 <system_clock_init+0x54>)
    12d4:	4798      	blx	r3
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    12d6:	2301      	movs	r3, #1
    12d8:	4a0c      	ldr	r2, [pc, #48]	; (130c <system_clock_init+0x58>)
    12da:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    12dc:	a901      	add	r1, sp, #4
    12de:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    12e0:	2300      	movs	r3, #0
    12e2:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    12e4:	2206      	movs	r2, #6
    12e6:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
    12e8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    12ea:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    12ec:	2000      	movs	r0, #0
    12ee:	4b08      	ldr	r3, [pc, #32]	; (1310 <system_clock_init+0x5c>)
    12f0:	4798      	blx	r3
    12f2:	2000      	movs	r0, #0
    12f4:	4b07      	ldr	r3, [pc, #28]	; (1314 <system_clock_init+0x60>)
    12f6:	4798      	blx	r3
#endif

}
    12f8:	b005      	add	sp, #20
    12fa:	bd00      	pop	{pc}
    12fc:	40001800 	.word	0x40001800
    1300:	41004000 	.word	0x41004000
    1304:	40001000 	.word	0x40001000
    1308:	00001319 	.word	0x00001319
    130c:	40000800 	.word	0x40000800
    1310:	0000133d 	.word	0x0000133d
    1314:	000013e9 	.word	0x000013e9

00001318 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    1318:	4a06      	ldr	r2, [pc, #24]	; (1334 <system_gclk_init+0x1c>)
    131a:	6953      	ldr	r3, [r2, #20]
    131c:	2180      	movs	r1, #128	; 0x80
    131e:	430b      	orrs	r3, r1
    1320:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    1322:	2201      	movs	r2, #1
    1324:	4b04      	ldr	r3, [pc, #16]	; (1338 <system_gclk_init+0x20>)
    1326:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1328:	0019      	movs	r1, r3
    132a:	780b      	ldrb	r3, [r1, #0]
    132c:	4213      	tst	r3, r2
    132e:	d1fc      	bne.n	132a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1330:	4770      	bx	lr
    1332:	46c0      	nop			; (mov r8, r8)
    1334:	40000800 	.word	0x40000800
    1338:	40001c00 	.word	0x40001c00

0000133c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    133c:	b570      	push	{r4, r5, r6, lr}
    133e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1340:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1342:	784b      	ldrb	r3, [r1, #1]
    1344:	2b00      	cmp	r3, #0
    1346:	d002      	beq.n	134e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1348:	2380      	movs	r3, #128	; 0x80
    134a:	00db      	lsls	r3, r3, #3
    134c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    134e:	7a4b      	ldrb	r3, [r1, #9]
    1350:	2b00      	cmp	r3, #0
    1352:	d002      	beq.n	135a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1354:	2380      	movs	r3, #128	; 0x80
    1356:	011b      	lsls	r3, r3, #4
    1358:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    135a:	6848      	ldr	r0, [r1, #4]
    135c:	2801      	cmp	r0, #1
    135e:	d90f      	bls.n	1380 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1360:	1e43      	subs	r3, r0, #1
    1362:	4218      	tst	r0, r3
    1364:	d131      	bne.n	13ca <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1366:	2802      	cmp	r0, #2
    1368:	d92d      	bls.n	13c6 <system_gclk_gen_set_config+0x8a>
    136a:	2302      	movs	r3, #2
    136c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    136e:	3201      	adds	r2, #1
						mask <<= 1) {
    1370:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1372:	4298      	cmp	r0, r3
    1374:	d8fb      	bhi.n	136e <system_gclk_gen_set_config+0x32>
    1376:	2380      	movs	r3, #128	; 0x80
    1378:	015b      	lsls	r3, r3, #5
    137a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    137c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    137e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1380:	7a0b      	ldrb	r3, [r1, #8]
    1382:	2b00      	cmp	r3, #0
    1384:	d002      	beq.n	138c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1386:	2380      	movs	r3, #128	; 0x80
    1388:	019b      	lsls	r3, r3, #6
    138a:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    138c:	2604      	movs	r6, #4
    138e:	40a6      	lsls	r6, r4
    1390:	4911      	ldr	r1, [pc, #68]	; (13d8 <system_gclk_gen_set_config+0x9c>)
    1392:	4a12      	ldr	r2, [pc, #72]	; (13dc <system_gclk_gen_set_config+0xa0>)
    1394:	684b      	ldr	r3, [r1, #4]
    1396:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    1398:	421e      	tst	r6, r3
    139a:	d1fb      	bne.n	1394 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    139c:	4b10      	ldr	r3, [pc, #64]	; (13e0 <system_gclk_gen_set_config+0xa4>)
    139e:	4798      	blx	r3
    13a0:	00a4      	lsls	r4, r4, #2
    13a2:	4b0d      	ldr	r3, [pc, #52]	; (13d8 <system_gclk_gen_set_config+0x9c>)
    13a4:	469c      	mov	ip, r3
    13a6:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    13a8:	6a22      	ldr	r2, [r4, #32]
    13aa:	2380      	movs	r3, #128	; 0x80
    13ac:	005b      	lsls	r3, r3, #1
    13ae:	401a      	ands	r2, r3
    13b0:	432a      	orrs	r2, r5
    13b2:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    13b4:	4661      	mov	r1, ip
    13b6:	4a09      	ldr	r2, [pc, #36]	; (13dc <system_gclk_gen_set_config+0xa0>)
    13b8:	684b      	ldr	r3, [r1, #4]
    13ba:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    13bc:	421e      	tst	r6, r3
    13be:	d1fb      	bne.n	13b8 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    13c0:	4b08      	ldr	r3, [pc, #32]	; (13e4 <system_gclk_gen_set_config+0xa8>)
    13c2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    13c4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    13c6:	2200      	movs	r2, #0
    13c8:	e7d5      	b.n	1376 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    13ca:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    13cc:	2380      	movs	r3, #128	; 0x80
    13ce:	009b      	lsls	r3, r3, #2
    13d0:	4318      	orrs	r0, r3
    13d2:	4305      	orrs	r5, r0
    13d4:	e7d4      	b.n	1380 <system_gclk_gen_set_config+0x44>
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	40001c00 	.word	0x40001c00
    13dc:	000007fc 	.word	0x000007fc
    13e0:	00000761 	.word	0x00000761
    13e4:	000007a1 	.word	0x000007a1

000013e8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    13e8:	b510      	push	{r4, lr}
    13ea:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    13ec:	2204      	movs	r2, #4
    13ee:	4082      	lsls	r2, r0
    13f0:	4809      	ldr	r0, [pc, #36]	; (1418 <system_gclk_gen_enable+0x30>)
    13f2:	490a      	ldr	r1, [pc, #40]	; (141c <system_gclk_gen_enable+0x34>)
    13f4:	6843      	ldr	r3, [r0, #4]
    13f6:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    13f8:	421a      	tst	r2, r3
    13fa:	d1fb      	bne.n	13f4 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    13fc:	4b08      	ldr	r3, [pc, #32]	; (1420 <system_gclk_gen_enable+0x38>)
    13fe:	4798      	blx	r3
    1400:	00a4      	lsls	r4, r4, #2
    1402:	4b05      	ldr	r3, [pc, #20]	; (1418 <system_gclk_gen_enable+0x30>)
    1404:	469c      	mov	ip, r3
    1406:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1408:	6a22      	ldr	r2, [r4, #32]
    140a:	2380      	movs	r3, #128	; 0x80
    140c:	005b      	lsls	r3, r3, #1
    140e:	4313      	orrs	r3, r2
    1410:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    1412:	4b04      	ldr	r3, [pc, #16]	; (1424 <system_gclk_gen_enable+0x3c>)
    1414:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1416:	bd10      	pop	{r4, pc}
    1418:	40001c00 	.word	0x40001c00
    141c:	000007fc 	.word	0x000007fc
    1420:	00000761 	.word	0x00000761
    1424:	000007a1 	.word	0x000007a1

00001428 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    142a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    142c:	2204      	movs	r2, #4
    142e:	4082      	lsls	r2, r0
    1430:	4812      	ldr	r0, [pc, #72]	; (147c <system_gclk_gen_get_hz+0x54>)
    1432:	4913      	ldr	r1, [pc, #76]	; (1480 <system_gclk_gen_get_hz+0x58>)
    1434:	6843      	ldr	r3, [r0, #4]
    1436:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    1438:	421a      	tst	r2, r3
    143a:	d1fb      	bne.n	1434 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    143c:	4b11      	ldr	r3, [pc, #68]	; (1484 <system_gclk_gen_get_hz+0x5c>)
    143e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1440:	4f0e      	ldr	r7, [pc, #56]	; (147c <system_gclk_gen_get_hz+0x54>)
    1442:	3408      	adds	r4, #8
    1444:	00a4      	lsls	r4, r4, #2
    1446:	59e0      	ldr	r0, [r4, r7]
    1448:	0740      	lsls	r0, r0, #29
    144a:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    144c:	4b0e      	ldr	r3, [pc, #56]	; (1488 <system_gclk_gen_get_hz+0x60>)
    144e:	4798      	blx	r3
    1450:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1452:	59e5      	ldr	r5, [r4, r7]
    1454:	04ed      	lsls	r5, r5, #19
    1456:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1458:	59e4      	ldr	r4, [r4, r7]
    145a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    145c:	4b0b      	ldr	r3, [pc, #44]	; (148c <system_gclk_gen_get_hz+0x64>)
    145e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1460:	2d00      	cmp	r5, #0
    1462:	d107      	bne.n	1474 <system_gclk_gen_get_hz+0x4c>
    1464:	2c01      	cmp	r4, #1
    1466:	d907      	bls.n	1478 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1468:	0021      	movs	r1, r4
    146a:	0030      	movs	r0, r6
    146c:	4b08      	ldr	r3, [pc, #32]	; (1490 <system_gclk_gen_get_hz+0x68>)
    146e:	4798      	blx	r3
    1470:	0006      	movs	r6, r0
    1472:	e001      	b.n	1478 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1474:	3401      	adds	r4, #1
    1476:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1478:	0030      	movs	r0, r6
    147a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    147c:	40001c00 	.word	0x40001c00
    1480:	000007fc 	.word	0x000007fc
    1484:	00000761 	.word	0x00000761
    1488:	00001259 	.word	0x00001259
    148c:	000007a1 	.word	0x000007a1
    1490:	000023a1 	.word	0x000023a1

00001494 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1494:	b510      	push	{r4, lr}
    1496:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1498:	4b09      	ldr	r3, [pc, #36]	; (14c0 <system_gclk_chan_enable+0x2c>)
    149a:	4798      	blx	r3
    149c:	00a0      	lsls	r0, r4, #2
    149e:	4b09      	ldr	r3, [pc, #36]	; (14c4 <system_gclk_chan_enable+0x30>)
    14a0:	469c      	mov	ip, r3
    14a2:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    14a4:	2280      	movs	r2, #128	; 0x80
    14a6:	5883      	ldr	r3, [r0, r2]
    14a8:	2140      	movs	r1, #64	; 0x40
    14aa:	430b      	orrs	r3, r1
    14ac:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    14ae:	3140      	adds	r1, #64	; 0x40
    14b0:	3a40      	subs	r2, #64	; 0x40
    14b2:	5843      	ldr	r3, [r0, r1]
    14b4:	421a      	tst	r2, r3
    14b6:	d0fc      	beq.n	14b2 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    14b8:	4b03      	ldr	r3, [pc, #12]	; (14c8 <system_gclk_chan_enable+0x34>)
    14ba:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    14bc:	bd10      	pop	{r4, pc}
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	00000761 	.word	0x00000761
    14c4:	40001c00 	.word	0x40001c00
    14c8:	000007a1 	.word	0x000007a1

000014cc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    14cc:	b510      	push	{r4, lr}
    14ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    14d0:	4b09      	ldr	r3, [pc, #36]	; (14f8 <system_gclk_chan_disable+0x2c>)
    14d2:	4798      	blx	r3
    14d4:	00a0      	lsls	r0, r4, #2
    14d6:	4b09      	ldr	r3, [pc, #36]	; (14fc <system_gclk_chan_disable+0x30>)
    14d8:	469c      	mov	ip, r3
    14da:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    14dc:	2280      	movs	r2, #128	; 0x80
    14de:	5883      	ldr	r3, [r0, r2]
    14e0:	2140      	movs	r1, #64	; 0x40
    14e2:	438b      	bics	r3, r1
    14e4:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    14e6:	3140      	adds	r1, #64	; 0x40
    14e8:	3a40      	subs	r2, #64	; 0x40
    14ea:	5843      	ldr	r3, [r0, r1]
    14ec:	421a      	tst	r2, r3
    14ee:	d1fc      	bne.n	14ea <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    14f0:	4b03      	ldr	r3, [pc, #12]	; (1500 <system_gclk_chan_disable+0x34>)
    14f2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    14f4:	bd10      	pop	{r4, pc}
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	00000761 	.word	0x00000761
    14fc:	40001c00 	.word	0x40001c00
    1500:	000007a1 	.word	0x000007a1

00001504 <system_gclk_chan_set_config>:
{
    1504:	b570      	push	{r4, r5, r6, lr}
    1506:	0004      	movs	r4, r0
    1508:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    150a:	4b05      	ldr	r3, [pc, #20]	; (1520 <system_gclk_chan_set_config+0x1c>)
    150c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    150e:	782a      	ldrb	r2, [r5, #0]
    1510:	230f      	movs	r3, #15
    1512:	4013      	ands	r3, r2
    1514:	3420      	adds	r4, #32
    1516:	00a4      	lsls	r4, r4, #2
    1518:	4a02      	ldr	r2, [pc, #8]	; (1524 <system_gclk_chan_set_config+0x20>)
    151a:	50a3      	str	r3, [r4, r2]
}
    151c:	bd70      	pop	{r4, r5, r6, pc}
    151e:	46c0      	nop			; (mov r8, r8)
    1520:	000014cd 	.word	0x000014cd
    1524:	40001c00 	.word	0x40001c00

00001528 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1528:	b510      	push	{r4, lr}
    152a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    152c:	4b06      	ldr	r3, [pc, #24]	; (1548 <system_gclk_chan_get_hz+0x20>)
    152e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1530:	3420      	adds	r4, #32
    1532:	00a4      	lsls	r4, r4, #2
    1534:	4b05      	ldr	r3, [pc, #20]	; (154c <system_gclk_chan_get_hz+0x24>)
    1536:	58e4      	ldr	r4, [r4, r3]
    1538:	0724      	lsls	r4, r4, #28
    153a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    153c:	4b04      	ldr	r3, [pc, #16]	; (1550 <system_gclk_chan_get_hz+0x28>)
    153e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1540:	0020      	movs	r0, r4
    1542:	4b04      	ldr	r3, [pc, #16]	; (1554 <system_gclk_chan_get_hz+0x2c>)
    1544:	4798      	blx	r3
}
    1546:	bd10      	pop	{r4, pc}
    1548:	00000761 	.word	0x00000761
    154c:	40001c00 	.word	0x40001c00
    1550:	000007a1 	.word	0x000007a1
    1554:	00001429 	.word	0x00001429

00001558 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1558:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    155a:	78d3      	ldrb	r3, [r2, #3]
    155c:	2b00      	cmp	r3, #0
    155e:	d135      	bne.n	15cc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1560:	7813      	ldrb	r3, [r2, #0]
    1562:	2b80      	cmp	r3, #128	; 0x80
    1564:	d029      	beq.n	15ba <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1566:	061b      	lsls	r3, r3, #24
    1568:	2480      	movs	r4, #128	; 0x80
    156a:	0264      	lsls	r4, r4, #9
    156c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    156e:	7854      	ldrb	r4, [r2, #1]
    1570:	2502      	movs	r5, #2
    1572:	43ac      	bics	r4, r5
    1574:	d106      	bne.n	1584 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1576:	7894      	ldrb	r4, [r2, #2]
    1578:	2c00      	cmp	r4, #0
    157a:	d120      	bne.n	15be <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    157c:	2480      	movs	r4, #128	; 0x80
    157e:	02a4      	lsls	r4, r4, #10
    1580:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1582:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1584:	7854      	ldrb	r4, [r2, #1]
    1586:	3c01      	subs	r4, #1
    1588:	2c01      	cmp	r4, #1
    158a:	d91c      	bls.n	15c6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    158c:	040d      	lsls	r5, r1, #16
    158e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1590:	24a0      	movs	r4, #160	; 0xa0
    1592:	05e4      	lsls	r4, r4, #23
    1594:	432c      	orrs	r4, r5
    1596:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1598:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    159a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    159c:	24d0      	movs	r4, #208	; 0xd0
    159e:	0624      	lsls	r4, r4, #24
    15a0:	432c      	orrs	r4, r5
    15a2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15a4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    15a6:	78d4      	ldrb	r4, [r2, #3]
    15a8:	2c00      	cmp	r4, #0
    15aa:	d122      	bne.n	15f2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    15ac:	035b      	lsls	r3, r3, #13
    15ae:	d51c      	bpl.n	15ea <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    15b0:	7893      	ldrb	r3, [r2, #2]
    15b2:	2b01      	cmp	r3, #1
    15b4:	d01e      	beq.n	15f4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    15b6:	6141      	str	r1, [r0, #20]
    15b8:	e017      	b.n	15ea <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    15ba:	2300      	movs	r3, #0
    15bc:	e7d7      	b.n	156e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    15be:	24c0      	movs	r4, #192	; 0xc0
    15c0:	02e4      	lsls	r4, r4, #11
    15c2:	4323      	orrs	r3, r4
    15c4:	e7dd      	b.n	1582 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    15c6:	4c0d      	ldr	r4, [pc, #52]	; (15fc <_system_pinmux_config+0xa4>)
    15c8:	4023      	ands	r3, r4
    15ca:	e7df      	b.n	158c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    15cc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    15ce:	040c      	lsls	r4, r1, #16
    15d0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    15d2:	23a0      	movs	r3, #160	; 0xa0
    15d4:	05db      	lsls	r3, r3, #23
    15d6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15d8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    15da:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    15dc:	23d0      	movs	r3, #208	; 0xd0
    15de:	061b      	lsls	r3, r3, #24
    15e0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15e2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    15e4:	78d3      	ldrb	r3, [r2, #3]
    15e6:	2b00      	cmp	r3, #0
    15e8:	d103      	bne.n	15f2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15ea:	7853      	ldrb	r3, [r2, #1]
    15ec:	3b01      	subs	r3, #1
    15ee:	2b01      	cmp	r3, #1
    15f0:	d902      	bls.n	15f8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    15f2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    15f4:	6181      	str	r1, [r0, #24]
    15f6:	e7f8      	b.n	15ea <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    15f8:	6081      	str	r1, [r0, #8]
}
    15fa:	e7fa      	b.n	15f2 <_system_pinmux_config+0x9a>
    15fc:	fffbffff 	.word	0xfffbffff

00001600 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1600:	b510      	push	{r4, lr}
    1602:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1604:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1606:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1608:	2900      	cmp	r1, #0
    160a:	d105      	bne.n	1618 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    160c:	0943      	lsrs	r3, r0, #5
    160e:	01db      	lsls	r3, r3, #7
    1610:	2182      	movs	r1, #130	; 0x82
    1612:	05c9      	lsls	r1, r1, #23
    1614:	468c      	mov	ip, r1
    1616:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1618:	241f      	movs	r4, #31
    161a:	4020      	ands	r0, r4
    161c:	2101      	movs	r1, #1
    161e:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1620:	0018      	movs	r0, r3
    1622:	4b01      	ldr	r3, [pc, #4]	; (1628 <system_pinmux_pin_set_config+0x28>)
    1624:	4798      	blx	r3
}
    1626:	bd10      	pop	{r4, pc}
    1628:	00001559 	.word	0x00001559

0000162c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    162c:	4770      	bx	lr
	...

00001630 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1630:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1632:	4b05      	ldr	r3, [pc, #20]	; (1648 <system_init+0x18>)
    1634:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1636:	4b05      	ldr	r3, [pc, #20]	; (164c <system_init+0x1c>)
    1638:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    163a:	4b05      	ldr	r3, [pc, #20]	; (1650 <system_init+0x20>)
    163c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    163e:	4b05      	ldr	r3, [pc, #20]	; (1654 <system_init+0x24>)
    1640:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1642:	4b05      	ldr	r3, [pc, #20]	; (1658 <system_init+0x28>)
    1644:	4798      	blx	r3
}
    1646:	bd10      	pop	{r4, pc}
    1648:	000012b5 	.word	0x000012b5
    164c:	000007d1 	.word	0x000007d1
    1650:	0000162d 	.word	0x0000162d
    1654:	000002c9 	.word	0x000002c9
    1658:	0000162d 	.word	0x0000162d

0000165c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    165c:	e7fe      	b.n	165c <Dummy_Handler>
	...

00001660 <Reset_Handler>:
{
    1660:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1662:	4a17      	ldr	r2, [pc, #92]	; (16c0 <Reset_Handler+0x60>)
    1664:	4b17      	ldr	r3, [pc, #92]	; (16c4 <Reset_Handler+0x64>)
    1666:	429a      	cmp	r2, r3
    1668:	d011      	beq.n	168e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    166a:	001a      	movs	r2, r3
    166c:	4b16      	ldr	r3, [pc, #88]	; (16c8 <Reset_Handler+0x68>)
    166e:	429a      	cmp	r2, r3
    1670:	d20d      	bcs.n	168e <Reset_Handler+0x2e>
    1672:	4a16      	ldr	r2, [pc, #88]	; (16cc <Reset_Handler+0x6c>)
    1674:	3303      	adds	r3, #3
    1676:	1a9b      	subs	r3, r3, r2
    1678:	089b      	lsrs	r3, r3, #2
    167a:	3301      	adds	r3, #1
    167c:	009b      	lsls	r3, r3, #2
    167e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1680:	4810      	ldr	r0, [pc, #64]	; (16c4 <Reset_Handler+0x64>)
    1682:	490f      	ldr	r1, [pc, #60]	; (16c0 <Reset_Handler+0x60>)
    1684:	588c      	ldr	r4, [r1, r2]
    1686:	5084      	str	r4, [r0, r2]
    1688:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    168a:	429a      	cmp	r2, r3
    168c:	d1fa      	bne.n	1684 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    168e:	4a10      	ldr	r2, [pc, #64]	; (16d0 <Reset_Handler+0x70>)
    1690:	4b10      	ldr	r3, [pc, #64]	; (16d4 <Reset_Handler+0x74>)
    1692:	429a      	cmp	r2, r3
    1694:	d20a      	bcs.n	16ac <Reset_Handler+0x4c>
    1696:	43d3      	mvns	r3, r2
    1698:	490e      	ldr	r1, [pc, #56]	; (16d4 <Reset_Handler+0x74>)
    169a:	185b      	adds	r3, r3, r1
    169c:	2103      	movs	r1, #3
    169e:	438b      	bics	r3, r1
    16a0:	3304      	adds	r3, #4
    16a2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    16a4:	2100      	movs	r1, #0
    16a6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    16a8:	4293      	cmp	r3, r2
    16aa:	d1fc      	bne.n	16a6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    16ac:	4a0a      	ldr	r2, [pc, #40]	; (16d8 <Reset_Handler+0x78>)
    16ae:	21ff      	movs	r1, #255	; 0xff
    16b0:	4b0a      	ldr	r3, [pc, #40]	; (16dc <Reset_Handler+0x7c>)
    16b2:	438b      	bics	r3, r1
    16b4:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    16b6:	4b0a      	ldr	r3, [pc, #40]	; (16e0 <Reset_Handler+0x80>)
    16b8:	4798      	blx	r3
        main();
    16ba:	4b0a      	ldr	r3, [pc, #40]	; (16e4 <Reset_Handler+0x84>)
    16bc:	4798      	blx	r3
    16be:	e7fe      	b.n	16be <Reset_Handler+0x5e>
    16c0:	00002874 	.word	0x00002874
    16c4:	20000000 	.word	0x20000000
    16c8:	20000004 	.word	0x20000004
    16cc:	20000004 	.word	0x20000004
    16d0:	20000004 	.word	0x20000004
    16d4:	20000298 	.word	0x20000298
    16d8:	e000ed00 	.word	0xe000ed00
    16dc:	00000000 	.word	0x00000000
    16e0:	0000250d 	.word	0x0000250d
    16e4:	000018a1 	.word	0x000018a1

000016e8 <test>:
const  struct port_config  config={PORT_PIN_DIR_INPUT,SYSTEM_PINMUX_PIN_PULL_DOWN,false};
const  struct port_config  configout={PORT_PIN_DIR_OUTPUT_WTH_READBACK,SYSTEM_PINMUX_PIN_PULL_DOWN,false};


bool test(Pcom Pcoma,Pcom Pcomb)
{
    16e8:	b084      	sub	sp, #16
    16ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ec:	46de      	mov	lr, fp
    16ee:	4657      	mov	r7, sl
    16f0:	464e      	mov	r6, r9
    16f2:	4645      	mov	r5, r8
    16f4:	b5e0      	push	{r5, r6, r7, lr}
    16f6:	b083      	sub	sp, #12
    16f8:	900c      	str	r0, [sp, #48]	; 0x30
    16fa:	910d      	str	r1, [sp, #52]	; 0x34
    16fc:	920e      	str	r2, [sp, #56]	; 0x38
    16fe:	930f      	str	r3, [sp, #60]	; 0x3c
    1700:	2381      	movs	r3, #129	; 0x81
    1702:	446b      	add	r3, sp
    1704:	4699      	mov	r9, r3
    1706:	2687      	movs	r6, #135	; 0x87
    1708:	446e      	add	r6, sp
    170a:	001f      	movs	r7, r3
	

	int i=0;
	for(i=0;i<6;i++)
	port_pin_set_config(Pcomb.pins[i],&config);
    170c:	4c61      	ldr	r4, [pc, #388]	; (1894 <test+0x1ac>)
    170e:	4d62      	ldr	r5, [pc, #392]	; (1898 <test+0x1b0>)
    1710:	7838      	ldrb	r0, [r7, #0]
    1712:	0021      	movs	r1, r4
    1714:	47a8      	blx	r5
    1716:	3701      	adds	r7, #1
	for(i=0;i<6;i++)
    1718:	42b7      	cmp	r7, r6
    171a:	d1f9      	bne.n	1710 <test+0x28>
    171c:	2331      	movs	r3, #49	; 0x31
    171e:	446b      	add	r3, sp
    1720:	469a      	mov	sl, r3
    1722:	2637      	movs	r6, #55	; 0x37
    1724:	446e      	add	r6, sp
	for(i=0;i<6;i++)
	port_pin_set_config(Pcoma.pins[i],&config);
    1726:	4c5b      	ldr	r4, [pc, #364]	; (1894 <test+0x1ac>)
    1728:	4d5b      	ldr	r5, [pc, #364]	; (1898 <test+0x1b0>)
    172a:	003b      	movs	r3, r7
    172c:	4657      	mov	r7, sl
    172e:	4698      	mov	r8, r3
    1730:	7838      	ldrb	r0, [r7, #0]
    1732:	0021      	movs	r1, r4
    1734:	47a8      	blx	r5
    1736:	3701      	adds	r7, #1
	for(i=0;i<6;i++)
    1738:	42b7      	cmp	r7, r6
    173a:	d1f9      	bne.n	1730 <test+0x48>
    173c:	4643      	mov	r3, r8
    173e:	46b8      	mov	r8, r7
    1740:	001f      	movs	r7, r3
	volatile char r0=0;
    1742:	2200      	movs	r2, #0
    1744:	466b      	mov	r3, sp
    1746:	71da      	strb	r2, [r3, #7]
	volatile char r1=1;
    1748:	3201      	adds	r2, #1
    174a:	466b      	mov	r3, sp
    174c:	719a      	strb	r2, [r3, #6]
    174e:	2601      	movs	r6, #1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1750:	231f      	movs	r3, #31
    1752:	469b      	mov	fp, r3
    1754:	e012      	b.n	177c <test+0x94>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1756:	465a      	mov	r2, fp
    1758:	4002      	ands	r2, r0
    175a:	2101      	movs	r1, #1
    175c:	4091      	lsls	r1, r2
		port_base->OUTSET.reg = pin_mask;
    175e:	6199      	str	r1, [r3, #24]
	for(i=0;i<6;i++)
	{
		
		r0|=port_pin_get_input_level(Pcoma.pins[i]);
		port_pin_set_output_level(Pcomb.pins[i],1);
		port_pin_set_config(Pcomb.pins[i],&configout);
    1760:	494e      	ldr	r1, [pc, #312]	; (189c <test+0x1b4>)
    1762:	4b4d      	ldr	r3, [pc, #308]	; (1898 <test+0x1b0>)
    1764:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    1766:	6a29      	ldr	r1, [r5, #32]
		r1&=port_pin_get_input_level(Pcoma.pins[i]);
    1768:	466b      	mov	r3, sp
    176a:	799a      	ldrb	r2, [r3, #6]
    176c:	400c      	ands	r4, r1
    176e:	1e61      	subs	r1, r4, #1
    1770:	418c      	sbcs	r4, r1
    1772:	4014      	ands	r4, r2
    1774:	719c      	strb	r4, [r3, #6]
    1776:	3601      	adds	r6, #1
	for(i=0;i<6;i++)
    1778:	2e07      	cmp	r6, #7
    177a:	d024      	beq.n	17c6 <test+0xde>
		r0|=port_pin_get_input_level(Pcoma.pins[i]);
    177c:	ab0c      	add	r3, sp, #48	; 0x30
    177e:	5cf3      	ldrb	r3, [r6, r3]
	if (port_index < PORT_INST_NUM) {
    1780:	09da      	lsrs	r2, r3, #7
		return NULL;
    1782:	2500      	movs	r5, #0
	if (port_index < PORT_INST_NUM) {
    1784:	2a00      	cmp	r2, #0
    1786:	d105      	bne.n	1794 <test+0xac>
		return &(ports[port_index]->Group[group_index]);
    1788:	095d      	lsrs	r5, r3, #5
    178a:	01ed      	lsls	r5, r5, #7
    178c:	2282      	movs	r2, #130	; 0x82
    178e:	05d2      	lsls	r2, r2, #23
    1790:	4694      	mov	ip, r2
    1792:	4465      	add	r5, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1794:	465a      	mov	r2, fp
    1796:	4013      	ands	r3, r2
    1798:	2401      	movs	r4, #1
    179a:	409c      	lsls	r4, r3
	return (port_base->IN.reg & pin_mask);
    179c:	6a2b      	ldr	r3, [r5, #32]
    179e:	466a      	mov	r2, sp
    17a0:	79d1      	ldrb	r1, [r2, #7]
    17a2:	4023      	ands	r3, r4
    17a4:	1e58      	subs	r0, r3, #1
    17a6:	4183      	sbcs	r3, r0
    17a8:	430b      	orrs	r3, r1
    17aa:	71d3      	strb	r3, [r2, #7]
		port_pin_set_output_level(Pcomb.pins[i],1);
    17ac:	ab20      	add	r3, sp, #128	; 0x80
    17ae:	5cf0      	ldrb	r0, [r6, r3]
	if (port_index < PORT_INST_NUM) {
    17b0:	09c2      	lsrs	r2, r0, #7
		return NULL;
    17b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    17b4:	2a00      	cmp	r2, #0
    17b6:	d1ce      	bne.n	1756 <test+0x6e>
		return &(ports[port_index]->Group[group_index]);
    17b8:	0943      	lsrs	r3, r0, #5
    17ba:	01db      	lsls	r3, r3, #7
    17bc:	2282      	movs	r2, #130	; 0x82
    17be:	05d2      	lsls	r2, r2, #23
    17c0:	4694      	mov	ip, r2
    17c2:	4463      	add	r3, ip
    17c4:	e7c7      	b.n	1756 <test+0x6e>
	}
	

	for(i=0;i<6;i++)
	port_pin_set_config(Pcomb.pins[i],&config);
    17c6:	4c33      	ldr	r4, [pc, #204]	; (1894 <test+0x1ac>)
    17c8:	4d33      	ldr	r5, [pc, #204]	; (1898 <test+0x1b0>)
    17ca:	464e      	mov	r6, r9
    17cc:	7830      	ldrb	r0, [r6, #0]
    17ce:	0021      	movs	r1, r4
    17d0:	47a8      	blx	r5
    17d2:	3601      	adds	r6, #1
	for(i=0;i<6;i++)
    17d4:	42be      	cmp	r6, r7
    17d6:	d1f9      	bne.n	17cc <test+0xe4>
    17d8:	2601      	movs	r6, #1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    17da:	251f      	movs	r5, #31
    17dc:	2701      	movs	r7, #1
    17de:	e013      	b.n	1808 <test+0x120>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    17e0:	002a      	movs	r2, r5
    17e2:	4002      	ands	r2, r0
    17e4:	0039      	movs	r1, r7
    17e6:	4091      	lsls	r1, r2
		port_base->OUTSET.reg = pin_mask;
    17e8:	6199      	str	r1, [r3, #24]
	for(i=0;i<6;i++)
	{
		
		r0|=port_pin_get_input_level(Pcomb.pins[i]);
		port_pin_set_output_level(Pcoma.pins[i],1);
		port_pin_set_config(Pcoma.pins[i],&configout);
    17ea:	492c      	ldr	r1, [pc, #176]	; (189c <test+0x1b4>)
    17ec:	4b2a      	ldr	r3, [pc, #168]	; (1898 <test+0x1b0>)
    17ee:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    17f0:	464b      	mov	r3, r9
    17f2:	6a19      	ldr	r1, [r3, #32]
		r1&=port_pin_get_input_level(Pcomb.pins[i]);
    17f4:	466b      	mov	r3, sp
    17f6:	799a      	ldrb	r2, [r3, #6]
    17f8:	400c      	ands	r4, r1
    17fa:	1e61      	subs	r1, r4, #1
    17fc:	418c      	sbcs	r4, r1
    17fe:	4014      	ands	r4, r2
    1800:	719c      	strb	r4, [r3, #6]
    1802:	3601      	adds	r6, #1
	for(i=0;i<6;i++)
    1804:	2e07      	cmp	r6, #7
    1806:	d025      	beq.n	1854 <test+0x16c>
		r0|=port_pin_get_input_level(Pcomb.pins[i]);
    1808:	ab20      	add	r3, sp, #128	; 0x80
    180a:	5cf3      	ldrb	r3, [r6, r3]
	if (port_index < PORT_INST_NUM) {
    180c:	09da      	lsrs	r2, r3, #7
		return NULL;
    180e:	2100      	movs	r1, #0
    1810:	4689      	mov	r9, r1
	if (port_index < PORT_INST_NUM) {
    1812:	2a00      	cmp	r2, #0
    1814:	d105      	bne.n	1822 <test+0x13a>
		return &(ports[port_index]->Group[group_index]);
    1816:	095a      	lsrs	r2, r3, #5
    1818:	01d2      	lsls	r2, r2, #7
    181a:	2182      	movs	r1, #130	; 0x82
    181c:	05c9      	lsls	r1, r1, #23
    181e:	4689      	mov	r9, r1
    1820:	4491      	add	r9, r2
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1822:	402b      	ands	r3, r5
    1824:	003c      	movs	r4, r7
    1826:	409c      	lsls	r4, r3
	return (port_base->IN.reg & pin_mask);
    1828:	464b      	mov	r3, r9
    182a:	6a1b      	ldr	r3, [r3, #32]
    182c:	466a      	mov	r2, sp
    182e:	79d1      	ldrb	r1, [r2, #7]
    1830:	4023      	ands	r3, r4
    1832:	1e58      	subs	r0, r3, #1
    1834:	4183      	sbcs	r3, r0
    1836:	430b      	orrs	r3, r1
    1838:	71d3      	strb	r3, [r2, #7]
		port_pin_set_output_level(Pcoma.pins[i],1);
    183a:	ab0c      	add	r3, sp, #48	; 0x30
    183c:	5cf0      	ldrb	r0, [r6, r3]
	if (port_index < PORT_INST_NUM) {
    183e:	09c2      	lsrs	r2, r0, #7
		return NULL;
    1840:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1842:	2a00      	cmp	r2, #0
    1844:	d1cc      	bne.n	17e0 <test+0xf8>
		return &(ports[port_index]->Group[group_index]);
    1846:	0943      	lsrs	r3, r0, #5
    1848:	01db      	lsls	r3, r3, #7
    184a:	2282      	movs	r2, #130	; 0x82
    184c:	05d2      	lsls	r2, r2, #23
    184e:	4694      	mov	ip, r2
    1850:	4463      	add	r3, ip
    1852:	e7c5      	b.n	17e0 <test+0xf8>
	}
	
	for(i=0;i<6;i++)
	port_pin_set_config(Pcoma.pins[i],&config);
    1854:	4c0f      	ldr	r4, [pc, #60]	; (1894 <test+0x1ac>)
    1856:	4d10      	ldr	r5, [pc, #64]	; (1898 <test+0x1b0>)
    1858:	4656      	mov	r6, sl
    185a:	4647      	mov	r7, r8
    185c:	7830      	ldrb	r0, [r6, #0]
    185e:	0021      	movs	r1, r4
    1860:	47a8      	blx	r5
    1862:	3601      	adds	r6, #1
	for(i=0;i<6;i++)
    1864:	42be      	cmp	r6, r7
    1866:	d1f9      	bne.n	185c <test+0x174>
	
	return ((r0==0) && (r1==1));
    1868:	466b      	mov	r3, sp
    186a:	3307      	adds	r3, #7
    186c:	781b      	ldrb	r3, [r3, #0]
    186e:	2000      	movs	r0, #0
    1870:	2b00      	cmp	r3, #0
    1872:	d105      	bne.n	1880 <test+0x198>
    1874:	466b      	mov	r3, sp
    1876:	7998      	ldrb	r0, [r3, #6]
    1878:	3801      	subs	r0, #1
    187a:	4243      	negs	r3, r0
    187c:	4158      	adcs	r0, r3
    187e:	b2c0      	uxtb	r0, r0
}
    1880:	b003      	add	sp, #12
    1882:	bc3c      	pop	{r2, r3, r4, r5}
    1884:	4690      	mov	r8, r2
    1886:	4699      	mov	r9, r3
    1888:	46a2      	mov	sl, r4
    188a:	46ab      	mov	fp, r5
    188c:	bcf0      	pop	{r4, r5, r6, r7}
    188e:	bc08      	pop	{r3}
    1890:	b004      	add	sp, #16
    1892:	4718      	bx	r3
    1894:	00002800 	.word	0x00002800
    1898:	00000805 	.word	0x00000805
    189c:	00002804 	.word	0x00002804

000018a0 <main>:
/**
 *  \brief SAM-BA Main loop.
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    18a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18a2:	b0a7      	sub	sp, #156	; 0x9c
    18a4:	af24      	add	r7, sp, #144	; 0x90
const Pcom Pcom2=PCOM2;
const Pcom Pcom3=PCOM3;
const Pcom Pcom4=PCOM4;
const Pcom Pcom5=PCOM5;
const Pcom Pcom0B=PCOM0B;
 test( Pcom1, Pcom5);
    18a6:	4d36      	ldr	r5, [pc, #216]	; (1980 <main+0xe0>)
    18a8:	ae10      	add	r6, sp, #64	; 0x40
    18aa:	2250      	movs	r2, #80	; 0x50
    18ac:	4935      	ldr	r1, [pc, #212]	; (1984 <main+0xe4>)
    18ae:	0030      	movs	r0, r6
    18b0:	4c35      	ldr	r4, [pc, #212]	; (1988 <main+0xe8>)
    18b2:	47a0      	blx	r4
    18b4:	0029      	movs	r1, r5
    18b6:	3110      	adds	r1, #16
    18b8:	2240      	movs	r2, #64	; 0x40
    18ba:	4668      	mov	r0, sp
    18bc:	47a0      	blx	r4
    18be:	6828      	ldr	r0, [r5, #0]
    18c0:	6869      	ldr	r1, [r5, #4]
    18c2:	68aa      	ldr	r2, [r5, #8]
    18c4:	68eb      	ldr	r3, [r5, #12]
    18c6:	4d31      	ldr	r5, [pc, #196]	; (198c <main+0xec>)
    18c8:	47a8      	blx	r5
 test( Pcom0B, Pcom5);
    18ca:	4d31      	ldr	r5, [pc, #196]	; (1990 <main+0xf0>)
    18cc:	2250      	movs	r2, #80	; 0x50
    18ce:	492d      	ldr	r1, [pc, #180]	; (1984 <main+0xe4>)
    18d0:	0030      	movs	r0, r6
    18d2:	47a0      	blx	r4
    18d4:	0029      	movs	r1, r5
    18d6:	3110      	adds	r1, #16
    18d8:	2240      	movs	r2, #64	; 0x40
    18da:	4668      	mov	r0, sp
    18dc:	47a0      	blx	r4
    18de:	6828      	ldr	r0, [r5, #0]
    18e0:	6869      	ldr	r1, [r5, #4]
    18e2:	68aa      	ldr	r2, [r5, #8]
    18e4:	68eb      	ldr	r3, [r5, #12]
    18e6:	4d29      	ldr	r5, [pc, #164]	; (198c <main+0xec>)
    18e8:	47a8      	blx	r5
 test( Pcom0, Pcom2);
    18ea:	4d2a      	ldr	r5, [pc, #168]	; (1994 <main+0xf4>)
    18ec:	2250      	movs	r2, #80	; 0x50
    18ee:	492a      	ldr	r1, [pc, #168]	; (1998 <main+0xf8>)
    18f0:	0030      	movs	r0, r6
    18f2:	47a0      	blx	r4
    18f4:	0029      	movs	r1, r5
    18f6:	3110      	adds	r1, #16
    18f8:	2240      	movs	r2, #64	; 0x40
    18fa:	4668      	mov	r0, sp
    18fc:	47a0      	blx	r4
    18fe:	6828      	ldr	r0, [r5, #0]
    1900:	6869      	ldr	r1, [r5, #4]
    1902:	68aa      	ldr	r2, [r5, #8]
    1904:	68eb      	ldr	r3, [r5, #12]
    1906:	4d21      	ldr	r5, [pc, #132]	; (198c <main+0xec>)
    1908:	47a8      	blx	r5
 test( Pcom3, Pcom4);
    190a:	4d24      	ldr	r5, [pc, #144]	; (199c <main+0xfc>)
    190c:	2250      	movs	r2, #80	; 0x50
    190e:	4924      	ldr	r1, [pc, #144]	; (19a0 <main+0x100>)
    1910:	0030      	movs	r0, r6
    1912:	47a0      	blx	r4
    1914:	0029      	movs	r1, r5
    1916:	3110      	adds	r1, #16
    1918:	2240      	movs	r2, #64	; 0x40
    191a:	4668      	mov	r0, sp
    191c:	47a0      	blx	r4
    191e:	6828      	ldr	r0, [r5, #0]
    1920:	6869      	ldr	r1, [r5, #4]
    1922:	68aa      	ldr	r2, [r5, #8]
    1924:	68eb      	ldr	r3, [r5, #12]
    1926:	4c19      	ldr	r4, [pc, #100]	; (198c <main+0xec>)
    1928:	47a0      	blx	r4
	app_start_address = *(uint32_t *)(APP_START_ADDRESS + 4);
    192a:	4b1e      	ldr	r3, [pc, #120]	; (19a4 <main+0x104>)
    192c:	681a      	ldr	r2, [r3, #0]
	if (app_start_address == 0xFFFFFFFF) {
    192e:	1c53      	adds	r3, r2, #1
    1930:	d017      	beq.n	1962 <main+0xc2>
	boot_port->DIRCLR.reg = GPIO_BOOT_PIN_MASK;
    1932:	2382      	movs	r3, #130	; 0x82
    1934:	05db      	lsls	r3, r3, #23
    1936:	2180      	movs	r1, #128	; 0x80
    1938:	0549      	lsls	r1, r1, #21
    193a:	6059      	str	r1, [r3, #4]
	boot_port->PINCFG[BOOT_LOAD_PIN & 0x1F].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    193c:	2406      	movs	r4, #6
    193e:	205c      	movs	r0, #92	; 0x5c
    1940:	541c      	strb	r4, [r3, r0]
	boot_port->OUTSET.reg = GPIO_BOOT_PIN_MASK;
    1942:	6199      	str	r1, [r3, #24]
	boot_en = (boot_port->IN.reg) & GPIO_BOOT_PIN_MASK;
    1944:	6a1b      	ldr	r3, [r3, #32]
    1946:	00db      	lsls	r3, r3, #3
    1948:	0fdb      	lsrs	r3, r3, #31
    194a:	71fb      	strb	r3, [r7, #7]
	if (!boot_en) {
    194c:	79fb      	ldrb	r3, [r7, #7]
    194e:	2b00      	cmp	r3, #0
    1950:	d007      	beq.n	1962 <main+0xc2>
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    1952:	2380      	movs	r3, #128	; 0x80
    1954:	01db      	lsls	r3, r3, #7
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    1956:	6819      	ldr	r1, [r3, #0]
    1958:	f381 8808 	msr	MSP, r1
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    195c:	4912      	ldr	r1, [pc, #72]	; (19a8 <main+0x108>)
    195e:	608b      	str	r3, [r1, #8]
	asm("bx %0"::"r"(app_start_address));
    1960:	4710      	bx	r2
	/* Jump in application if condition is satisfied */
	check_start_application();

	/* We have determined we should stay in the monitor. */
	/* System initialization */
	system_init();
    1962:	4b12      	ldr	r3, [pc, #72]	; (19ac <main+0x10c>)
    1964:	4798      	blx	r3
#ifdef CONF_USBCDC_INTERFACE_SUPPORT
	/* Start USB stack */
	udc_start();
#endif
	/* UART is enabled in all cases */
	usart_open();
    1966:	4b12      	ldr	r3, [pc, #72]	; (19b0 <main+0x110>)
    1968:	4798      	blx	r3
				sam_ba_monitor_run();
			}
		}
#endif
		/* Check if a '#' has been received */
		if (usart_sharp_received()) {
    196a:	4c12      	ldr	r4, [pc, #72]	; (19b4 <main+0x114>)
    196c:	47a0      	blx	r4
    196e:	2800      	cmp	r0, #0
    1970:	d0fc      	beq.n	196c <main+0xcc>
			sam_ba_monitor_init(SAM_BA_INTERFACE_USART);
    1972:	2001      	movs	r0, #1
    1974:	4b10      	ldr	r3, [pc, #64]	; (19b8 <main+0x118>)
    1976:	4798      	blx	r3
			/* SAM-BA on UART loop */
			while(1) {
				sam_ba_monitor_run();
    1978:	4c10      	ldr	r4, [pc, #64]	; (19bc <main+0x11c>)
    197a:	47a0      	blx	r4
    197c:	e7fd      	b.n	197a <main+0xda>
    197e:	46c0      	nop			; (mov r8, r8)
    1980:	00002670 	.word	0x00002670
    1984:	000027b0 	.word	0x000027b0
    1988:	00002555 	.word	0x00002555
    198c:	000016e9 	.word	0x000016e9
    1990:	00002620 	.word	0x00002620
    1994:	000025d0 	.word	0x000025d0
    1998:	000026c0 	.word	0x000026c0
    199c:	00002710 	.word	0x00002710
    19a0:	00002760 	.word	0x00002760
    19a4:	00004004 	.word	0x00004004
    19a8:	e000ed00 	.word	0xe000ed00
    19ac:	00001631 	.word	0x00001631
    19b0:	00001e3d 	.word	0x00001e3d
    19b4:	00001fc5 	.word	0x00001fc5
    19b8:	000019c1 	.word	0x000019c1
    19bc:	00001a95 	.word	0x00001a95

000019c0 <sam_ba_monitor_init>:
 * \param com_interface  Communication interface to be used.
 */
void sam_ba_monitor_init(uint8_t com_interface)
{
	/* Selects the requested interface for future actions */
	if (com_interface == SAM_BA_INTERFACE_USART)
    19c0:	2801      	cmp	r0, #1
    19c2:	d000      	beq.n	19c6 <sam_ba_monitor_init+0x6>
		ptr_monitor_if = (t_monitor_if*) &uart_if;
#ifdef CONF_USBCDC_INTERFACE_SUPPORT
	if (com_interface == SAM_BA_INTERFACE_USBCDC)
		ptr_monitor_if = (t_monitor_if*) &usbcdc_if;
#endif
}
    19c4:	4770      	bx	lr
		ptr_monitor_if = (t_monitor_if*) &uart_if;
    19c6:	4a02      	ldr	r2, [pc, #8]	; (19d0 <sam_ba_monitor_init+0x10>)
    19c8:	4b02      	ldr	r3, [pc, #8]	; (19d4 <sam_ba_monitor_init+0x14>)
    19ca:	601a      	str	r2, [r3, #0]
}
    19cc:	e7fa      	b.n	19c4 <sam_ba_monitor_init+0x4>
    19ce:	46c0      	nop			; (mov r8, r8)
    19d0:	00002838 	.word	0x00002838
    19d4:	20000148 	.word	0x20000148

000019d8 <sam_ba_putdata_term>:
 *
 * \param *data  Data pointer
 * \param length Length of the data
 */
void sam_ba_putdata_term(uint8_t* data, uint32_t length)
{
    19d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19da:	b085      	sub	sp, #20
	uint8_t temp, buf[12], *data_ascii;
	uint32_t i, int_value;

	if (b_terminal_mode)
    19dc:	4b1f      	ldr	r3, [pc, #124]	; (1a5c <sam_ba_putdata_term+0x84>)
    19de:	781b      	ldrb	r3, [r3, #0]
    19e0:	2b00      	cmp	r3, #0
    19e2:	d036      	beq.n	1a52 <sam_ba_putdata_term+0x7a>
	{
		if (length == 4)
    19e4:	2904      	cmp	r1, #4
    19e6:	d01b      	beq.n	1a20 <sam_ba_putdata_term+0x48>
			int_value = *(uint32_t *) data;
		else if (length == 2)
    19e8:	2902      	cmp	r1, #2
    19ea:	d022      	beq.n	1a32 <sam_ba_putdata_term+0x5a>
			int_value = *(uint16_t *) data;
		else
			int_value = *(uint8_t *) data;
    19ec:	7800      	ldrb	r0, [r0, #0]

		data_ascii = buf + 2;
		data_ascii += length * 2 - 1;
    19ee:	004d      	lsls	r5, r1, #1
    19f0:	ab04      	add	r3, sp, #16
    19f2:	195a      	adds	r2, r3, r5
    19f4:	3a0b      	subs	r2, #11

		for (i = 0; i < length * 2; i++)
    19f6:	2d00      	cmp	r5, #0
    19f8:	d117      	bne.n	1a2a <sam_ba_putdata_term+0x52>
				*data_ascii = temp + 0x37;

			int_value >>= 4;
			data_ascii--;
		}
		buf[0] = '0';
    19fa:	a801      	add	r0, sp, #4
    19fc:	2330      	movs	r3, #48	; 0x30
    19fe:	7003      	strb	r3, [r0, #0]
		buf[1] = 'x';
    1a00:	3348      	adds	r3, #72	; 0x48
    1a02:	7043      	strb	r3, [r0, #1]
		buf[length * 2 + 2] = '\n';
    1a04:	3101      	adds	r1, #1
    1a06:	0049      	lsls	r1, r1, #1
    1a08:	3b6e      	subs	r3, #110	; 0x6e
    1a0a:	5443      	strb	r3, [r0, r1]
		buf[length * 2 + 3] = '\r';
    1a0c:	1945      	adds	r5, r0, r5
    1a0e:	3303      	adds	r3, #3
    1a10:	70eb      	strb	r3, [r5, #3]
		ptr_monitor_if->putdata(buf, length * 2 + 4);
    1a12:	3102      	adds	r1, #2
    1a14:	4b12      	ldr	r3, [pc, #72]	; (1a60 <sam_ba_putdata_term+0x88>)
    1a16:	681b      	ldr	r3, [r3, #0]
    1a18:	68db      	ldr	r3, [r3, #12]
    1a1a:	4798      	blx	r3
	}
	else
		ptr_monitor_if->putdata(data, length);
	return;
}
    1a1c:	b005      	add	sp, #20
    1a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			int_value = *(uint32_t *) data;
    1a20:	6800      	ldr	r0, [r0, #0]
		data_ascii += length * 2 - 1;
    1a22:	004d      	lsls	r5, r1, #1
    1a24:	ab04      	add	r3, sp, #16
    1a26:	195a      	adds	r2, r3, r5
    1a28:	3a0b      	subs	r2, #11
{
    1a2a:	2400      	movs	r4, #0
			temp = (uint8_t) (int_value & 0xf);
    1a2c:	260f      	movs	r6, #15
				*data_ascii = temp | 0x30;
    1a2e:	2730      	movs	r7, #48	; 0x30
    1a30:	e008      	b.n	1a44 <sam_ba_putdata_term+0x6c>
			int_value = *(uint16_t *) data;
    1a32:	8800      	ldrh	r0, [r0, #0]
    1a34:	e7f5      	b.n	1a22 <sam_ba_putdata_term+0x4a>
				*data_ascii = temp + 0x37;
    1a36:	3337      	adds	r3, #55	; 0x37
    1a38:	7013      	strb	r3, [r2, #0]
			int_value >>= 4;
    1a3a:	0900      	lsrs	r0, r0, #4
			data_ascii--;
    1a3c:	3a01      	subs	r2, #1
		for (i = 0; i < length * 2; i++)
    1a3e:	3401      	adds	r4, #1
    1a40:	42ac      	cmp	r4, r5
    1a42:	d2da      	bcs.n	19fa <sam_ba_putdata_term+0x22>
			temp = (uint8_t) (int_value & 0xf);
    1a44:	0033      	movs	r3, r6
    1a46:	4003      	ands	r3, r0
			if (temp <= 0x9)
    1a48:	2b09      	cmp	r3, #9
    1a4a:	d8f4      	bhi.n	1a36 <sam_ba_putdata_term+0x5e>
				*data_ascii = temp | 0x30;
    1a4c:	433b      	orrs	r3, r7
    1a4e:	7013      	strb	r3, [r2, #0]
    1a50:	e7f3      	b.n	1a3a <sam_ba_putdata_term+0x62>
		ptr_monitor_if->putdata(data, length);
    1a52:	4b03      	ldr	r3, [pc, #12]	; (1a60 <sam_ba_putdata_term+0x88>)
    1a54:	681b      	ldr	r3, [r3, #0]
    1a56:	68db      	ldr	r3, [r3, #12]
    1a58:	4798      	blx	r3
	return;
    1a5a:	e7df      	b.n	1a1c <sam_ba_putdata_term+0x44>
    1a5c:	20000050 	.word	0x20000050
    1a60:	20000148 	.word	0x20000148

00001a64 <call_applet>:
 * \brief Execute an applet from the specified address
 *
 * \param address Applet address
 */
void call_applet(uint32_t address)
{
    1a64:	b580      	push	{r7, lr}
    1a66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
    1a68:	b672      	cpsid	i
    1a6a:	f3bf 8f5f 	dmb	sy
	uint32_t app_start_address;

	cpu_irq_disable();
    1a6e:	2200      	movs	r2, #0
    1a70:	4b06      	ldr	r3, [pc, #24]	; (1a8c <call_applet+0x28>)
    1a72:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
    1a74:	f3ef 8308 	mrs	r3, MSP

	sp = __get_MSP();
    1a78:	4a05      	ldr	r2, [pc, #20]	; (1a90 <call_applet+0x2c>)
    1a7a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    1a7c:	6803      	ldr	r3, [r0, #0]
    1a7e:	f383 8808 	msr	MSP, r3

	/* Load the Reset Handler address of the application */
	app_start_address = *(uint32_t *)(address + 4);

	/* Jump to application Reset Handler in the application */
	asm("bx %0"::"r"(app_start_address));
    1a82:	6843      	ldr	r3, [r0, #4]
    1a84:	4718      	bx	r3
}
    1a86:	46bd      	mov	sp, r7
    1a88:	bd80      	pop	{r7, pc}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	20000000 	.word	0x20000000
    1a90:	2000014c 	.word	0x2000014c

00001a94 <sam_ba_monitor_run>:

/**
 * \brief This function starts the SAM-BA monitor.
 */
void sam_ba_monitor_run(void)
{
    1a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a96:	46de      	mov	lr, fp
    1a98:	4657      	mov	r7, sl
    1a9a:	464e      	mov	r6, r9
    1a9c:	4645      	mov	r5, r8
    1a9e:	b5e0      	push	{r5, r6, r7, lr}
    1aa0:	b083      	sub	sp, #12
    1aa2:	af00      	add	r7, sp, #0
	ptr_data = NULL;
    1aa4:	2200      	movs	r2, #0
    1aa6:	4bcd      	ldr	r3, [pc, #820]	; (1ddc <sam_ba_monitor_run+0x348>)
    1aa8:	601a      	str	r2, [r3, #0]
	command = 'z';
    1aaa:	327a      	adds	r2, #122	; 0x7a
    1aac:	4bcc      	ldr	r3, [pc, #816]	; (1de0 <sam_ba_monitor_run+0x34c>)
    1aae:	701a      	strb	r2, [r3, #0]

	// Start waiting some cmd
	while (1)
	{
		length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
    1ab0:	4bcc      	ldr	r3, [pc, #816]	; (1de4 <sam_ba_monitor_run+0x350>)
    1ab2:	469a      	mov	sl, r3
    1ab4:	4bcc      	ldr	r3, [pc, #816]	; (1de8 <sam_ba_monitor_run+0x354>)
    1ab6:	469b      	mov	fp, r3
					{
						command = *ptr;
						current_number = 0;
					}
				}
				ptr++;
    1ab8:	4ccc      	ldr	r4, [pc, #816]	; (1dec <sam_ba_monitor_run+0x358>)
						command = *ptr;
    1aba:	4bc9      	ldr	r3, [pc, #804]	; (1de0 <sam_ba_monitor_run+0x34c>)
    1abc:	4698      	mov	r8, r3
		length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
    1abe:	465b      	mov	r3, fp
    1ac0:	681b      	ldr	r3, [r3, #0]
    1ac2:	691b      	ldr	r3, [r3, #16]
    1ac4:	2140      	movs	r1, #64	; 0x40
    1ac6:	4650      	mov	r0, sl
    1ac8:	4798      	blx	r3
    1aca:	4bc9      	ldr	r3, [pc, #804]	; (1df0 <sam_ba_monitor_run+0x35c>)
    1acc:	6018      	str	r0, [r3, #0]
		ptr = data;
    1ace:	4bc7      	ldr	r3, [pc, #796]	; (1dec <sam_ba_monitor_run+0x358>)
    1ad0:	4652      	mov	r2, sl
    1ad2:	601a      	str	r2, [r3, #0]
		for (i = 0; i < length; i++)
    1ad4:	2200      	movs	r2, #0
    1ad6:	4bc7      	ldr	r3, [pc, #796]	; (1df4 <sam_ba_monitor_run+0x360>)
    1ad8:	601a      	str	r2, [r3, #0]
    1ada:	2800      	cmp	r0, #0
    1adc:	d0ef      	beq.n	1abe <sam_ba_monitor_run+0x2a>
			if (*ptr != 0xff)
    1ade:	4dc3      	ldr	r5, [pc, #780]	; (1dec <sam_ba_monitor_run+0x358>)
    1ae0:	e0da      	b.n	1c98 <sam_ba_monitor_run+0x204>
					if (b_terminal_mode)
    1ae2:	4bc5      	ldr	r3, [pc, #788]	; (1df8 <sam_ba_monitor_run+0x364>)
    1ae4:	781b      	ldrb	r3, [r3, #0]
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d172      	bne.n	1bd0 <sam_ba_monitor_run+0x13c>
					if (command == 'S')
    1aea:	4bbd      	ldr	r3, [pc, #756]	; (1de0 <sam_ba_monitor_run+0x34c>)
    1aec:	781b      	ldrb	r3, [r3, #0]
    1aee:	2b53      	cmp	r3, #83	; 0x53
    1af0:	d075      	beq.n	1bde <sam_ba_monitor_run+0x14a>
					else if (command == 'R')
    1af2:	2b52      	cmp	r3, #82	; 0x52
    1af4:	d100      	bne.n	1af8 <sam_ba_monitor_run+0x64>
    1af6:	e0e9      	b.n	1ccc <sam_ba_monitor_run+0x238>
					else if (command == 'O')
    1af8:	2b4f      	cmp	r3, #79	; 0x4f
    1afa:	d100      	bne.n	1afe <sam_ba_monitor_run+0x6a>
    1afc:	e0ef      	b.n	1cde <sam_ba_monitor_run+0x24a>
					else if (command == 'H')
    1afe:	2b48      	cmp	r3, #72	; 0x48
    1b00:	d100      	bne.n	1b04 <sam_ba_monitor_run+0x70>
    1b02:	e0f2      	b.n	1cea <sam_ba_monitor_run+0x256>
					else if (command == 'W')
    1b04:	2b57      	cmp	r3, #87	; 0x57
    1b06:	d100      	bne.n	1b0a <sam_ba_monitor_run+0x76>
    1b08:	e0f5      	b.n	1cf6 <sam_ba_monitor_run+0x262>
					else if (command == 'o')
    1b0a:	2b6f      	cmp	r3, #111	; 0x6f
    1b0c:	d100      	bne.n	1b10 <sam_ba_monitor_run+0x7c>
    1b0e:	e0f8      	b.n	1d02 <sam_ba_monitor_run+0x26e>
					else if (command == 'h')
    1b10:	2b68      	cmp	r3, #104	; 0x68
    1b12:	d100      	bne.n	1b16 <sam_ba_monitor_run+0x82>
    1b14:	e0fb      	b.n	1d0e <sam_ba_monitor_run+0x27a>
					else if (command == 'w')
    1b16:	2b77      	cmp	r3, #119	; 0x77
    1b18:	d100      	bne.n	1b1c <sam_ba_monitor_run+0x88>
    1b1a:	e101      	b.n	1d20 <sam_ba_monitor_run+0x28c>
					else if (command == 'G')
    1b1c:	2b47      	cmp	r3, #71	; 0x47
    1b1e:	d100      	bne.n	1b22 <sam_ba_monitor_run+0x8e>
    1b20:	e107      	b.n	1d32 <sam_ba_monitor_run+0x29e>
					else if (command == 'T')
    1b22:	2b54      	cmp	r3, #84	; 0x54
    1b24:	d100      	bne.n	1b28 <sam_ba_monitor_run+0x94>
    1b26:	e113      	b.n	1d50 <sam_ba_monitor_run+0x2bc>
					else if (command == 'N')
    1b28:	2b4e      	cmp	r3, #78	; 0x4e
    1b2a:	d100      	bne.n	1b2e <sam_ba_monitor_run+0x9a>
    1b2c:	e11a      	b.n	1d64 <sam_ba_monitor_run+0x2d0>
					else if (command == 'V')
    1b2e:	2b56      	cmp	r3, #86	; 0x56
    1b30:	d000      	beq.n	1b34 <sam_ba_monitor_run+0xa0>
    1b32:	e09a      	b.n	1c6a <sam_ba_monitor_run+0x1d6>
						ptr_monitor_if->putdata("v", 1);
    1b34:	4bac      	ldr	r3, [pc, #688]	; (1de8 <sam_ba_monitor_run+0x354>)
    1b36:	4699      	mov	r9, r3
    1b38:	681b      	ldr	r3, [r3, #0]
    1b3a:	68db      	ldr	r3, [r3, #12]
    1b3c:	2101      	movs	r1, #1
    1b3e:	48af      	ldr	r0, [pc, #700]	; (1dfc <sam_ba_monitor_run+0x368>)
    1b40:	4798      	blx	r3
						ptr_monitor_if->putdata((uint8_t *) RomBOOT_Version,
    1b42:	464b      	mov	r3, r9
    1b44:	681b      	ldr	r3, [r3, #0]
    1b46:	68db      	ldr	r3, [r3, #12]
    1b48:	2104      	movs	r1, #4
    1b4a:	48ad      	ldr	r0, [pc, #692]	; (1e00 <sam_ba_monitor_run+0x36c>)
    1b4c:	4798      	blx	r3
						ptr_monitor_if->putdata(" ", 1);
    1b4e:	464b      	mov	r3, r9
    1b50:	681b      	ldr	r3, [r3, #0]
    1b52:	68db      	ldr	r3, [r3, #12]
    1b54:	2101      	movs	r1, #1
    1b56:	48ab      	ldr	r0, [pc, #684]	; (1e04 <sam_ba_monitor_run+0x370>)
    1b58:	4798      	blx	r3
						i = 0;
    1b5a:	2200      	movs	r2, #0
    1b5c:	4ba5      	ldr	r3, [pc, #660]	; (1df4 <sam_ba_monitor_run+0x360>)
    1b5e:	601a      	str	r2, [r3, #0]
						while (*ptr++ != '\0')
    1b60:	4aa9      	ldr	r2, [pc, #676]	; (1e08 <sam_ba_monitor_run+0x374>)
    1b62:	4ba2      	ldr	r3, [pc, #648]	; (1dec <sam_ba_monitor_run+0x358>)
    1b64:	601a      	str	r2, [r3, #0]
							i++;
    1b66:	48a3      	ldr	r0, [pc, #652]	; (1df4 <sam_ba_monitor_run+0x360>)
						while (*ptr++ != '\0')
    1b68:	001a      	movs	r2, r3
							i++;
    1b6a:	6803      	ldr	r3, [r0, #0]
    1b6c:	1c59      	adds	r1, r3, #1
    1b6e:	6001      	str	r1, [r0, #0]
						while (*ptr++ != '\0')
    1b70:	6813      	ldr	r3, [r2, #0]
    1b72:	1c5e      	adds	r6, r3, #1
    1b74:	6016      	str	r6, [r2, #0]
    1b76:	781b      	ldrb	r3, [r3, #0]
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d1f6      	bne.n	1b6a <sam_ba_monitor_run+0xd6>
						ptr_monitor_if->putdata((uint8_t *) &(__DATE__), i);
    1b7c:	4b9a      	ldr	r3, [pc, #616]	; (1de8 <sam_ba_monitor_run+0x354>)
    1b7e:	4699      	mov	r9, r3
    1b80:	681b      	ldr	r3, [r3, #0]
    1b82:	68db      	ldr	r3, [r3, #12]
    1b84:	48a1      	ldr	r0, [pc, #644]	; (1e0c <sam_ba_monitor_run+0x378>)
    1b86:	4798      	blx	r3
						ptr_monitor_if->putdata(" ", 1);
    1b88:	464b      	mov	r3, r9
    1b8a:	681b      	ldr	r3, [r3, #0]
    1b8c:	68db      	ldr	r3, [r3, #12]
    1b8e:	2101      	movs	r1, #1
    1b90:	489c      	ldr	r0, [pc, #624]	; (1e04 <sam_ba_monitor_run+0x370>)
    1b92:	4798      	blx	r3
						i = 0;
    1b94:	2200      	movs	r2, #0
    1b96:	4b97      	ldr	r3, [pc, #604]	; (1df4 <sam_ba_monitor_run+0x360>)
    1b98:	601a      	str	r2, [r3, #0]
						while (*ptr++ != '\0')
    1b9a:	4a9d      	ldr	r2, [pc, #628]	; (1e10 <sam_ba_monitor_run+0x37c>)
    1b9c:	4b93      	ldr	r3, [pc, #588]	; (1dec <sam_ba_monitor_run+0x358>)
    1b9e:	601a      	str	r2, [r3, #0]
							i++;
    1ba0:	4894      	ldr	r0, [pc, #592]	; (1df4 <sam_ba_monitor_run+0x360>)
						while (*ptr++ != '\0')
    1ba2:	001a      	movs	r2, r3
							i++;
    1ba4:	6803      	ldr	r3, [r0, #0]
    1ba6:	1c59      	adds	r1, r3, #1
    1ba8:	6001      	str	r1, [r0, #0]
						while (*ptr++ != '\0')
    1baa:	6813      	ldr	r3, [r2, #0]
    1bac:	1c5e      	adds	r6, r3, #1
    1bae:	6016      	str	r6, [r2, #0]
    1bb0:	781b      	ldrb	r3, [r3, #0]
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	d1f6      	bne.n	1ba4 <sam_ba_monitor_run+0x110>
						ptr_monitor_if->putdata((uint8_t *) &(__TIME__), i);
    1bb6:	4b8c      	ldr	r3, [pc, #560]	; (1de8 <sam_ba_monitor_run+0x354>)
    1bb8:	4699      	mov	r9, r3
    1bba:	681b      	ldr	r3, [r3, #0]
    1bbc:	68db      	ldr	r3, [r3, #12]
    1bbe:	4895      	ldr	r0, [pc, #596]	; (1e14 <sam_ba_monitor_run+0x380>)
    1bc0:	4798      	blx	r3
						ptr_monitor_if->putdata("\n\r", 2);
    1bc2:	464b      	mov	r3, r9
    1bc4:	681b      	ldr	r3, [r3, #0]
    1bc6:	68db      	ldr	r3, [r3, #12]
    1bc8:	2102      	movs	r1, #2
    1bca:	4893      	ldr	r0, [pc, #588]	; (1e18 <sam_ba_monitor_run+0x384>)
    1bcc:	4798      	blx	r3
    1bce:	e04c      	b.n	1c6a <sam_ba_monitor_run+0x1d6>
						ptr_monitor_if->putdata("\n\r", 2);
    1bd0:	4b85      	ldr	r3, [pc, #532]	; (1de8 <sam_ba_monitor_run+0x354>)
    1bd2:	681b      	ldr	r3, [r3, #0]
    1bd4:	68db      	ldr	r3, [r3, #12]
    1bd6:	2102      	movs	r1, #2
    1bd8:	488f      	ldr	r0, [pc, #572]	; (1e18 <sam_ba_monitor_run+0x384>)
    1bda:	4798      	blx	r3
    1bdc:	e785      	b.n	1aea <sam_ba_monitor_run+0x56>
						if(length>i)
    1bde:	4b84      	ldr	r3, [pc, #528]	; (1df0 <sam_ba_monitor_run+0x35c>)
    1be0:	681b      	ldr	r3, [r3, #0]
    1be2:	4a84      	ldr	r2, [pc, #528]	; (1df4 <sam_ba_monitor_run+0x360>)
    1be4:	6812      	ldr	r2, [r2, #0]
    1be6:	4293      	cmp	r3, r2
    1be8:	d930      	bls.n	1c4c <sam_ba_monitor_run+0x1b8>
							ptr++;
    1bea:	4880      	ldr	r0, [pc, #512]	; (1dec <sam_ba_monitor_run+0x358>)
    1bec:	6801      	ldr	r1, [r0, #0]
    1bee:	3101      	adds	r1, #1
    1bf0:	6001      	str	r1, [r0, #0]
							i++;
    1bf2:	3201      	adds	r2, #1
    1bf4:	497f      	ldr	r1, [pc, #508]	; (1df4 <sam_ba_monitor_run+0x360>)
    1bf6:	600a      	str	r2, [r1, #0]
							u32tmp=min((length-i),current_number);
    1bf8:	4988      	ldr	r1, [pc, #544]	; (1e1c <sam_ba_monitor_run+0x388>)
    1bfa:	6809      	ldr	r1, [r1, #0]
    1bfc:	1a9b      	subs	r3, r3, r2
    1bfe:	428b      	cmp	r3, r1
    1c00:	d900      	bls.n	1c04 <sam_ba_monitor_run+0x170>
    1c02:	000b      	movs	r3, r1
    1c04:	4a86      	ldr	r2, [pc, #536]	; (1e20 <sam_ba_monitor_run+0x38c>)
    1c06:	6013      	str	r3, [r2, #0]
							for(j=0;j<u32tmp;j++)
    1c08:	2100      	movs	r1, #0
    1c0a:	4a86      	ldr	r2, [pc, #536]	; (1e24 <sam_ba_monitor_run+0x390>)
    1c0c:	7011      	strb	r1, [r2, #0]
    1c0e:	2b00      	cmp	r3, #0
    1c10:	d01c      	beq.n	1c4c <sam_ba_monitor_run+0x1b8>
								*ptr_data = *ptr;
    1c12:	4972      	ldr	r1, [pc, #456]	; (1ddc <sam_ba_monitor_run+0x348>)
    1c14:	4a75      	ldr	r2, [pc, #468]	; (1dec <sam_ba_monitor_run+0x358>)
							for(j=0;j<u32tmp;j++)
    1c16:	4883      	ldr	r0, [pc, #524]	; (1e24 <sam_ba_monitor_run+0x390>)
    1c18:	4b81      	ldr	r3, [pc, #516]	; (1e20 <sam_ba_monitor_run+0x38c>)
    1c1a:	469c      	mov	ip, r3
								*ptr_data = *ptr;
    1c1c:	6813      	ldr	r3, [r2, #0]
    1c1e:	781b      	ldrb	r3, [r3, #0]
    1c20:	680e      	ldr	r6, [r1, #0]
    1c22:	7033      	strb	r3, [r6, #0]
								ptr_data++;
    1c24:	680b      	ldr	r3, [r1, #0]
    1c26:	3301      	adds	r3, #1
    1c28:	600b      	str	r3, [r1, #0]
								ptr++;
    1c2a:	6813      	ldr	r3, [r2, #0]
    1c2c:	3301      	adds	r3, #1
    1c2e:	6013      	str	r3, [r2, #0]
								i++;
    1c30:	4b70      	ldr	r3, [pc, #448]	; (1df4 <sam_ba_monitor_run+0x360>)
    1c32:	681b      	ldr	r3, [r3, #0]
    1c34:	607b      	str	r3, [r7, #4]
    1c36:	3301      	adds	r3, #1
    1c38:	4e6e      	ldr	r6, [pc, #440]	; (1df4 <sam_ba_monitor_run+0x360>)
    1c3a:	6033      	str	r3, [r6, #0]
							for(j=0;j<u32tmp;j++)
    1c3c:	7803      	ldrb	r3, [r0, #0]
    1c3e:	3301      	adds	r3, #1
    1c40:	b2db      	uxtb	r3, r3
    1c42:	7003      	strb	r3, [r0, #0]
    1c44:	4666      	mov	r6, ip
    1c46:	6836      	ldr	r6, [r6, #0]
    1c48:	42b3      	cmp	r3, r6
    1c4a:	d3e7      	bcc.n	1c1c <sam_ba_monitor_run+0x188>
						i--;
    1c4c:	4a69      	ldr	r2, [pc, #420]	; (1df4 <sam_ba_monitor_run+0x360>)
    1c4e:	6813      	ldr	r3, [r2, #0]
    1c50:	3b01      	subs	r3, #1
    1c52:	6013      	str	r3, [r2, #0]
						ptr--;
    1c54:	4a65      	ldr	r2, [pc, #404]	; (1dec <sam_ba_monitor_run+0x358>)
    1c56:	6813      	ldr	r3, [r2, #0]
    1c58:	3b01      	subs	r3, #1
    1c5a:	6013      	str	r3, [r2, #0]
						if(j<current_number)
    1c5c:	4b71      	ldr	r3, [pc, #452]	; (1e24 <sam_ba_monitor_run+0x390>)
    1c5e:	781b      	ldrb	r3, [r3, #0]
    1c60:	4a6e      	ldr	r2, [pc, #440]	; (1e1c <sam_ba_monitor_run+0x388>)
    1c62:	6811      	ldr	r1, [r2, #0]
    1c64:	428b      	cmp	r3, r1
    1c66:	d329      	bcc.n	1cbc <sam_ba_monitor_run+0x228>
						__asm("nop");
    1c68:	46c0      	nop			; (mov r8, r8)
					command = 'z';
    1c6a:	227a      	movs	r2, #122	; 0x7a
    1c6c:	4b5c      	ldr	r3, [pc, #368]	; (1de0 <sam_ba_monitor_run+0x34c>)
    1c6e:	701a      	strb	r2, [r3, #0]
					current_number = 0;
    1c70:	2200      	movs	r2, #0
    1c72:	4b6a      	ldr	r3, [pc, #424]	; (1e1c <sam_ba_monitor_run+0x388>)
    1c74:	601a      	str	r2, [r3, #0]
					if (b_terminal_mode)
    1c76:	4b60      	ldr	r3, [pc, #384]	; (1df8 <sam_ba_monitor_run+0x364>)
    1c78:	781b      	ldrb	r3, [r3, #0]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d000      	beq.n	1c80 <sam_ba_monitor_run+0x1ec>
    1c7e:	e080      	b.n	1d82 <sam_ba_monitor_run+0x2ee>
				ptr++;
    1c80:	6823      	ldr	r3, [r4, #0]
    1c82:	3301      	adds	r3, #1
    1c84:	6023      	str	r3, [r4, #0]
		for (i = 0; i < length; i++)
    1c86:	4a5b      	ldr	r2, [pc, #364]	; (1df4 <sam_ba_monitor_run+0x360>)
    1c88:	6813      	ldr	r3, [r2, #0]
    1c8a:	3301      	adds	r3, #1
    1c8c:	6013      	str	r3, [r2, #0]
    1c8e:	4a58      	ldr	r2, [pc, #352]	; (1df0 <sam_ba_monitor_run+0x35c>)
    1c90:	6812      	ldr	r2, [r2, #0]
    1c92:	429a      	cmp	r2, r3
    1c94:	d800      	bhi.n	1c98 <sam_ba_monitor_run+0x204>
    1c96:	e712      	b.n	1abe <sam_ba_monitor_run+0x2a>
			if (*ptr != 0xff)
    1c98:	682b      	ldr	r3, [r5, #0]
    1c9a:	781b      	ldrb	r3, [r3, #0]
    1c9c:	2bff      	cmp	r3, #255	; 0xff
    1c9e:	d0f2      	beq.n	1c86 <sam_ba_monitor_run+0x1f2>
				if (*ptr == '#')
    1ca0:	2b23      	cmp	r3, #35	; 0x23
    1ca2:	d100      	bne.n	1ca6 <sam_ba_monitor_run+0x212>
    1ca4:	e71d      	b.n	1ae2 <sam_ba_monitor_run+0x4e>
					if (('0' <= *ptr) && (*ptr <= '9'))
    1ca6:	001a      	movs	r2, r3
    1ca8:	3a30      	subs	r2, #48	; 0x30
    1caa:	2a09      	cmp	r2, #9
    1cac:	d870      	bhi.n	1d90 <sam_ba_monitor_run+0x2fc>
						current_number = (current_number << 4) | (*ptr - '0');
    1cae:	495b      	ldr	r1, [pc, #364]	; (1e1c <sam_ba_monitor_run+0x388>)
    1cb0:	680a      	ldr	r2, [r1, #0]
    1cb2:	0112      	lsls	r2, r2, #4
    1cb4:	3b30      	subs	r3, #48	; 0x30
    1cb6:	4313      	orrs	r3, r2
    1cb8:	600b      	str	r3, [r1, #0]
    1cba:	e7e1      	b.n	1c80 <sam_ba_monitor_run+0x1ec>
							ptr_monitor_if->getdata_xmd(ptr_data, current_number-j);
    1cbc:	1ac9      	subs	r1, r1, r3
    1cbe:	4b47      	ldr	r3, [pc, #284]	; (1ddc <sam_ba_monitor_run+0x348>)
    1cc0:	6818      	ldr	r0, [r3, #0]
    1cc2:	4b49      	ldr	r3, [pc, #292]	; (1de8 <sam_ba_monitor_run+0x354>)
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	699b      	ldr	r3, [r3, #24]
    1cc8:	4798      	blx	r3
    1cca:	e7cd      	b.n	1c68 <sam_ba_monitor_run+0x1d4>
						ptr_monitor_if->putdata_xmd(ptr_data, current_number);
    1ccc:	4b53      	ldr	r3, [pc, #332]	; (1e1c <sam_ba_monitor_run+0x388>)
    1cce:	6819      	ldr	r1, [r3, #0]
    1cd0:	4b42      	ldr	r3, [pc, #264]	; (1ddc <sam_ba_monitor_run+0x348>)
    1cd2:	6818      	ldr	r0, [r3, #0]
    1cd4:	4b44      	ldr	r3, [pc, #272]	; (1de8 <sam_ba_monitor_run+0x354>)
    1cd6:	681b      	ldr	r3, [r3, #0]
    1cd8:	695b      	ldr	r3, [r3, #20]
    1cda:	4798      	blx	r3
    1cdc:	e7c5      	b.n	1c6a <sam_ba_monitor_run+0x1d6>
						*ptr_data = (char) current_number;
    1cde:	4b3f      	ldr	r3, [pc, #252]	; (1ddc <sam_ba_monitor_run+0x348>)
    1ce0:	681b      	ldr	r3, [r3, #0]
    1ce2:	4a4e      	ldr	r2, [pc, #312]	; (1e1c <sam_ba_monitor_run+0x388>)
    1ce4:	6812      	ldr	r2, [r2, #0]
    1ce6:	701a      	strb	r2, [r3, #0]
    1ce8:	e7bf      	b.n	1c6a <sam_ba_monitor_run+0x1d6>
						*((uint16_t *) ptr_data) = (uint16_t) current_number;
    1cea:	4b3c      	ldr	r3, [pc, #240]	; (1ddc <sam_ba_monitor_run+0x348>)
    1cec:	681b      	ldr	r3, [r3, #0]
    1cee:	4a4b      	ldr	r2, [pc, #300]	; (1e1c <sam_ba_monitor_run+0x388>)
    1cf0:	6812      	ldr	r2, [r2, #0]
    1cf2:	801a      	strh	r2, [r3, #0]
    1cf4:	e7b9      	b.n	1c6a <sam_ba_monitor_run+0x1d6>
						*((int *) ptr_data) = current_number;
    1cf6:	4b39      	ldr	r3, [pc, #228]	; (1ddc <sam_ba_monitor_run+0x348>)
    1cf8:	681b      	ldr	r3, [r3, #0]
    1cfa:	4a48      	ldr	r2, [pc, #288]	; (1e1c <sam_ba_monitor_run+0x388>)
    1cfc:	6812      	ldr	r2, [r2, #0]
    1cfe:	601a      	str	r2, [r3, #0]
    1d00:	e7b3      	b.n	1c6a <sam_ba_monitor_run+0x1d6>
						sam_ba_putdata_term(ptr_data, 1);
    1d02:	4b36      	ldr	r3, [pc, #216]	; (1ddc <sam_ba_monitor_run+0x348>)
    1d04:	6818      	ldr	r0, [r3, #0]
    1d06:	2101      	movs	r1, #1
    1d08:	4b47      	ldr	r3, [pc, #284]	; (1e28 <sam_ba_monitor_run+0x394>)
    1d0a:	4798      	blx	r3
    1d0c:	e7ad      	b.n	1c6a <sam_ba_monitor_run+0x1d6>
						current_number = *((uint16_t *) ptr_data);
    1d0e:	4843      	ldr	r0, [pc, #268]	; (1e1c <sam_ba_monitor_run+0x388>)
    1d10:	4b32      	ldr	r3, [pc, #200]	; (1ddc <sam_ba_monitor_run+0x348>)
    1d12:	681b      	ldr	r3, [r3, #0]
    1d14:	881b      	ldrh	r3, [r3, #0]
    1d16:	6003      	str	r3, [r0, #0]
						sam_ba_putdata_term((uint8_t*) &current_number, 2);
    1d18:	2102      	movs	r1, #2
    1d1a:	4b43      	ldr	r3, [pc, #268]	; (1e28 <sam_ba_monitor_run+0x394>)
    1d1c:	4798      	blx	r3
    1d1e:	e7a4      	b.n	1c6a <sam_ba_monitor_run+0x1d6>
						current_number = *((uint32_t *) ptr_data);
    1d20:	4b2e      	ldr	r3, [pc, #184]	; (1ddc <sam_ba_monitor_run+0x348>)
    1d22:	681b      	ldr	r3, [r3, #0]
    1d24:	681b      	ldr	r3, [r3, #0]
    1d26:	483d      	ldr	r0, [pc, #244]	; (1e1c <sam_ba_monitor_run+0x388>)
    1d28:	6003      	str	r3, [r0, #0]
						sam_ba_putdata_term((uint8_t*) &current_number, 4);
    1d2a:	2104      	movs	r1, #4
    1d2c:	4b3e      	ldr	r3, [pc, #248]	; (1e28 <sam_ba_monitor_run+0x394>)
    1d2e:	4798      	blx	r3
    1d30:	e79b      	b.n	1c6a <sam_ba_monitor_run+0x1d6>
						call_applet(current_number);
    1d32:	4b3a      	ldr	r3, [pc, #232]	; (1e1c <sam_ba_monitor_run+0x388>)
    1d34:	6818      	ldr	r0, [r3, #0]
    1d36:	4b3d      	ldr	r3, [pc, #244]	; (1e2c <sam_ba_monitor_run+0x398>)
    1d38:	4798      	blx	r3
						__set_MSP(sp);
    1d3a:	4b3d      	ldr	r3, [pc, #244]	; (1e30 <sam_ba_monitor_run+0x39c>)
    1d3c:	681b      	ldr	r3, [r3, #0]
    1d3e:	f383 8808 	msr	MSP, r3
						cpu_irq_enable();
    1d42:	2201      	movs	r2, #1
    1d44:	4b3b      	ldr	r3, [pc, #236]	; (1e34 <sam_ba_monitor_run+0x3a0>)
    1d46:	701a      	strb	r2, [r3, #0]
    1d48:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1d4c:	b662      	cpsie	i
    1d4e:	e78c      	b.n	1c6a <sam_ba_monitor_run+0x1d6>
						b_terminal_mode = 1;
    1d50:	2201      	movs	r2, #1
    1d52:	4b29      	ldr	r3, [pc, #164]	; (1df8 <sam_ba_monitor_run+0x364>)
    1d54:	701a      	strb	r2, [r3, #0]
						ptr_monitor_if->putdata("\n\r", 2);
    1d56:	4b24      	ldr	r3, [pc, #144]	; (1de8 <sam_ba_monitor_run+0x354>)
    1d58:	681b      	ldr	r3, [r3, #0]
    1d5a:	68db      	ldr	r3, [r3, #12]
    1d5c:	2102      	movs	r1, #2
    1d5e:	482e      	ldr	r0, [pc, #184]	; (1e18 <sam_ba_monitor_run+0x384>)
    1d60:	4798      	blx	r3
    1d62:	e782      	b.n	1c6a <sam_ba_monitor_run+0x1d6>
						if (b_terminal_mode == 0)
    1d64:	4b24      	ldr	r3, [pc, #144]	; (1df8 <sam_ba_monitor_run+0x364>)
    1d66:	781b      	ldrb	r3, [r3, #0]
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d003      	beq.n	1d74 <sam_ba_monitor_run+0x2e0>
						b_terminal_mode = 0;
    1d6c:	2200      	movs	r2, #0
    1d6e:	4b22      	ldr	r3, [pc, #136]	; (1df8 <sam_ba_monitor_run+0x364>)
    1d70:	701a      	strb	r2, [r3, #0]
    1d72:	e77a      	b.n	1c6a <sam_ba_monitor_run+0x1d6>
							ptr_monitor_if->putdata("\n\r", 2);
    1d74:	4b1c      	ldr	r3, [pc, #112]	; (1de8 <sam_ba_monitor_run+0x354>)
    1d76:	681b      	ldr	r3, [r3, #0]
    1d78:	68db      	ldr	r3, [r3, #12]
    1d7a:	2102      	movs	r1, #2
    1d7c:	4826      	ldr	r0, [pc, #152]	; (1e18 <sam_ba_monitor_run+0x384>)
    1d7e:	4798      	blx	r3
    1d80:	e7f4      	b.n	1d6c <sam_ba_monitor_run+0x2d8>
						ptr_monitor_if->putdata(">", 1);
    1d82:	4b19      	ldr	r3, [pc, #100]	; (1de8 <sam_ba_monitor_run+0x354>)
    1d84:	681b      	ldr	r3, [r3, #0]
    1d86:	68db      	ldr	r3, [r3, #12]
    1d88:	2101      	movs	r1, #1
    1d8a:	482b      	ldr	r0, [pc, #172]	; (1e38 <sam_ba_monitor_run+0x3a4>)
    1d8c:	4798      	blx	r3
    1d8e:	e777      	b.n	1c80 <sam_ba_monitor_run+0x1ec>
					else if (('A' <= *ptr) && (*ptr <= 'F'))
    1d90:	001a      	movs	r2, r3
    1d92:	3a41      	subs	r2, #65	; 0x41
    1d94:	2a05      	cmp	r2, #5
    1d96:	d806      	bhi.n	1da6 <sam_ba_monitor_run+0x312>
						current_number = (current_number << 4)
    1d98:	4920      	ldr	r1, [pc, #128]	; (1e1c <sam_ba_monitor_run+0x388>)
    1d9a:	680a      	ldr	r2, [r1, #0]
    1d9c:	0112      	lsls	r2, r2, #4
								| (*ptr - 'A' + 0xa);
    1d9e:	3b37      	subs	r3, #55	; 0x37
    1da0:	4313      	orrs	r3, r2
						current_number = (current_number << 4)
    1da2:	600b      	str	r3, [r1, #0]
    1da4:	e76c      	b.n	1c80 <sam_ba_monitor_run+0x1ec>
					else if (('a' <= *ptr) && (*ptr <= 'f'))
    1da6:	001a      	movs	r2, r3
    1da8:	3a61      	subs	r2, #97	; 0x61
    1daa:	2a05      	cmp	r2, #5
    1dac:	d806      	bhi.n	1dbc <sam_ba_monitor_run+0x328>
						current_number = (current_number << 4)
    1dae:	491b      	ldr	r1, [pc, #108]	; (1e1c <sam_ba_monitor_run+0x388>)
    1db0:	680a      	ldr	r2, [r1, #0]
    1db2:	0112      	lsls	r2, r2, #4
								| (*ptr - 'a' + 0xa);
    1db4:	3b57      	subs	r3, #87	; 0x57
    1db6:	4313      	orrs	r3, r2
						current_number = (current_number << 4)
    1db8:	600b      	str	r3, [r1, #0]
    1dba:	e761      	b.n	1c80 <sam_ba_monitor_run+0x1ec>
					else if (*ptr == ',')
    1dbc:	2b2c      	cmp	r3, #44	; 0x2c
    1dbe:	d005      	beq.n	1dcc <sam_ba_monitor_run+0x338>
						command = *ptr;
    1dc0:	4642      	mov	r2, r8
    1dc2:	7013      	strb	r3, [r2, #0]
						current_number = 0;
    1dc4:	2200      	movs	r2, #0
    1dc6:	4b15      	ldr	r3, [pc, #84]	; (1e1c <sam_ba_monitor_run+0x388>)
    1dc8:	601a      	str	r2, [r3, #0]
    1dca:	e759      	b.n	1c80 <sam_ba_monitor_run+0x1ec>
						ptr_data = (uint8_t *) current_number;
    1dcc:	4b13      	ldr	r3, [pc, #76]	; (1e1c <sam_ba_monitor_run+0x388>)
    1dce:	4a03      	ldr	r2, [pc, #12]	; (1ddc <sam_ba_monitor_run+0x348>)
    1dd0:	6819      	ldr	r1, [r3, #0]
    1dd2:	6011      	str	r1, [r2, #0]
						current_number = 0;
    1dd4:	2200      	movs	r2, #0
    1dd6:	601a      	str	r2, [r3, #0]
    1dd8:	e752      	b.n	1c80 <sam_ba_monitor_run+0x1ec>
    1dda:	46c0      	nop			; (mov r8, r8)
    1ddc:	20000144 	.word	0x20000144
    1de0:	200000fc 	.word	0x200000fc
    1de4:	20000104 	.word	0x20000104
    1de8:	20000148 	.word	0x20000148
    1dec:	200000f8 	.word	0x200000f8
    1df0:	200000f4 	.word	0x200000f4
    1df4:	20000100 	.word	0x20000100
    1df8:	20000050 	.word	0x20000050
    1dfc:	00002814 	.word	0x00002814
    1e00:	00002808 	.word	0x00002808
    1e04:	00002818 	.word	0x00002818
    1e08:	0000281d 	.word	0x0000281d
    1e0c:	0000281c 	.word	0x0000281c
    1e10:	00002829 	.word	0x00002829
    1e14:	00002828 	.word	0x00002828
    1e18:	00002810 	.word	0x00002810
    1e1c:	20000150 	.word	0x20000150
    1e20:	20000154 	.word	0x20000154
    1e24:	200000f0 	.word	0x200000f0
    1e28:	000019d9 	.word	0x000019d9
    1e2c:	00001a65 	.word	0x00001a65
    1e30:	2000014c 	.word	0x2000014c
    1e34:	20000000 	.word	0x20000000
    1e38:	00002834 	.word	0x00002834

00001e3c <usart_open>:

/**
 * \brief Open the given USART
 */
void usart_open()
{
    1e3c:	b530      	push	{r4, r5, lr}
    1e3e:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1e40:	2380      	movs	r3, #128	; 0x80
    1e42:	05db      	lsls	r3, r3, #23
    1e44:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1e46:	2300      	movs	r3, #0
    1e48:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1e4a:	22ff      	movs	r2, #255	; 0xff
    1e4c:	4669      	mov	r1, sp
    1e4e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1e50:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1e52:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1e54:	2201      	movs	r2, #1
    1e56:	212c      	movs	r1, #44	; 0x2c
    1e58:	4668      	mov	r0, sp
    1e5a:	5442      	strb	r2, [r0, r1]
	config->transmitter_enable = true;
    1e5c:	3101      	adds	r1, #1
    1e5e:	5442      	strb	r2, [r0, r1]
	config->clock_polarity_inverted = false;
    1e60:	322d      	adds	r2, #45	; 0x2d
    1e62:	5483      	strb	r3, [r0, r2]
	config->use_external_clock = false;
    1e64:	3201      	adds	r2, #1
    1e66:	5483      	strb	r3, [r0, r2]
	config->ext_clock_freq   = 0;
    1e68:	930c      	str	r3, [sp, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1e6a:	3205      	adds	r2, #5
    1e6c:	5483      	strb	r3, [r0, r2]
	config->generator_source = GCLK_GENERATOR_0;
    1e6e:	3201      	adds	r2, #1
    1e70:	5483      	strb	r3, [r0, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1e72:	930e      	str	r3, [sp, #56]	; 0x38
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1e74:	930f      	str	r3, [sp, #60]	; 0x3c
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1e76:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1e78:	2200      	movs	r2, #0
    1e7a:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1e7c:	76c2      	strb	r2, [r0, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    1e7e:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    1e80:	8403      	strh	r3, [r0, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    1e82:	8443      	strh	r3, [r0, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1e84:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1e86:	2324      	movs	r3, #36	; 0x24
    1e88:	54c2      	strb	r2, [r0, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1e8a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    1e8c:	2313      	movs	r3, #19
    1e8e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1e90:	3313      	adds	r3, #19
    1e92:	54c2      	strb	r2, [r0, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    1e94:	3b01      	subs	r3, #1
    1e96:	54c2      	strb	r2, [r0, r3]
	struct usart_config config;

	usart_get_config_defaults(&config);

	config.baudrate     = BOOT_USART_BAUDRATE;
    1e98:	23e1      	movs	r3, #225	; 0xe1
    1e9a:	025b      	lsls	r3, r3, #9
    1e9c:	930a      	str	r3, [sp, #40]	; 0x28
	config.mux_setting  = BOOT_USART_MUX_SETTINGS;
    1e9e:	23c4      	movs	r3, #196	; 0xc4
    1ea0:	039b      	lsls	r3, r3, #14
    1ea2:	9303      	str	r3, [sp, #12]
#endif
#ifdef BOOT_USART_PAD1
	config.pinmux_pad1  = BOOT_USART_PAD1;
#endif
#ifdef BOOT_USART_PAD2
	config.pinmux_pad2  = BOOT_USART_PAD2;
    1ea4:	4b25      	ldr	r3, [pc, #148]	; (1f3c <usart_open+0x100>)
    1ea6:	9310      	str	r3, [sp, #64]	; 0x40
#endif
#ifdef BOOT_USART_PAD3
	config.pinmux_pad3  = BOOT_USART_PAD3;
    1ea8:	4b25      	ldr	r3, [pc, #148]	; (1f40 <usart_open+0x104>)
    1eaa:	9311      	str	r3, [sp, #68]	; 0x44
#endif
	config.generator_source = BOOT_USART_GCLK_SOURCE;

	while (usart_init(&usart_sam_ba, BOOT_USART_MODULE, &config)
    1eac:	4d25      	ldr	r5, [pc, #148]	; (1f44 <usart_open+0x108>)
    1eae:	4c26      	ldr	r4, [pc, #152]	; (1f48 <usart_open+0x10c>)
    1eb0:	466a      	mov	r2, sp
    1eb2:	4926      	ldr	r1, [pc, #152]	; (1f4c <usart_open+0x110>)
    1eb4:	0028      	movs	r0, r5
    1eb6:	47a0      	blx	r4
    1eb8:	2800      	cmp	r0, #0
    1eba:	d1f9      	bne.n	1eb0 <usart_open+0x74>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ebc:	4d21      	ldr	r5, [pc, #132]	; (1f44 <usart_open+0x108>)
    1ebe:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1ec0:	0020      	movs	r0, r4
    1ec2:	4b23      	ldr	r3, [pc, #140]	; (1f50 <usart_open+0x114>)
    1ec4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1ec6:	231f      	movs	r3, #31
    1ec8:	4018      	ands	r0, r3
    1eca:	3b1e      	subs	r3, #30
    1ecc:	4083      	lsls	r3, r0
    1ece:	4a21      	ldr	r2, [pc, #132]	; (1f54 <usart_open+0x118>)
    1ed0:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ed2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1ed4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	d1fc      	bne.n	1ed4 <usart_open+0x98>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1eda:	6823      	ldr	r3, [r4, #0]
    1edc:	2202      	movs	r2, #2
    1ede:	4313      	orrs	r3, r2
    1ee0:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ee2:	4b18      	ldr	r3, [pc, #96]	; (1f44 <usart_open+0x108>)
    1ee4:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1ee6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1ee8:	2a00      	cmp	r2, #0
    1eea:	d1fc      	bne.n	1ee6 <usart_open+0xaa>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    1eec:	6859      	ldr	r1, [r3, #4]
    1eee:	2280      	movs	r2, #128	; 0x80
    1ef0:	0252      	lsls	r2, r2, #9
    1ef2:	430a      	orrs	r2, r1
    1ef4:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    1ef6:	2101      	movs	r1, #1
    1ef8:	4a12      	ldr	r2, [pc, #72]	; (1f44 <usart_open+0x108>)
    1efa:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    1efc:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1efe:	2a00      	cmp	r2, #0
    1f00:	d1fc      	bne.n	1efc <usart_open+0xc0>
	return (usart_hw->SYNCBUSY.reg);
    1f02:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1f04:	2a00      	cmp	r2, #0
    1f06:	d1fc      	bne.n	1f02 <usart_open+0xc6>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    1f08:	6859      	ldr	r1, [r3, #4]
    1f0a:	2280      	movs	r2, #128	; 0x80
    1f0c:	0292      	lsls	r2, r2, #10
    1f0e:	430a      	orrs	r2, r1
    1f10:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    1f12:	2101      	movs	r1, #1
    1f14:	4a0b      	ldr	r2, [pc, #44]	; (1f44 <usart_open+0x108>)
    1f16:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    1f18:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1f1a:	2a00      	cmp	r2, #0
    1f1c:	d1fc      	bne.n	1f18 <usart_open+0xdc>

	usart_enable(&usart_sam_ba);
	usart_enable_transceiver(&usart_sam_ba, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&usart_sam_ba, USART_TRANSCEIVER_RX);
	//Initialize flag
	b_sharp_received = false;
    1f1e:	2300      	movs	r3, #0
    1f20:	4a0d      	ldr	r2, [pc, #52]	; (1f58 <usart_open+0x11c>)
    1f22:	7013      	strb	r3, [r2, #0]
	idx_rx_read = 0;
    1f24:	4a0d      	ldr	r2, [pc, #52]	; (1f5c <usart_open+0x120>)
    1f26:	7013      	strb	r3, [r2, #0]
	idx_rx_write = 0;
    1f28:	4a0d      	ldr	r2, [pc, #52]	; (1f60 <usart_open+0x124>)
    1f2a:	7013      	strb	r3, [r2, #0]
	idx_tx_read = 0;
    1f2c:	4a0d      	ldr	r2, [pc, #52]	; (1f64 <usart_open+0x128>)
    1f2e:	7013      	strb	r3, [r2, #0]
	idx_tx_write = 0;
    1f30:	4a0d      	ldr	r2, [pc, #52]	; (1f68 <usart_open+0x12c>)
    1f32:	7013      	strb	r3, [r2, #0]

	error_timeout = 0;
    1f34:	4a0d      	ldr	r2, [pc, #52]	; (1f6c <usart_open+0x130>)
    1f36:	7013      	strb	r3, [r2, #0]
}
    1f38:	b013      	add	sp, #76	; 0x4c
    1f3a:	bd30      	pop	{r4, r5, pc}
    1f3c:	002a0003 	.word	0x002a0003
    1f40:	002b0003 	.word	0x002b0003
    1f44:	20000160 	.word	0x20000160
    1f48:	00000c71 	.word	0x00000c71
    1f4c:	42001400 	.word	0x42001400
    1f50:	00000be1 	.word	0x00000be1
    1f54:	e000e100 	.word	0xe000e100
    1f58:	20000158 	.word	0x20000158
    1f5c:	20000216 	.word	0x20000216
    1f60:	20000159 	.word	0x20000159
    1f64:	2000015c 	.word	0x2000015c
    1f68:	20000217 	.word	0x20000217
    1f6c:	20000214 	.word	0x20000214

00001f70 <usart_putc>:
 * \param value Value to put
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
int usart_putc(int value)
{
    1f70:	b510      	push	{r4, lr}
	usart_write_wait(&usart_sam_ba, (uint16_t)value);
    1f72:	b281      	uxth	r1, r0
    1f74:	4802      	ldr	r0, [pc, #8]	; (1f80 <usart_putc+0x10>)
    1f76:	4b03      	ldr	r3, [pc, #12]	; (1f84 <usart_putc+0x14>)
    1f78:	4798      	blx	r3
	return 1;
}
    1f7a:	2001      	movs	r0, #1
    1f7c:	bd10      	pop	{r4, pc}
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	20000160 	.word	0x20000160
    1f84:	00001021 	.word	0x00001021

00001f88 <usart_is_rx_ready>:
	}
	return (false);
}

bool usart_is_rx_ready(void) {
	return (BOOT_USART_MODULE->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC);
    1f88:	4b02      	ldr	r3, [pc, #8]	; (1f94 <usart_is_rx_ready+0xc>)
    1f8a:	7e18      	ldrb	r0, [r3, #24]
    1f8c:	0740      	lsls	r0, r0, #29
    1f8e:	0fc0      	lsrs	r0, r0, #31
}
    1f90:	4770      	bx	lr
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	42001400 	.word	0x42001400

00001f98 <usart_getc>:
int usart_getc(void) {
    1f98:	b510      	push	{r4, lr}
    1f9a:	b082      	sub	sp, #8
	while(!(usart_is_rx_ready()));
    1f9c:	4c06      	ldr	r4, [pc, #24]	; (1fb8 <usart_getc+0x20>)
    1f9e:	47a0      	blx	r4
    1fa0:	2800      	cmp	r0, #0
    1fa2:	d0fc      	beq.n	1f9e <usart_getc+0x6>
	usart_read_wait(&usart_sam_ba, &retval);
    1fa4:	466b      	mov	r3, sp
    1fa6:	1d9c      	adds	r4, r3, #6
    1fa8:	0021      	movs	r1, r4
    1faa:	4804      	ldr	r0, [pc, #16]	; (1fbc <usart_getc+0x24>)
    1fac:	4b04      	ldr	r3, [pc, #16]	; (1fc0 <usart_getc+0x28>)
    1fae:	4798      	blx	r3
	return (int)retval;
    1fb0:	8820      	ldrh	r0, [r4, #0]
}
    1fb2:	b002      	add	sp, #8
    1fb4:	bd10      	pop	{r4, pc}
    1fb6:	46c0      	nop			; (mov r8, r8)
    1fb8:	00001f89 	.word	0x00001f89
    1fbc:	20000160 	.word	0x20000160
    1fc0:	0000104d 	.word	0x0000104d

00001fc4 <usart_sharp_received>:
int usart_sharp_received(void) {
    1fc4:	b510      	push	{r4, lr}
	if (usart_is_rx_ready()) {
    1fc6:	4b06      	ldr	r3, [pc, #24]	; (1fe0 <usart_sharp_received+0x1c>)
    1fc8:	4798      	blx	r3
	return (false);
    1fca:	2300      	movs	r3, #0
	if (usart_is_rx_ready()) {
    1fcc:	2800      	cmp	r0, #0
    1fce:	d101      	bne.n	1fd4 <usart_sharp_received+0x10>
}
    1fd0:	0018      	movs	r0, r3
    1fd2:	bd10      	pop	{r4, pc}
		if (usart_getc() == SHARP_CHARACTER)
    1fd4:	4b03      	ldr	r3, [pc, #12]	; (1fe4 <usart_sharp_received+0x20>)
    1fd6:	4798      	blx	r3
    1fd8:	3823      	subs	r0, #35	; 0x23
			return (true);
    1fda:	4243      	negs	r3, r0
    1fdc:	4143      	adcs	r3, r0
    1fde:	e7f7      	b.n	1fd0 <usart_sharp_received+0xc>
    1fe0:	00001f89 	.word	0x00001f89
    1fe4:	00001f99 	.word	0x00001f99

00001fe8 <usart_putdata>:
}

/**
 * \brief Send given data (polling)
 */
uint32_t usart_putdata(void const* data, uint32_t length) {
    1fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fea:	1e0f      	subs	r7, r1, #0
	uint32_t i;
	uint8_t* ptrdata;
	ptrdata = (uint8_t*) data;
	for (i = 0; i < length; i++) {
    1fec:	d007      	beq.n	1ffe <usart_putdata+0x16>
    1fee:	1846      	adds	r6, r0, r1
    1ff0:	0004      	movs	r4, r0
		usart_putc(*ptrdata);
    1ff2:	4d04      	ldr	r5, [pc, #16]	; (2004 <usart_putdata+0x1c>)
    1ff4:	7820      	ldrb	r0, [r4, #0]
    1ff6:	47a8      	blx	r5
		ptrdata++;
    1ff8:	3401      	adds	r4, #1
	for (i = 0; i < length; i++) {
    1ffa:	42a6      	cmp	r6, r4
    1ffc:	d1fa      	bne.n	1ff4 <usart_putdata+0xc>
	}
	return (i);
}
    1ffe:	0038      	movs	r0, r7
    2000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2002:	46c0      	nop			; (mov r8, r8)
    2004:	00001f71 	.word	0x00001f71

00002008 <usart_getdata>:

/**
 * \brief Get data from com device
 */
uint32_t usart_getdata(void* data, uint32_t length) {
    2008:	b510      	push	{r4, lr}
    200a:	0004      	movs	r4, r0
	uint8_t* ptrdata;
	ptrdata = (uint8_t*) data;
	*ptrdata = usart_getc();
    200c:	4b02      	ldr	r3, [pc, #8]	; (2018 <usart_getdata+0x10>)
    200e:	4798      	blx	r3
    2010:	7020      	strb	r0, [r4, #0]
	return (1);
}
    2012:	2001      	movs	r0, #1
    2014:	bd10      	pop	{r4, pc}
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	00001f99 	.word	0x00001f99

0000201c <add_crc>:
 */
unsigned short add_crc(char ptr, unsigned short crc) {

	unsigned short cmpt;

	crc = crc ^ (int) ptr << 8;
    201c:	0200      	lsls	r0, r0, #8
    201e:	4048      	eors	r0, r1
    2020:	2308      	movs	r3, #8

	for (cmpt = 0; cmpt < 8; cmpt++) {
		if (crc & 0x8000)
			crc = crc << 1 ^ CRC16POLY;
    2022:	4908      	ldr	r1, [pc, #32]	; (2044 <add_crc+0x28>)
    2024:	e006      	b.n	2034 <add_crc+0x18>
    2026:	0040      	lsls	r0, r0, #1
    2028:	4048      	eors	r0, r1
    202a:	b280      	uxth	r0, r0
    202c:	3b01      	subs	r3, #1
    202e:	b29b      	uxth	r3, r3
	for (cmpt = 0; cmpt < 8; cmpt++) {
    2030:	2b00      	cmp	r3, #0
    2032:	d005      	beq.n	2040 <add_crc+0x24>
		if (crc & 0x8000)
    2034:	b202      	sxth	r2, r0
    2036:	2a00      	cmp	r2, #0
    2038:	dbf5      	blt.n	2026 <add_crc+0xa>
		else
			crc = crc << 1;
    203a:	0040      	lsls	r0, r0, #1
    203c:	b280      	uxth	r0, r0
    203e:	e7f5      	b.n	202c <add_crc+0x10>
	}

	return (crc & 0xFFFF);
}
    2040:	4770      	bx	lr
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	00001021 	.word	0x00001021

00002048 <getbytes>:

static uint16_t getbytes(uint8_t *ptr_data, uint16_t length) {
    2048:	b5f0      	push	{r4, r5, r6, r7, lr}
    204a:	46de      	mov	lr, fp
    204c:	4657      	mov	r7, sl
    204e:	464e      	mov	r6, r9
    2050:	b5c0      	push	{r6, r7, lr}
    2052:	b082      	sub	sp, #8
    2054:	0007      	movs	r7, r0
    2056:	1e0e      	subs	r6, r1, #0
	uint16_t crc = 0;
	uint16_t cpt;
	uint8_t c;

	for (cpt = 0; cpt < length; ++cpt) {
    2058:	d02a      	beq.n	20b0 <getbytes+0x68>
    205a:	2400      	movs	r4, #0
    205c:	2300      	movs	r3, #0
    205e:	9301      	str	r3, [sp, #4]
		c = usart_getc();
    2060:	4b19      	ldr	r3, [pc, #100]	; (20c8 <getbytes+0x80>)
    2062:	469a      	mov	sl, r3
		if (error_timeout)
    2064:	4b19      	ldr	r3, [pc, #100]	; (20cc <getbytes+0x84>)
    2066:	4699      	mov	r9, r3
			return 1;
		crc = add_crc(c, crc);
    2068:	4b19      	ldr	r3, [pc, #100]	; (20d0 <getbytes+0x88>)
    206a:	469b      	mov	fp, r3
    206c:	e008      	b.n	2080 <getbytes+0x38>
		//crc = (crc << 8) ^ xcrc16tab[(crc>>8) ^ c];
		if (size_of_data || mode_of_transfer) {
			*ptr_data++ = c;
    206e:	1c7b      	adds	r3, r7, #1
    2070:	703d      	strb	r5, [r7, #0]
    2072:	001f      	movs	r7, r3
			if (length == PKTLEN_128)
    2074:	2e80      	cmp	r6, #128	; 0x80
    2076:	d016      	beq.n	20a6 <getbytes+0x5e>
	for (cpt = 0; cpt < length; ++cpt) {
    2078:	3401      	adds	r4, #1
    207a:	b2a4      	uxth	r4, r4
    207c:	42a6      	cmp	r6, r4
    207e:	d01b      	beq.n	20b8 <getbytes+0x70>
		c = usart_getc();
    2080:	47d0      	blx	sl
    2082:	b2c5      	uxtb	r5, r0
		if (error_timeout)
    2084:	464b      	mov	r3, r9
    2086:	781b      	ldrb	r3, [r3, #0]
    2088:	2b00      	cmp	r3, #0
    208a:	d113      	bne.n	20b4 <getbytes+0x6c>
		crc = add_crc(c, crc);
    208c:	9901      	ldr	r1, [sp, #4]
    208e:	0028      	movs	r0, r5
    2090:	47d8      	blx	fp
    2092:	9001      	str	r0, [sp, #4]
		if (size_of_data || mode_of_transfer) {
    2094:	4b0f      	ldr	r3, [pc, #60]	; (20d4 <getbytes+0x8c>)
    2096:	881b      	ldrh	r3, [r3, #0]
    2098:	2b00      	cmp	r3, #0
    209a:	d1e8      	bne.n	206e <getbytes+0x26>
    209c:	4b0e      	ldr	r3, [pc, #56]	; (20d8 <getbytes+0x90>)
    209e:	781b      	ldrb	r3, [r3, #0]
    20a0:	2b00      	cmp	r3, #0
    20a2:	d0e9      	beq.n	2078 <getbytes+0x30>
    20a4:	e7e3      	b.n	206e <getbytes+0x26>
				size_of_data--;
    20a6:	490b      	ldr	r1, [pc, #44]	; (20d4 <getbytes+0x8c>)
    20a8:	880a      	ldrh	r2, [r1, #0]
    20aa:	3a01      	subs	r2, #1
    20ac:	800a      	strh	r2, [r1, #0]
    20ae:	e7e3      	b.n	2078 <getbytes+0x30>
	uint16_t crc = 0;
    20b0:	9101      	str	r1, [sp, #4]
    20b2:	e001      	b.n	20b8 <getbytes+0x70>
			return 1;
    20b4:	2301      	movs	r3, #1
    20b6:	9301      	str	r3, [sp, #4]
		}
	}

	return crc;
}
    20b8:	9801      	ldr	r0, [sp, #4]
    20ba:	b002      	add	sp, #8
    20bc:	bc1c      	pop	{r2, r3, r4}
    20be:	4691      	mov	r9, r2
    20c0:	469a      	mov	sl, r3
    20c2:	46a3      	mov	fp, r4
    20c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20c6:	46c0      	nop			; (mov r8, r8)
    20c8:	00001f99 	.word	0x00001f99
    20cc:	20000214 	.word	0x20000214
    20d0:	0000201d 	.word	0x0000201d
    20d4:	2000015a 	.word	0x2000015a
    20d8:	20000215 	.word	0x20000215

000020dc <getPacket>:
}

/**
 * \brief Used by Xdown to retrieve packets.
 */
uint8_t getPacket(uint8_t *ptr_data, uint8_t sno) {
    20dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20de:	b085      	sub	sp, #20
    20e0:	0005      	movs	r5, r0
    20e2:	9101      	str	r1, [sp, #4]
	uint8_t seq[2];
	uint16_t crc, xcrc;

	getbytes(seq, 2);
    20e4:	2102      	movs	r1, #2
    20e6:	a803      	add	r0, sp, #12
    20e8:	4c17      	ldr	r4, [pc, #92]	; (2148 <getPacket+0x6c>)
    20ea:	47a0      	blx	r4
	xcrc = getbytes(ptr_data, PKTLEN_128);
    20ec:	2180      	movs	r1, #128	; 0x80
    20ee:	0028      	movs	r0, r5
    20f0:	47a0      	blx	r4
    20f2:	0005      	movs	r5, r0
	if (error_timeout)
    20f4:	4b15      	ldr	r3, [pc, #84]	; (214c <getPacket+0x70>)
    20f6:	781f      	ldrb	r7, [r3, #0]
    20f8:	2f00      	cmp	r7, #0
    20fa:	d003      	beq.n	2104 <getPacket+0x28>
		return (false);
    20fc:	2700      	movs	r7, #0
		return (false);
	}

	usart_putc(ACK);
	return (true);
}
    20fe:	0038      	movs	r0, r7
    2100:	b005      	add	sp, #20
    2102:	bdf0      	pop	{r4, r5, r6, r7, pc}
	crc = (uint16_t) usart_getc() << 8;
    2104:	4e12      	ldr	r6, [pc, #72]	; (2150 <getPacket+0x74>)
    2106:	47b0      	blx	r6
    2108:	0200      	lsls	r0, r0, #8
    210a:	b284      	uxth	r4, r0
	crc += (uint16_t) usart_getc();
    210c:	47b0      	blx	r6
    210e:	1824      	adds	r4, r4, r0
    2110:	b2a4      	uxth	r4, r4
	if (error_timeout == 1)
    2112:	4b0e      	ldr	r3, [pc, #56]	; (214c <getPacket+0x70>)
    2114:	781b      	ldrb	r3, [r3, #0]
    2116:	2b01      	cmp	r3, #1
    2118:	d0f1      	beq.n	20fe <getPacket+0x22>
	if ((crc != xcrc) || (seq[0] != sno) || (seq[1] != (uint8_t) (~sno))) {
    211a:	42a5      	cmp	r5, r4
    211c:	d104      	bne.n	2128 <getPacket+0x4c>
    211e:	ab03      	add	r3, sp, #12
    2120:	781b      	ldrb	r3, [r3, #0]
    2122:	9a01      	ldr	r2, [sp, #4]
    2124:	4293      	cmp	r3, r2
    2126:	d003      	beq.n	2130 <getPacket+0x54>
		usart_putc(CAN);
    2128:	2018      	movs	r0, #24
    212a:	4b0a      	ldr	r3, [pc, #40]	; (2154 <getPacket+0x78>)
    212c:	4798      	blx	r3
		return (false);
    212e:	e7e6      	b.n	20fe <getPacket+0x22>
	if ((crc != xcrc) || (seq[0] != sno) || (seq[1] != (uint8_t) (~sno))) {
    2130:	43db      	mvns	r3, r3
    2132:	aa03      	add	r2, sp, #12
    2134:	7852      	ldrb	r2, [r2, #1]
    2136:	b2db      	uxtb	r3, r3
    2138:	429a      	cmp	r2, r3
    213a:	d1f5      	bne.n	2128 <getPacket+0x4c>
	usart_putc(ACK);
    213c:	2006      	movs	r0, #6
    213e:	4b05      	ldr	r3, [pc, #20]	; (2154 <getPacket+0x78>)
    2140:	4798      	blx	r3
	return (true);
    2142:	2701      	movs	r7, #1
    2144:	e7db      	b.n	20fe <getPacket+0x22>
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	00002049 	.word	0x00002049
    214c:	20000214 	.word	0x20000214
    2150:	00001f99 	.word	0x00001f99
    2154:	00001f71 	.word	0x00001f71

00002158 <usart_putdata_xmd>:

/**
 * \brief Called when a transfer from target to host is being made(considered an upload).
 */
uint32_t usart_putdata_xmd(void const* data, uint32_t length) {
    2158:	b5f0      	push	{r4, r5, r6, r7, lr}
    215a:	46de      	mov	lr, fp
    215c:	4657      	mov	r7, sl
    215e:	464e      	mov	r6, r9
    2160:	4645      	mov	r5, r8
    2162:	b5e0      	push	{r5, r6, r7, lr}
    2164:	b085      	sub	sp, #20
    2166:	0005      	movs	r5, r0
    2168:	4689      	mov	r9, r1
	uint8_t c, sno = 1;
	uint8_t done;
	uint8_t * ptr_data = (uint8_t *) data;
	error_timeout = 0;
    216a:	2200      	movs	r2, #0
    216c:	4b4a      	ldr	r3, [pc, #296]	; (2298 <usart_putdata_xmd+0x140>)
    216e:	701a      	strb	r2, [r3, #0]
	if (!length)
    2170:	2900      	cmp	r1, #0
    2172:	d128      	bne.n	21c6 <usart_putdata_xmd+0x6e>
		mode_of_transfer = 1;
    2174:	3201      	adds	r2, #1
    2176:	4b49      	ldr	r3, [pc, #292]	; (229c <usart_putdata_xmd+0x144>)
    2178:	701a      	strb	r2, [r3, #0]

	/* Startup synchronization... */
	/* Wait to receive a NAK or 'C' from receiver. */
	done = 0;
	while (!done) {
		c = (uint8_t) usart_getc();
    217a:	4f49      	ldr	r7, [pc, #292]	; (22a0 <usart_putdata_xmd+0x148>)
		if (error_timeout) { // Test for timeout in usart_getc
    217c:	4e46      	ldr	r6, [pc, #280]	; (2298 <usart_putdata_xmd+0x140>)
			error_timeout = 0;
    217e:	0034      	movs	r4, r6
		c = (uint8_t) usart_getc();
    2180:	47b8      	blx	r7
		if (error_timeout) { // Test for timeout in usart_getc
    2182:	7833      	ldrb	r3, [r6, #0]
    2184:	2b00      	cmp	r3, #0
    2186:	d12c      	bne.n	21e2 <usart_putdata_xmd+0x8a>
		c = (uint8_t) usart_getc();
    2188:	b2c0      	uxtb	r0, r0
			if (error_timeout) {
				error_timeout = 0;
				return (0);
			}
		}
		switch (c) {
    218a:	2843      	cmp	r0, #67	; 0x43
    218c:	d003      	beq.n	2196 <usart_putdata_xmd+0x3e>
    218e:	2871      	cmp	r0, #113	; 0x71
    2190:	d079      	beq.n	2286 <usart_putdata_xmd+0x12e>
    2192:	2815      	cmp	r0, #21
    2194:	d1f4      	bne.n	2180 <usart_putdata_xmd+0x28>
    2196:	9503      	str	r5, [sp, #12]
    2198:	2301      	movs	r3, #1
    219a:	9302      	str	r3, [sp, #8]
	usart_putc(SOH);
    219c:	4b41      	ldr	r3, [pc, #260]	; (22a4 <usart_putdata_xmd+0x14c>)
    219e:	469b      	mov	fp, r3
		if (size_of_data || mode_of_transfer) {
    21a0:	4b41      	ldr	r3, [pc, #260]	; (22a8 <usart_putdata_xmd+0x150>)
    21a2:	4698      	mov	r8, r3
			size_of_data--;
    21a4:	001c      	movs	r4, r3
		if (size_of_data || mode_of_transfer) {
    21a6:	4b3d      	ldr	r3, [pc, #244]	; (229c <usart_putdata_xmd+0x144>)
    21a8:	469a      	mov	sl, r3
	usart_putc(SOH);
    21aa:	2001      	movs	r0, #1
    21ac:	47d8      	blx	fp
	usart_putc(sno);
    21ae:	9d02      	ldr	r5, [sp, #8]
    21b0:	0028      	movs	r0, r5
    21b2:	47d8      	blx	fp
	usart_putc((uint8_t) ~(sno));
    21b4:	43e8      	mvns	r0, r5
    21b6:	b2c0      	uxtb	r0, r0
    21b8:	47d8      	blx	fp
    21ba:	9d03      	ldr	r5, [sp, #12]
    21bc:	2780      	movs	r7, #128	; 0x80
	chksm = 0;
    21be:	2300      	movs	r3, #0
    21c0:	9301      	str	r3, [sp, #4]
    21c2:	002e      	movs	r6, r5
    21c4:	e02e      	b.n	2224 <usart_putdata_xmd+0xcc>
		size_of_data = length;
    21c6:	4b38      	ldr	r3, [pc, #224]	; (22a8 <usart_putdata_xmd+0x150>)
    21c8:	8019      	strh	r1, [r3, #0]
		mode_of_transfer = 0;
    21ca:	2200      	movs	r2, #0
    21cc:	4b33      	ldr	r3, [pc, #204]	; (229c <usart_putdata_xmd+0x144>)
    21ce:	701a      	strb	r2, [r3, #0]
	if (length & (PKTLEN_128 - 1)) {
    21d0:	000b      	movs	r3, r1
    21d2:	065b      	lsls	r3, r3, #25
    21d4:	d0d1      	beq.n	217a <usart_putdata_xmd+0x22>
		length += PKTLEN_128;
    21d6:	000b      	movs	r3, r1
    21d8:	3380      	adds	r3, #128	; 0x80
		length &= ~(PKTLEN_128 - 1);
    21da:	327f      	adds	r2, #127	; 0x7f
    21dc:	4393      	bics	r3, r2
    21de:	4699      	mov	r9, r3
    21e0:	e7cb      	b.n	217a <usart_putdata_xmd+0x22>
			error_timeout = 0;
    21e2:	2300      	movs	r3, #0
    21e4:	7023      	strb	r3, [r4, #0]
			c = (uint8_t) usart_getc();
    21e6:	4b2e      	ldr	r3, [pc, #184]	; (22a0 <usart_putdata_xmd+0x148>)
    21e8:	4798      	blx	r3
    21ea:	b2c0      	uxtb	r0, r0
			if (error_timeout) {
    21ec:	7823      	ldrb	r3, [r4, #0]
    21ee:	2b00      	cmp	r3, #0
    21f0:	d0cb      	beq.n	218a <usart_putdata_xmd+0x32>
				error_timeout = 0;
    21f2:	2200      	movs	r2, #0
    21f4:	4b28      	ldr	r3, [pc, #160]	; (2298 <usart_putdata_xmd+0x140>)
    21f6:	701a      	strb	r2, [r3, #0]
				return (0);
    21f8:	2000      	movs	r0, #0
    21fa:	e045      	b.n	2288 <usart_putdata_xmd+0x130>
	done = 0;
	sno = 1;
	while (!done) {
		c = (uint8_t) putPacket((uint8_t *) ptr_data, sno);
		if (error_timeout) { // Test for timeout in usart_getc
			error_timeout = 0;
    21fc:	2200      	movs	r2, #0
    21fe:	4b26      	ldr	r3, [pc, #152]	; (2298 <usart_putdata_xmd+0x140>)
    2200:	701a      	strb	r2, [r3, #0]
			return (0);
    2202:	2000      	movs	r0, #0
    2204:	e040      	b.n	2288 <usart_putdata_xmd+0x130>
			data = *tmppkt++;
    2206:	7835      	ldrb	r5, [r6, #0]
			size_of_data--;
    2208:	3b01      	subs	r3, #1
    220a:	8023      	strh	r3, [r4, #0]
			data = *tmppkt++;
    220c:	3601      	adds	r6, #1
		usart_putc(data);
    220e:	0028      	movs	r0, r5
    2210:	4b24      	ldr	r3, [pc, #144]	; (22a4 <usart_putdata_xmd+0x14c>)
    2212:	4798      	blx	r3
		chksm = add_crc(data, chksm);
    2214:	9901      	ldr	r1, [sp, #4]
    2216:	0028      	movs	r0, r5
    2218:	4b24      	ldr	r3, [pc, #144]	; (22ac <usart_putdata_xmd+0x154>)
    221a:	4798      	blx	r3
    221c:	9001      	str	r0, [sp, #4]
    221e:	3f01      	subs	r7, #1
	for (i = 0; i < PKTLEN_128; i++) {
    2220:	2f00      	cmp	r7, #0
    2222:	d008      	beq.n	2236 <usart_putdata_xmd+0xde>
		if (size_of_data || mode_of_transfer) {
    2224:	4643      	mov	r3, r8
    2226:	881b      	ldrh	r3, [r3, #0]
    2228:	2b00      	cmp	r3, #0
    222a:	d1ec      	bne.n	2206 <usart_putdata_xmd+0xae>
    222c:	4652      	mov	r2, sl
    222e:	7815      	ldrb	r5, [r2, #0]
    2230:	2d00      	cmp	r5, #0
    2232:	d0ec      	beq.n	220e <usart_putdata_xmd+0xb6>
    2234:	e7e7      	b.n	2206 <usart_putdata_xmd+0xae>
	usart_putc((uint8_t) (chksm >> 8));
    2236:	0005      	movs	r5, r0
    2238:	0a00      	lsrs	r0, r0, #8
    223a:	b2c0      	uxtb	r0, r0
    223c:	4e19      	ldr	r6, [pc, #100]	; (22a4 <usart_putdata_xmd+0x14c>)
    223e:	47b0      	blx	r6
	usart_putc((uint8_t) chksm);
    2240:	b2e8      	uxtb	r0, r5
    2242:	47b0      	blx	r6
	return (usart_getc()); /* Wait for ack */
    2244:	4b16      	ldr	r3, [pc, #88]	; (22a0 <usart_putdata_xmd+0x148>)
    2246:	4798      	blx	r3
		if (error_timeout) { // Test for timeout in usart_getc
    2248:	4b13      	ldr	r3, [pc, #76]	; (2298 <usart_putdata_xmd+0x140>)
    224a:	781b      	ldrb	r3, [r3, #0]
    224c:	2b00      	cmp	r3, #0
    224e:	d1d5      	bne.n	21fc <usart_putdata_xmd+0xa4>
		}
		switch (c) {
    2250:	23ff      	movs	r3, #255	; 0xff
    2252:	4018      	ands	r0, r3
    2254:	2806      	cmp	r0, #6
    2256:	d109      	bne.n	226c <usart_putdata_xmd+0x114>
		case ACK:
			++sno;
    2258:	9b02      	ldr	r3, [sp, #8]
    225a:	3301      	adds	r3, #1
    225c:	b2db      	uxtb	r3, r3
    225e:	9302      	str	r3, [sp, #8]
			length -= PKTLEN_128;
    2260:	464b      	mov	r3, r9
    2262:	3b80      	subs	r3, #128	; 0x80
    2264:	4699      	mov	r9, r3
			ptr_data += PKTLEN_128;
    2266:	9b03      	ldr	r3, [sp, #12]
    2268:	3380      	adds	r3, #128	; 0x80
    226a:	9303      	str	r3, [sp, #12]
		case EOT:
		default:
			done = 0;
			break;
		}
		if (!length) {
    226c:	464b      	mov	r3, r9
    226e:	2b00      	cmp	r3, #0
    2270:	d19b      	bne.n	21aa <usart_putdata_xmd+0x52>
			usart_putc(EOT);
    2272:	2004      	movs	r0, #4
    2274:	4b0b      	ldr	r3, [pc, #44]	; (22a4 <usart_putdata_xmd+0x14c>)
    2276:	4798      	blx	r3
			usart_getc(); /* Flush the ACK */
    2278:	4b09      	ldr	r3, [pc, #36]	; (22a0 <usart_putdata_xmd+0x148>)
    227a:	4798      	blx	r3
			break;
		}
	}

	mode_of_transfer = 0;
    227c:	2200      	movs	r2, #0
    227e:	4b07      	ldr	r3, [pc, #28]	; (229c <usart_putdata_xmd+0x144>)
    2280:	701a      	strb	r2, [r3, #0]
	return (1);
    2282:	2001      	movs	r0, #1
    2284:	e000      	b.n	2288 <usart_putdata_xmd+0x130>
			return (0);
    2286:	2000      	movs	r0, #0
}
    2288:	b005      	add	sp, #20
    228a:	bc3c      	pop	{r2, r3, r4, r5}
    228c:	4690      	mov	r8, r2
    228e:	4699      	mov	r9, r3
    2290:	46a2      	mov	sl, r4
    2292:	46ab      	mov	fp, r5
    2294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	20000214 	.word	0x20000214
    229c:	20000215 	.word	0x20000215
    22a0:	00001f99 	.word	0x00001f99
    22a4:	00001f71 	.word	0x00001f71
    22a8:	2000015a 	.word	0x2000015a
    22ac:	0000201d 	.word	0x0000201d

000022b0 <usart_getdata_xmd>:

/**
 * \brief Called when a transfer from host to target is being made (considered an download).
 */
uint32_t usart_getdata_xmd(void* data, uint32_t length) {
    22b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22b2:	46c6      	mov	lr, r8
    22b4:	b500      	push	{lr}
    22b6:	b082      	sub	sp, #8
    22b8:	9001      	str	r0, [sp, #4]
    22ba:	000c      	movs	r4, r1
	uint8_t * ptr_data = (uint8_t *) data;
	uint32_t b_run, nbr_of_timeout = 100;
	uint8_t sno = 0x01;

	//Copied from legacy source code ... might need some tweaking
	uint32_t loops_per_second = system_clock_source_get_hz(CONF_CLOCK_GCLK_0_CLOCK_SOURCE) / 10;
    22bc:	2006      	movs	r0, #6
    22be:	4b2f      	ldr	r3, [pc, #188]	; (237c <usart_getdata_xmd+0xcc>)
    22c0:	4798      	blx	r3
    22c2:	210a      	movs	r1, #10
    22c4:	4b2e      	ldr	r3, [pc, #184]	; (2380 <usart_getdata_xmd+0xd0>)
    22c6:	4798      	blx	r3
    22c8:	9000      	str	r0, [sp, #0]

	error_timeout = 0;
    22ca:	2200      	movs	r2, #0
    22cc:	4b2d      	ldr	r3, [pc, #180]	; (2384 <usart_getdata_xmd+0xd4>)
    22ce:	701a      	strb	r2, [r3, #0]

	if (length == 0)
    22d0:	2c00      	cmp	r4, #0
    22d2:	d106      	bne.n	22e2 <usart_getdata_xmd+0x32>
		mode_of_transfer = 1;
    22d4:	3201      	adds	r2, #1
    22d6:	4b2c      	ldr	r3, [pc, #176]	; (2388 <usart_getdata_xmd+0xd8>)
    22d8:	701a      	strb	r2, [r3, #0]
uint32_t usart_getdata_xmd(void* data, uint32_t length) {
    22da:	2564      	movs	r5, #100	; 0x64
	}

	/* Startup synchronization... */
	/* Continuously send NAK or 'C' until sender responds. */
	while (1) {
		usart_putc('C');
    22dc:	4e2b      	ldr	r6, [pc, #172]	; (238c <usart_getdata_xmd+0xdc>)
		timeout = loops_per_second;
		while (!(usart_is_rx_ready()) && timeout)
    22de:	4f2c      	ldr	r7, [pc, #176]	; (2390 <usart_getdata_xmd+0xe0>)
    22e0:	e00e      	b.n	2300 <usart_getdata_xmd+0x50>
		size_of_data = length;
    22e2:	4b2c      	ldr	r3, [pc, #176]	; (2394 <usart_getdata_xmd+0xe4>)
    22e4:	801c      	strh	r4, [r3, #0]
		mode_of_transfer = 0;
    22e6:	2200      	movs	r2, #0
    22e8:	4b27      	ldr	r3, [pc, #156]	; (2388 <usart_getdata_xmd+0xd8>)
    22ea:	701a      	strb	r2, [r3, #0]
    22ec:	e7f5      	b.n	22da <usart_getdata_xmd+0x2a>
			timeout--;
    22ee:	3c01      	subs	r4, #1
		while (!(usart_is_rx_ready()) && timeout)
    22f0:	47b8      	blx	r7
    22f2:	2800      	cmp	r0, #0
    22f4:	d108      	bne.n	2308 <usart_getdata_xmd+0x58>
    22f6:	2c00      	cmp	r4, #0
    22f8:	d1f9      	bne.n	22ee <usart_getdata_xmd+0x3e>
    22fa:	3d01      	subs	r5, #1
		if (timeout)
			break;

		if (!(--nbr_of_timeout))
    22fc:	2d00      	cmp	r5, #0
    22fe:	d03b      	beq.n	2378 <usart_getdata_xmd+0xc8>
		usart_putc('C');
    2300:	2043      	movs	r0, #67	; 0x43
    2302:	47b0      	blx	r6
		timeout = loops_per_second;
    2304:	9c00      	ldr	r4, [sp, #0]
		while (!(usart_is_rx_ready()) && timeout)
    2306:	e7f3      	b.n	22f0 <usart_getdata_xmd+0x40>
		if (timeout)
    2308:	2c00      	cmp	r4, #0
    230a:	d0f6      	beq.n	22fa <usart_getdata_xmd+0x4a>
    230c:	9e01      	ldr	r6, [sp, #4]
    230e:	2401      	movs	r4, #1
			return (0);
	}

	b_run = true;
	while (b_run != false) {
		c = (char) usart_getc();
    2310:	4f21      	ldr	r7, [pc, #132]	; (2398 <usart_getdata_xmd+0xe8>)
		if (error_timeout) { // Test for timeout in usart_getc
    2312:	4d1c      	ldr	r5, [pc, #112]	; (2384 <usart_getdata_xmd+0xd4>)
			error_timeout = 0;
			return (0);
		}
		switch (c) {
		case SOH: /* 128-byte incoming packet */
			b_run = getPacket(ptr_data, sno);
    2314:	4b21      	ldr	r3, [pc, #132]	; (239c <usart_getdata_xmd+0xec>)
    2316:	4698      	mov	r8, r3
    2318:	e012      	b.n	2340 <usart_getdata_xmd+0x90>
			error_timeout = 0;
    231a:	2200      	movs	r2, #0
    231c:	4b19      	ldr	r3, [pc, #100]	; (2384 <usart_getdata_xmd+0xd4>)
    231e:	701a      	strb	r2, [r3, #0]
			return (0);
    2320:	2000      	movs	r0, #0
			break;
		}
	}
	mode_of_transfer = 0;
	return (true);
}
    2322:	b002      	add	sp, #8
    2324:	bc04      	pop	{r2}
    2326:	4690      	mov	r8, r2
    2328:	bdf0      	pop	{r4, r5, r6, r7, pc}
			b_run = getPacket(ptr_data, sno);
    232a:	0021      	movs	r1, r4
    232c:	0030      	movs	r0, r6
    232e:	47c0      	blx	r8
			if (error_timeout) { // Test for timeout in usart_getc
    2330:	4b14      	ldr	r3, [pc, #80]	; (2384 <usart_getdata_xmd+0xd4>)
    2332:	781b      	ldrb	r3, [r3, #0]
    2334:	2b00      	cmp	r3, #0
    2336:	d112      	bne.n	235e <usart_getdata_xmd+0xae>
			if (b_run == true) {
    2338:	2801      	cmp	r0, #1
    233a:	d015      	beq.n	2368 <usart_getdata_xmd+0xb8>
	while (b_run != false) {
    233c:	2800      	cmp	r0, #0
    233e:	d009      	beq.n	2354 <usart_getdata_xmd+0xa4>
		c = (char) usart_getc();
    2340:	47b8      	blx	r7
		if (error_timeout) { // Test for timeout in usart_getc
    2342:	782b      	ldrb	r3, [r5, #0]
    2344:	2b00      	cmp	r3, #0
    2346:	d1e8      	bne.n	231a <usart_getdata_xmd+0x6a>
		switch (c) {
    2348:	23ff      	movs	r3, #255	; 0xff
    234a:	4018      	ands	r0, r3
    234c:	2801      	cmp	r0, #1
    234e:	d0ec      	beq.n	232a <usart_getdata_xmd+0x7a>
    2350:	2804      	cmp	r0, #4
    2352:	d00d      	beq.n	2370 <usart_getdata_xmd+0xc0>
	mode_of_transfer = 0;
    2354:	2200      	movs	r2, #0
    2356:	4b0c      	ldr	r3, [pc, #48]	; (2388 <usart_getdata_xmd+0xd8>)
    2358:	701a      	strb	r2, [r3, #0]
	return (true);
    235a:	2001      	movs	r0, #1
    235c:	e7e1      	b.n	2322 <usart_getdata_xmd+0x72>
				error_timeout = 0;
    235e:	2200      	movs	r2, #0
    2360:	4b08      	ldr	r3, [pc, #32]	; (2384 <usart_getdata_xmd+0xd4>)
    2362:	701a      	strb	r2, [r3, #0]
				return (0);
    2364:	2000      	movs	r0, #0
    2366:	e7dc      	b.n	2322 <usart_getdata_xmd+0x72>
				++sno;
    2368:	3401      	adds	r4, #1
    236a:	b2e4      	uxtb	r4, r4
				ptr_data += PKTLEN_128;
    236c:	3680      	adds	r6, #128	; 0x80
    236e:	e7e7      	b.n	2340 <usart_getdata_xmd+0x90>
			usart_putc(ACK);
    2370:	2006      	movs	r0, #6
    2372:	4b06      	ldr	r3, [pc, #24]	; (238c <usart_getdata_xmd+0xdc>)
    2374:	4798      	blx	r3
    2376:	e7ed      	b.n	2354 <usart_getdata_xmd+0xa4>
			return (0);
    2378:	2000      	movs	r0, #0
    237a:	e7d2      	b.n	2322 <usart_getdata_xmd+0x72>
    237c:	00001259 	.word	0x00001259
    2380:	000023a1 	.word	0x000023a1
    2384:	20000214 	.word	0x20000214
    2388:	20000215 	.word	0x20000215
    238c:	00001f71 	.word	0x00001f71
    2390:	00001f89 	.word	0x00001f89
    2394:	2000015a 	.word	0x2000015a
    2398:	00001f99 	.word	0x00001f99
    239c:	000020dd 	.word	0x000020dd

000023a0 <__udivsi3>:
    23a0:	2200      	movs	r2, #0
    23a2:	0843      	lsrs	r3, r0, #1
    23a4:	428b      	cmp	r3, r1
    23a6:	d374      	bcc.n	2492 <__udivsi3+0xf2>
    23a8:	0903      	lsrs	r3, r0, #4
    23aa:	428b      	cmp	r3, r1
    23ac:	d35f      	bcc.n	246e <__udivsi3+0xce>
    23ae:	0a03      	lsrs	r3, r0, #8
    23b0:	428b      	cmp	r3, r1
    23b2:	d344      	bcc.n	243e <__udivsi3+0x9e>
    23b4:	0b03      	lsrs	r3, r0, #12
    23b6:	428b      	cmp	r3, r1
    23b8:	d328      	bcc.n	240c <__udivsi3+0x6c>
    23ba:	0c03      	lsrs	r3, r0, #16
    23bc:	428b      	cmp	r3, r1
    23be:	d30d      	bcc.n	23dc <__udivsi3+0x3c>
    23c0:	22ff      	movs	r2, #255	; 0xff
    23c2:	0209      	lsls	r1, r1, #8
    23c4:	ba12      	rev	r2, r2
    23c6:	0c03      	lsrs	r3, r0, #16
    23c8:	428b      	cmp	r3, r1
    23ca:	d302      	bcc.n	23d2 <__udivsi3+0x32>
    23cc:	1212      	asrs	r2, r2, #8
    23ce:	0209      	lsls	r1, r1, #8
    23d0:	d065      	beq.n	249e <__udivsi3+0xfe>
    23d2:	0b03      	lsrs	r3, r0, #12
    23d4:	428b      	cmp	r3, r1
    23d6:	d319      	bcc.n	240c <__udivsi3+0x6c>
    23d8:	e000      	b.n	23dc <__udivsi3+0x3c>
    23da:	0a09      	lsrs	r1, r1, #8
    23dc:	0bc3      	lsrs	r3, r0, #15
    23de:	428b      	cmp	r3, r1
    23e0:	d301      	bcc.n	23e6 <__udivsi3+0x46>
    23e2:	03cb      	lsls	r3, r1, #15
    23e4:	1ac0      	subs	r0, r0, r3
    23e6:	4152      	adcs	r2, r2
    23e8:	0b83      	lsrs	r3, r0, #14
    23ea:	428b      	cmp	r3, r1
    23ec:	d301      	bcc.n	23f2 <__udivsi3+0x52>
    23ee:	038b      	lsls	r3, r1, #14
    23f0:	1ac0      	subs	r0, r0, r3
    23f2:	4152      	adcs	r2, r2
    23f4:	0b43      	lsrs	r3, r0, #13
    23f6:	428b      	cmp	r3, r1
    23f8:	d301      	bcc.n	23fe <__udivsi3+0x5e>
    23fa:	034b      	lsls	r3, r1, #13
    23fc:	1ac0      	subs	r0, r0, r3
    23fe:	4152      	adcs	r2, r2
    2400:	0b03      	lsrs	r3, r0, #12
    2402:	428b      	cmp	r3, r1
    2404:	d301      	bcc.n	240a <__udivsi3+0x6a>
    2406:	030b      	lsls	r3, r1, #12
    2408:	1ac0      	subs	r0, r0, r3
    240a:	4152      	adcs	r2, r2
    240c:	0ac3      	lsrs	r3, r0, #11
    240e:	428b      	cmp	r3, r1
    2410:	d301      	bcc.n	2416 <__udivsi3+0x76>
    2412:	02cb      	lsls	r3, r1, #11
    2414:	1ac0      	subs	r0, r0, r3
    2416:	4152      	adcs	r2, r2
    2418:	0a83      	lsrs	r3, r0, #10
    241a:	428b      	cmp	r3, r1
    241c:	d301      	bcc.n	2422 <__udivsi3+0x82>
    241e:	028b      	lsls	r3, r1, #10
    2420:	1ac0      	subs	r0, r0, r3
    2422:	4152      	adcs	r2, r2
    2424:	0a43      	lsrs	r3, r0, #9
    2426:	428b      	cmp	r3, r1
    2428:	d301      	bcc.n	242e <__udivsi3+0x8e>
    242a:	024b      	lsls	r3, r1, #9
    242c:	1ac0      	subs	r0, r0, r3
    242e:	4152      	adcs	r2, r2
    2430:	0a03      	lsrs	r3, r0, #8
    2432:	428b      	cmp	r3, r1
    2434:	d301      	bcc.n	243a <__udivsi3+0x9a>
    2436:	020b      	lsls	r3, r1, #8
    2438:	1ac0      	subs	r0, r0, r3
    243a:	4152      	adcs	r2, r2
    243c:	d2cd      	bcs.n	23da <__udivsi3+0x3a>
    243e:	09c3      	lsrs	r3, r0, #7
    2440:	428b      	cmp	r3, r1
    2442:	d301      	bcc.n	2448 <__udivsi3+0xa8>
    2444:	01cb      	lsls	r3, r1, #7
    2446:	1ac0      	subs	r0, r0, r3
    2448:	4152      	adcs	r2, r2
    244a:	0983      	lsrs	r3, r0, #6
    244c:	428b      	cmp	r3, r1
    244e:	d301      	bcc.n	2454 <__udivsi3+0xb4>
    2450:	018b      	lsls	r3, r1, #6
    2452:	1ac0      	subs	r0, r0, r3
    2454:	4152      	adcs	r2, r2
    2456:	0943      	lsrs	r3, r0, #5
    2458:	428b      	cmp	r3, r1
    245a:	d301      	bcc.n	2460 <__udivsi3+0xc0>
    245c:	014b      	lsls	r3, r1, #5
    245e:	1ac0      	subs	r0, r0, r3
    2460:	4152      	adcs	r2, r2
    2462:	0903      	lsrs	r3, r0, #4
    2464:	428b      	cmp	r3, r1
    2466:	d301      	bcc.n	246c <__udivsi3+0xcc>
    2468:	010b      	lsls	r3, r1, #4
    246a:	1ac0      	subs	r0, r0, r3
    246c:	4152      	adcs	r2, r2
    246e:	08c3      	lsrs	r3, r0, #3
    2470:	428b      	cmp	r3, r1
    2472:	d301      	bcc.n	2478 <__udivsi3+0xd8>
    2474:	00cb      	lsls	r3, r1, #3
    2476:	1ac0      	subs	r0, r0, r3
    2478:	4152      	adcs	r2, r2
    247a:	0883      	lsrs	r3, r0, #2
    247c:	428b      	cmp	r3, r1
    247e:	d301      	bcc.n	2484 <__udivsi3+0xe4>
    2480:	008b      	lsls	r3, r1, #2
    2482:	1ac0      	subs	r0, r0, r3
    2484:	4152      	adcs	r2, r2
    2486:	0843      	lsrs	r3, r0, #1
    2488:	428b      	cmp	r3, r1
    248a:	d301      	bcc.n	2490 <__udivsi3+0xf0>
    248c:	004b      	lsls	r3, r1, #1
    248e:	1ac0      	subs	r0, r0, r3
    2490:	4152      	adcs	r2, r2
    2492:	1a41      	subs	r1, r0, r1
    2494:	d200      	bcs.n	2498 <__udivsi3+0xf8>
    2496:	4601      	mov	r1, r0
    2498:	4152      	adcs	r2, r2
    249a:	4610      	mov	r0, r2
    249c:	4770      	bx	lr
    249e:	e7ff      	b.n	24a0 <__udivsi3+0x100>
    24a0:	b501      	push	{r0, lr}
    24a2:	2000      	movs	r0, #0
    24a4:	f000 f806 	bl	24b4 <__aeabi_idiv0>
    24a8:	bd02      	pop	{r1, pc}
    24aa:	46c0      	nop			; (mov r8, r8)

000024ac <__aeabi_uidivmod>:
    24ac:	2900      	cmp	r1, #0
    24ae:	d0f7      	beq.n	24a0 <__udivsi3+0x100>
    24b0:	e776      	b.n	23a0 <__udivsi3>
    24b2:	4770      	bx	lr

000024b4 <__aeabi_idiv0>:
    24b4:	4770      	bx	lr
    24b6:	46c0      	nop			; (mov r8, r8)

000024b8 <__aeabi_lmul>:
    24b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ba:	46ce      	mov	lr, r9
    24bc:	4647      	mov	r7, r8
    24be:	0415      	lsls	r5, r2, #16
    24c0:	0c2d      	lsrs	r5, r5, #16
    24c2:	002e      	movs	r6, r5
    24c4:	b580      	push	{r7, lr}
    24c6:	0407      	lsls	r7, r0, #16
    24c8:	0c14      	lsrs	r4, r2, #16
    24ca:	0c3f      	lsrs	r7, r7, #16
    24cc:	4699      	mov	r9, r3
    24ce:	0c03      	lsrs	r3, r0, #16
    24d0:	437e      	muls	r6, r7
    24d2:	435d      	muls	r5, r3
    24d4:	4367      	muls	r7, r4
    24d6:	4363      	muls	r3, r4
    24d8:	197f      	adds	r7, r7, r5
    24da:	0c34      	lsrs	r4, r6, #16
    24dc:	19e4      	adds	r4, r4, r7
    24de:	469c      	mov	ip, r3
    24e0:	42a5      	cmp	r5, r4
    24e2:	d903      	bls.n	24ec <__aeabi_lmul+0x34>
    24e4:	2380      	movs	r3, #128	; 0x80
    24e6:	025b      	lsls	r3, r3, #9
    24e8:	4698      	mov	r8, r3
    24ea:	44c4      	add	ip, r8
    24ec:	464b      	mov	r3, r9
    24ee:	4351      	muls	r1, r2
    24f0:	4343      	muls	r3, r0
    24f2:	0436      	lsls	r6, r6, #16
    24f4:	0c36      	lsrs	r6, r6, #16
    24f6:	0c25      	lsrs	r5, r4, #16
    24f8:	0424      	lsls	r4, r4, #16
    24fa:	4465      	add	r5, ip
    24fc:	19a4      	adds	r4, r4, r6
    24fe:	1859      	adds	r1, r3, r1
    2500:	1949      	adds	r1, r1, r5
    2502:	0020      	movs	r0, r4
    2504:	bc0c      	pop	{r2, r3}
    2506:	4690      	mov	r8, r2
    2508:	4699      	mov	r9, r3
    250a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000250c <__libc_init_array>:
    250c:	b570      	push	{r4, r5, r6, lr}
    250e:	2600      	movs	r6, #0
    2510:	4d0c      	ldr	r5, [pc, #48]	; (2544 <__libc_init_array+0x38>)
    2512:	4c0d      	ldr	r4, [pc, #52]	; (2548 <__libc_init_array+0x3c>)
    2514:	1b64      	subs	r4, r4, r5
    2516:	10a4      	asrs	r4, r4, #2
    2518:	42a6      	cmp	r6, r4
    251a:	d109      	bne.n	2530 <__libc_init_array+0x24>
    251c:	2600      	movs	r6, #0
    251e:	f000 f999 	bl	2854 <_init>
    2522:	4d0a      	ldr	r5, [pc, #40]	; (254c <__libc_init_array+0x40>)
    2524:	4c0a      	ldr	r4, [pc, #40]	; (2550 <__libc_init_array+0x44>)
    2526:	1b64      	subs	r4, r4, r5
    2528:	10a4      	asrs	r4, r4, #2
    252a:	42a6      	cmp	r6, r4
    252c:	d105      	bne.n	253a <__libc_init_array+0x2e>
    252e:	bd70      	pop	{r4, r5, r6, pc}
    2530:	00b3      	lsls	r3, r6, #2
    2532:	58eb      	ldr	r3, [r5, r3]
    2534:	4798      	blx	r3
    2536:	3601      	adds	r6, #1
    2538:	e7ee      	b.n	2518 <__libc_init_array+0xc>
    253a:	00b3      	lsls	r3, r6, #2
    253c:	58eb      	ldr	r3, [r5, r3]
    253e:	4798      	blx	r3
    2540:	3601      	adds	r6, #1
    2542:	e7f2      	b.n	252a <__libc_init_array+0x1e>
    2544:	00002860 	.word	0x00002860
    2548:	00002860 	.word	0x00002860
    254c:	00002860 	.word	0x00002860
    2550:	00002864 	.word	0x00002864

00002554 <memcpy>:
    2554:	2300      	movs	r3, #0
    2556:	b510      	push	{r4, lr}
    2558:	429a      	cmp	r2, r3
    255a:	d100      	bne.n	255e <memcpy+0xa>
    255c:	bd10      	pop	{r4, pc}
    255e:	5ccc      	ldrb	r4, [r1, r3]
    2560:	54c4      	strb	r4, [r0, r3]
    2562:	3301      	adds	r3, #1
    2564:	e7f8      	b.n	2558 <memcpy+0x4>
	...

00002568 <_tcc_intflag>:
    2568:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    2578:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    2588:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    2598:	0400 4200 0800 4200 0c00 4200 1000 4200     ...B...B...B...B
    25a8:	1400 4200 1800 4200 126a 0000 1266 0000     ...B...Bj...f...
    25b8:	1266 0000 1298 0000 1298 0000 1282 0000     f...............
    25c8:	1270 0000 1288 0000                         p.......

000025d0 <Pcom0.17387>:
    25d0:	0506 0704 2806 0029 0400 4200 0305 0401     .....()....B....
    25e0:	0003 0307 0603 0203 ffff ffff ffff 0000     ................
    25f0:	4400 4200 ffff ffff ffff ffff ffff ffff     .D.B............
    2600:	0121 2009 0801 0000 2800 4000 0009 0809     !.. .....(.@....
    2610:	0000 000b 0a0b 0a00 0015 1205 0200 0000     ................

00002620 <Pcom0B.17399>:
    2620:	0506 0704 2806 0029 0400 4200 0305 0401     .....()....B....
    2630:	0003 0307 0603 0203 ffff ffff ffff 0000     ................
    2640:	4400 4200 ffff ffff ffff ffff ffff ffff     .D.B............
    2650:	0121 2009 0801 0000 2800 4000 0009 0809     !.. .....(.@....
    2660:	0000 000b 0a0b 0a00 0015 1205 0200 0000     ................

00002670 <Pcom1.17389>:
    2670:	0106 1f00 211e 0020 0800 4200 0301 0001     .....! ....B....
    2680:	0003 031f 1e03 0203 ffff ffff ffff 0000     ................
    2690:	4800 4200 ffff ffff ffff ffff ffff ffff     .H.B............
    26a0:	0121 2009 0801 0000 2800 4000 0001 0001     !.. .....(.@....
    26b0:	0000 001f 1e0b 0a00 0021 2001 0000 0000     ........!.. ....

000026c0 <Pcom2.17391>:
    26c0:	0d06 0f0c 100e 0011 0c00 4200 020d 0c01     ...........B....
    26d0:	0002 020f 0e03 0202 ffff ffff ffff 0000     ................
    26e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    26f0:	ffff ffff ffff 0000 2800 4000 000d 0c0d     .........(.@....
    2700:	0c00 000f 0e0f 0e00 0010 1100 0100 0000     ................

00002710 <Pcom3.17393>:
    2710:	1706 1916 1318 0014 1000 4200 0217 1601     ...........B....
    2720:	0002 0219 1803 0202 ffff ffff ffff 0000     ................
    2730:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    2740:	ffff ffff ffff 0000 2800 4000 0017 1607     .........(.@....
    2750:	0600 0019 180d 0c00 0013 1403 0400 0000     ................

00002760 <Pcom4.17395>:
    2760:	2d06 2f2c 312e 0030 1400 4200 022d 2c01     .-,/.10....B-..,
    2770:	0002 022f 2e03 0202 ffff ffff ffff 0000     ../.............
    2780:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    2790:	ffff ffff ffff 0000 2800 4000 002d 2c0d     .........(.@-..,
    27a0:	0c00 002f 2e0f 0e00 0031 3001 0000 0000     ../.....1..0....

000027b0 <Pcom5.17397>:
    27b0:	3f06 373e 1c36 001b 1800 4200 033f 3e01     .?>76......B?..>
    27c0:	0003 0337 3603 0203 ffff ffff ffff 0000     ..7..6..........
    27d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    27e0:	ffff ffff ffff 0000 2800 4000 003f 3e0f     .........(.@?..>
    27f0:	0e00 0037 3607 0600 001c 1b08 0f00 0000     ..7..6..........

00002800 <config>:
    2800:	0200 0000                                   ....

00002804 <configout>:
    2804:	0202 0000                                   ....

00002808 <RomBOOT_Version>:
    2808:	2e32 3631 0000 0000 0d0a 0000 0076 0000     2.16........v...
    2818:	0020 0000 754a 206c 3231 3220 3130 0037      ...Jul 12 2017.
    2828:	3531 313a 3a37 3732 0000 0000 003e 0000     15:17:27....>...

00002838 <uart_if>:
    2838:	1f71 0000 1f99 0000 1f89 0000 1fe9 0000     q...............
    2848:	2009 0000 2159 0000 22b1 0000               . ..Y!..."..

00002854 <_init>:
    2854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2856:	46c0      	nop			; (mov r8, r8)
    2858:	bcf8      	pop	{r3, r4, r5, r6, r7}
    285a:	bc08      	pop	{r3}
    285c:	469e      	mov	lr, r3
    285e:	4770      	bx	lr

00002860 <__init_array_start>:
    2860:	000000e5 	.word	0x000000e5

00002864 <_fini>:
    2864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2866:	46c0      	nop			; (mov r8, r8)
    2868:	bcf8      	pop	{r3, r4, r5, r6, r7}
    286a:	bc08      	pop	{r3}
    286c:	469e      	mov	lr, r3
    286e:	4770      	bx	lr

00002870 <__fini_array_start>:
    2870:	000000bd 	.word	0x000000bd
